<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container on TLDRBins</title>
    <link>https://tldrbins.github.io/@container/</link>
    <description>Recent content in Container on TLDRBins</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://tldrbins.github.io/@container/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>disk group</title>
      <link>https://tldrbins.github.io/disk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/disk/</guid>
      <description>Basic # Show devices lsblk $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 12G 0 disk ├─sda1 8:1 0 120M 0 part /boot ├─sda2 8:2 0 1K 0 part └─sda5 8:5 0 11.9G 0 part ├─Kotarak--vg-root 252:0 0 7G 0 lvm / └─Kotarak--vg-swap_1 252:1 0 1G 0 lvm [SWAP] sr0 11:0 1 1024M 0 rom # Device attributes blkid $ blkid /dev/sda1: UUID=&amp;#34;67e178a9-1b2a-407e-8d3f-7b1772bab2be&amp;#34; TYPE=&amp;#34;ext2&amp;#34; PARTUUID=&amp;#34;1b9f3540-01&amp;#34; /dev/sda5: UUID=&amp;#34;LnUYcF-uZX0-c91G-XfUl-6BqJ-gk8W-QtnncD&amp;#34; TYPE=&amp;#34;LVM2_member&amp;#34; PARTUUID=&amp;#34;1b9f3540-05&amp;#34; /dev/mapper/Kotarak--vg-root: UUID=&amp;#34;efb44a28-8edc-4d40-aca3-81e57d58d759&amp;#34; TYPE=&amp;#34;ext4&amp;#34; /dev/mapper/Kotarak--vg-swap_1: UUID=&amp;#34;162b2913-7dcf-4ba7-bddc-238a22f16e52&amp;#34; TYPE=&amp;#34;swap&amp;#34; # Show device mapping ls -l /dev/mapper/ $ ls -l /dev/mapper/ total 0 crw------- 1 root root 10, 236 Sep 22 23:22 control lrwxrwxrwx 1 root root 7 Sep 22 23:22 Kotarak--vg-root -&amp;gt; .</description>
    </item>
    <item>
      <title>Docker</title>
      <link>https://tldrbins.github.io/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/docker/</guid>
      <description>Basic Commands # Show All Running Docker Processes sudo docker ps -a # Show All Docker Images sudo docker images -a # Stop All Docker Processes sudo docker stop $(sudo docker ps -a -q) # Remove All Docker Processes sudo docker rm -vf $(sudo docker ps -a -q) # Remove All Docker Images sudo docker rmi -f $(sudo docker images -aq) # Shell in Container sudo docker exec -it &amp;lt;CONTAINER_ID&amp;gt; bash # Privileged Shell in Container sudo docker exec -it --privileged --user root &amp;lt;CONTAINER_ID&amp;gt; bash # Copy File from Host to Container sudo docker cp &amp;lt;HOST_FILE_PATH&amp;gt; &amp;lt;CONTAINER_ID&amp;gt;:&amp;lt;CONTAINER_FILE_PATH&amp;gt; # Copy File from Container to Host sudo docker cp &amp;lt;CONTAINER_ID&amp;gt;:&amp;lt;CONTAINER_FILE_PATH&amp;gt; &amp;lt;HOST_FILE_PATH&amp;gt; # Copy Folder from Host to Container sudo docker cp &amp;lt;HOST_FOLDER_PATH&amp;gt;/.</description>
    </item>
    <item>
      <title>Docker Registry</title>
      <link>https://tldrbins.github.io/docker_registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/docker_registry/</guid>
      <description>Docker Registry API # List repos curl -s -k --user &amp;#34;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#34; &amp;lt;TARGET&amp;gt;/v2/_catalog $ curl -s -k --user &amp;#34;admin:admin&amp;#34; https://docker.registry.htb/v2/_catalog {&amp;#34;repositories&amp;#34;:[&amp;#34;bolt-image&amp;#34;]} # List of tags of this repo curl -s -k --user &amp;#34;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#34; &amp;lt;TARGET&amp;gt;/v2/&amp;lt;REPO_NAME&amp;gt;/tags/list $ curl -s -k --user &amp;#34;admin:admin&amp;#34; https://docker.registry.htb/v2/bolt-image/tags/list {&amp;#34;name&amp;#34;:&amp;#34;bolt-image&amp;#34;,&amp;#34;tags&amp;#34;:[&amp;#34;latest&amp;#34;]} # List manifest file for this tag (e.g. latest) curl -s -k --user &amp;#34;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#34; &amp;lt;TARGET&amp;gt;/v2/&amp;lt;REPO_NAME&amp;gt;/manifests/&amp;lt;TAG&amp;gt; $ curl -s -k --user &amp;#34;admin:admin&amp;#34; https://docker.registry.htb/v2/bolt-image/manifests/latest { &amp;#34;schemaVersion&amp;#34;: 1, &amp;#34;name&amp;#34;: &amp;#34;bolt-image&amp;#34;, &amp;#34;tag&amp;#34;: &amp;#34;latest&amp;#34;, &amp;#34;architecture&amp;#34;: &amp;#34;amd64&amp;#34;, &amp;#34;fsLayers&amp;#34;: [ { &amp;#34;blobSum&amp;#34;: &amp;#34;sha256:302bfcb3f10c386a25a58913917257bd2fe772127e36645192fa35e4c6b3c66b&amp;#34; }, { &amp;#34;blobSum&amp;#34;: &amp;#34;sha256:3f12770883a63c833eab7652242d55a95aea6e2ecd09e21c29d7d7b354f3d4ee&amp;#34; }, { &amp;#34;blobSum&amp;#34;: &amp;#34;sha256:02666a14e1b55276ecb9812747cb1a95b78056f1d202b087d71096ca0b58c98c&amp;#34; }, ---[SNIP]--- } # Get a commit of the image curl -s -k --user &amp;#34;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#34; &amp;lt;TARGET&amp;gt;/v2/&amp;lt;REPO_NAME&amp;gt;/blobs/sha256:&amp;lt;BLOB_HASH&amp;gt; &amp;gt; &amp;lt;BLOB_HASH&amp;gt;.</description>
    </item>
    <item>
      <title>Kubelet</title>
      <link>https://tldrbins.github.io/kubelet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/kubelet/</guid>
      <description>Basic Commands # List all the pods on the node kubeletctl pods -s &amp;lt;TARGET&amp;gt; # List running pods kubeletctl runningpods -s &amp;lt;TARGET&amp;gt; # Exec command kubeletctl exec &amp;#34;/bin/bash&amp;#34; -p &amp;lt;POD_NAME&amp;gt; -c &amp;lt;CONTAINER_NAME&amp;gt; -s &amp;lt;TARGET&amp;gt; Ref: kubeletctl</description>
    </item>
    <item>
      <title>Kubernetes</title>
      <link>https://tldrbins.github.io/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/kubernetes/</guid>
      <description>Token Location /run/secrets/kubernetes.io/serviceaccount/token Certificate Location /run/secrets/kubernetes.io/serviceaccount/ca.crt Basic Commands # List all namespaces kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; get namespaces # Get user permissions in current namespace kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; auth can-i --list # Get user permissions in specific namespace kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; auth can-i --list -n &amp;lt;NAMESPACE&amp;gt; # List all pods kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; get pods --all-namespaces # List pods in specific namespace kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.</description>
    </item>
    <item>
      <title>lxd</title>
      <link>https://tldrbins.github.io/lxd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/lxd/</guid>
      <description>Basic Commands # Check if user in lxd group id orestis@brainfuck:~$ id uid=1000(orestis) gid=1000(orestis) groups=1000(orestis),4(adm),24(cdrom),30(dip),46(plugdev),110(lxd),121(lpadmin),122(sambashare) # List containers lxc list orestis@brainfuck:~$ lxc list Generating a client certificate. This may take a minute... If this is your first time using LXD, you should also run: sudo lxd init To start your first container, try: lxc launch ubuntu:16.04 +------+-------+------+------+------+-----------+ | NAME | STATE | IPV4 | IPV6 | TYPE | SNAPSHOTS | +------+-------+------+------+------+-----------+ # List images lxc image list orestis@brainfuck:~$ lxc image list +-------+-------------+--------+-------------+------+------+-------------+ | ALIAS | FINGERPRINT | PUBLIC | DESCRIPTION | ARCH | SIZE | UPLOAD DATE | +-------+-------------+--------+-------------+------+------+-------------+ Abuse #1: Mount host&amp;rsquo;s file system # Upload a 656 bytes conatiner image echo QlpoOTFBWSZTWaxzK54ABPR/p86QAEBoA//QAA3voP/v3+AACAAEgACQAIAIQAK8KAKCGURPUPJGRp6gNAAAAGgeoA5gE0wCZDAAEwTAAADmATTAJkMAATBMAAAEiIIEp5CepmQmSNNqeoafqZTxQ00HtU9EC9/dr7/586W+tl+zW5or5/vSkzToXUxptsDiZIE17U20gexCSAp1Z9b9+MnY7TS1KUmZjspN0MQ23dsPcIFWwEtQMbTa3JGLHE0olggWQgXSgTSQoSEHl4PZ7N0+FtnTigWSAWkA+WPkw40ggZVvYfaxI3IgBhip9pfFZV5Lm4lCBExydrO+DGwFGsZbYRdsmZxwDUTdlla0y27s5Euzp+Ec4hAt+2AQL58OHZEcPFHieKvHnfyU/EEC07m9ka56FyQh/LsrzVNsIkYLvayQzNAnigX0venhCMc9XRpFEVYJ0wRpKrjabiC9ZAiXaHObAY6oBiFdpBlggUJVMLNKLRQpDoGDIwfle01yQqWxwrKE5aMWOglhlUQQUit6VogV2cD01i0xysiYbzerOUWyrpCAvE41pCFYVoRPj/B28wSZUy/TaUHYx9GkfEYg9mcAilQ+nPCBfgZ5fl3GuPmfUOB3sbFm6/bRA0nXChku7aaN+AueYzqhKOKiBPjLlAAvxBAjAmSJWD5AqhLv/fWja66s7omu/ZTHcC24QJ83NrM67KACLACNUcnJjTTHCCDUIUJtOtN+7rQL+kCm4+U9Wj19YXFhxaXVt6Ph1ALRKOV9Xb7Sm68oF7nhyvegWjELKFH3XiWstVNGgTQTWoCjDnpXh9+/JXxIg4i8mvNobXGIXbmrGeOvXE8pou6wdqSD/F3JFOFCQrHMrng= | base64 -d &amp;gt; test.</description>
    </item>
  </channel>
</rss>
